{"version":3,"file":"tinode.prod.js","mappings":"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","sources":["webpack://tinode-sdk/./src/drafty.js","webpack://tinode-sdk/webpack/bootstrap","webpack://tinode-sdk/webpack/runtime/compat get default export","webpack://tinode-sdk/webpack/runtime/define property getters","webpack://tinode-sdk/webpack/runtime/global","webpack://tinode-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://tinode-sdk/./src/access-mode.js","webpack://tinode-sdk/./version.js","webpack://tinode-sdk/./src/config.js","webpack://tinode-sdk/./src/comm-error.js","webpack://tinode-sdk/./src/utils.js","webpack://tinode-sdk/./src/connection.js","webpack://tinode-sdk/./src/db.js","webpack://tinode-sdk/./src/large-file.js","webpack://tinode-sdk/./src/meta-builder.js","webpack://tinode-sdk/./src/cbuffer.js","webpack://tinode-sdk/./src/topic.js","webpack://tinode-sdk/./src/tinode.js"],"sourcesContent":["/**\n * @copyright 2015-2022 Tinode LLC.\n * @summary Minimally rich text representation and formatting for Tinode.\n * @license Apache 2.0\n *\n * @file Basic parser and formatter for very simple text markup. Mostly targeted at\n * mobile use cases similar to Telegram, WhatsApp, and FB Messenger.\n *\n * <p>Supports conversion of user keyboard input to formatted text:</p>\n * <ul>\n *   <li>*abc* &rarr; <b>abc</b></li>\n *   <li>_abc_ &rarr; <i>abc</i></li>\n *   <li>~abc~ &rarr; <del>abc</del></li>\n *   <li>`abc` &rarr; <tt>abc</tt></li>\n * </ul>\n * Also supports forms and buttons.\n *\n * Nested formatting is supported, e.g. *abc _def_* -> <b>abc <i>def</i></b>\n * URLs, @mentions, and #hashtags are extracted and converted into links.\n * Forms and buttons can be added procedurally.\n * JSON data representation is inspired by Draft.js raw formatting.\n *\n *\n * @example\n * Text:\n * <pre>\n *     this is *bold*, `code` and _italic_, ~strike~\n *     combined *bold and _italic_*\n *     an url: https://www.example.com/abc#fragment and another _www.tinode.co_\n *     this is a @mention and a #hashtag in a string\n *     second #hashtag\n * </pre>\n *\n *  Sample JSON representation of the text above:\n *  {\n *     \"txt\": \"this is bold, code and italic, strike combined bold and italic an url: https://www.example.com/abc#fragment \" +\n *             \"and another www.tinode.co this is a @mention and a #hashtag in a string second #hashtag\",\n *     \"fmt\": [\n *         { \"at\":8, \"len\":4,\"tp\":\"ST\" },{ \"at\":14, \"len\":4, \"tp\":\"CO\" },{ \"at\":23, \"len\":6, \"tp\":\"EM\"},\n *         { \"at\":31, \"len\":6, \"tp\":\"DL\" },{ \"tp\":\"BR\", \"len\":1, \"at\":37 },{ \"at\":56, \"len\":6, \"tp\":\"EM\" },\n *         { \"at\":47, \"len\":15, \"tp\":\"ST\" },{ \"tp\":\"BR\", \"len\":1, \"at\":62 },{ \"at\":120, \"len\":13, \"tp\":\"EM\" },\n *         { \"at\":71, \"len\":36, \"key\":0 },{ \"at\":120, \"len\":13, \"key\":1 },{ \"tp\":\"BR\", \"len\":1, \"at\":133 },\n *         { \"at\":144, \"len\":8, \"key\":2 },{ \"at\":159, \"len\":8, \"key\":3 },{ \"tp\":\"BR\", \"len\":1, \"at\":179 },\n *         { \"at\":187, \"len\":8, \"key\":3 },{ \"tp\":\"BR\", \"len\":1, \"at\":195 }\n *     ],\n *     \"ent\": [\n *         { \"tp\":\"LN\", \"data\":{ \"url\":\"https://www.example.com/abc#fragment\" } },\n *         { \"tp\":\"LN\", \"data\":{ \"url\":\"http://www.tinode.co\" } },\n *         { \"tp\":\"MN\", \"data\":{ \"val\":\"mention\" } },\n *         { \"tp\":\"HT\", \"data\":{ \"val\":\"hashtag\" } }\n *     ]\n *  }\n */\n\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\nconst MAX_FORM_ELEMENTS = 8;\nconst MAX_PREVIEW_ATTACHMENTS = 3;\nconst MAX_PREVIEW_DATA_SIZE = 64;\nconst JSON_MIME_TYPE = 'application/json';\nconst DRAFTY_MIME_TYPE = 'text/x-drafty';\nconst ALLOWED_ENT_FIELDS = ['act', 'height', 'duration', 'incoming', 'mime', 'name', 'premime', 'preref', 'preview',\n  'ref', 'size', 'state', 'url', 'val', 'width'\n];\n\n// Regular expressions for parsing inline formats. Javascript does not support lookbehind,\n// so it's a bit messy.\nconst INLINE_STYLES = [\n  // Strong = bold, *bold text*\n  {\n    name: 'ST',\n    start: /(?:^|[\\W_])(\\*)[^\\s*]/,\n    end: /[^\\s*](\\*)(?=$|[\\W_])/\n  },\n  // Emphesized = italic, _italic text_\n  {\n    name: 'EM',\n    start: /(?:^|\\W)(_)[^\\s_]/,\n    end: /[^\\s_](_)(?=$|\\W)/\n  },\n  // Deleted, ~strike this though~\n  {\n    name: 'DL',\n    start: /(?:^|[\\W_])(~)[^\\s~]/,\n    end: /[^\\s~](~)(?=$|[\\W_])/\n  },\n  // Code block `this is monospace`\n  {\n    name: 'CO',\n    start: /(?:^|\\W)(`)[^`]/,\n    end: /[^`](`)(?=$|\\W)/\n  }\n];\n\n// Relative weights of formatting spans. Greater index in array means greater weight.\nconst FMT_WEIGHT = ['QQ'];\n\n// RegExps for entity extraction (RF = reference)\nconst ENTITY_TYPES = [\n  // URLs\n  {\n    name: 'LN',\n    dataName: 'url',\n    pack: function(val) {\n      // Check if the protocol is specified, if not use http\n      if (!/^[a-z]+:\\/\\//i.test(val)) {\n        val = 'http://' + val;\n      }\n      return {\n        url: val\n      };\n    },\n    re: /(?:(?:https?|ftp):\\/\\/|www\\.|ftp\\.)[-A-Z0-9+&@#\\/%=~_|$?!:,.]*[A-Z0-9+&@#\\/%=~_|$]/ig\n  },\n  // Mentions @user (must be 2 or more characters)\n  {\n    name: 'MN',\n    dataName: 'val',\n    pack: function(val) {\n      return {\n        val: val.slice(1)\n      };\n    },\n    re: /\\B@([\\p{L}\\p{N}][._\\p{L}\\p{N}]*[\\p{L}\\p{N}])/ug\n  },\n  // Hashtags #hashtag, like metion 2 or more characters.\n  {\n    name: 'HT',\n    dataName: 'val',\n    pack: function(val) {\n      return {\n        val: val.slice(1)\n      };\n    },\n    re: /\\B#([\\p{L}\\p{N}][._\\p{L}\\p{N}]*[\\p{L}\\p{N}])/ug\n  }\n];\n\n// HTML tag name suggestions\nconst FORMAT_TAGS = {\n  AU: {\n    html_tag: 'audio',\n    md_tag: undefined,\n    isVoid: false\n  },\n  BN: {\n    html_tag: 'button',\n    md_tag: undefined,\n    isVoid: false\n  },\n  BR: {\n    html_tag: 'br',\n    md_tag: '\\n',\n    isVoid: true\n  },\n  CO: {\n    html_tag: 'tt',\n    md_tag: '`',\n    isVoid: false\n  },\n  DL: {\n    html_tag: 'del',\n    md_tag: '~',\n    isVoid: false\n  },\n  EM: {\n    html_tag: 'i',\n    md_tag: '_',\n    isVoid: false\n  },\n  EX: {\n    html_tag: '',\n    md_tag: undefined,\n    isVoid: true\n  },\n  FM: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false\n  },\n  HD: {\n    html_tag: '',\n    md_tag: undefined,\n    isVoid: false\n  },\n  HL: {\n    html_tag: 'span',\n    md_tag: undefined,\n    isVoid: false\n  },\n  HT: {\n    html_tag: 'a',\n    md_tag: undefined,\n    isVoid: false\n  },\n  IM: {\n    html_tag: 'img',\n    md_tag: undefined,\n    isVoid: false\n  },\n  LN: {\n    html_tag: 'a',\n    md_tag: undefined,\n    isVoid: false\n  },\n  MN: {\n    html_tag: 'a',\n    md_tag: undefined,\n    isVoid: false\n  },\n  RW: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false,\n  },\n  QQ: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false\n  },\n  ST: {\n    html_tag: 'b',\n    md_tag: '*',\n    isVoid: false\n  },\n  VC: {\n    html_tag: 'div',\n    md_tag: undefined,\n    isVoid: false\n  },\n  VD: {\n    html_tag: 'video',\n    md_tag: undefined,\n    isVoid: false\n  }\n};\n\n// Convert base64-encoded string into Blob.\nfunction base64toObjectUrl(b64, contentType, logger) {\n  if (!b64) {\n    return null;\n  }\n\n  try {\n    const bin = atob(b64);\n    const length = bin.length;\n    const buf = new ArrayBuffer(length);\n    const arr = new Uint8Array(buf);\n    for (let i = 0; i < length; i++) {\n      arr[i] = bin.charCodeAt(i);\n    }\n\n    return URL.createObjectURL(new Blob([buf], {\n      type: contentType\n    }));\n  } catch (err) {\n    if (logger) {\n      logger(\"Drafty: failed to convert object.\", err.message);\n    }\n  }\n\n  return null;\n}\n\nfunction base64toDataUrl(b64, contentType) {\n  if (!b64) {\n    return null;\n  }\n  contentType = contentType || 'image/jpeg';\n  return 'data:' + contentType + ';base64,' + b64;\n}\n\n// Helpers for converting Drafty to HTML.\nconst DECORATORS = {\n  // Visial styles\n  ST: {\n    open: _ => '<b>',\n    close: _ => '</b>'\n  },\n  EM: {\n    open: _ => '<i>',\n    close: _ => '</i>'\n  },\n  DL: {\n    open: _ => '<del>',\n    close: _ => '</del>'\n  },\n  CO: {\n    open: _ => '<tt>',\n    close: _ => '</tt>'\n  },\n  // Line break\n  BR: {\n    open: _ => '<br/>',\n    close: _ => ''\n  },\n  // Hidden element\n  HD: {\n    open: _ => '',\n    close: _ => ''\n  },\n  // Highlighted element.\n  HL: {\n    open: _ => '<span style=\"color:teal\">',\n    close: _ => '</span>'\n  },\n  // Link (URL)\n  LN: {\n    open: (data) => {\n      return '<a href=\"' + data.url + '\">';\n    },\n    close: _ => '</a>',\n    props: (data) => {\n      return data ? {\n        href: data.url,\n        target: '_blank'\n      } : null;\n    },\n  },\n  // Mention\n  MN: {\n    open: (data) => {\n      return '<a href=\"#' + data.val + '\">';\n    },\n    close: _ => '</a>',\n    props: (data) => {\n      return data ? {\n        id: data.val\n      } : null;\n    },\n  },\n  // Hashtag\n  HT: {\n    open: (data) => {\n      return '<a href=\"#' + data.val + '\">';\n    },\n    close: _ => '</a>',\n    props: (data) => {\n      return data ? {\n        id: data.val\n      } : null;\n    },\n  },\n  // Button\n  BN: {\n    open: _ => '<button>',\n    close: _ => '</button>',\n    props: (data) => {\n      return data ? {\n        'data-act': data.act,\n        'data-val': data.val,\n        'data-name': data.name,\n        'data-ref': data.ref\n      } : null;\n    },\n  },\n  // Audio recording\n  AU: {\n    open: (data) => {\n      const url = data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger);\n      return '<audio controls src=\"' + url + '\">';\n    },\n    close: _ => '</audio>',\n    props: (data) => {\n      if (!data) return null;\n      return {\n        // Embedded data or external link.\n        src: data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger),\n        'data-preload': data.ref ? 'metadata' : 'auto',\n        'data-duration': data.duration,\n        'data-name': data.name,\n        'data-size': data.val ? ((data.val.length * 0.75) | 0) : (data.size | 0),\n        'data-mime': data.mime,\n      };\n    }\n  },\n  // Image\n  IM: {\n    open: data => {\n      // Don't use data.ref for preview: it's a security risk.\n      const tmpPreviewUrl = base64toDataUrl(data._tempPreview, data.mime);\n      const previewUrl = base64toObjectUrl(data.val, data.mime, Drafty.logger);\n      const downloadUrl = data.ref || previewUrl;\n      return (data.name ? '<a href=\"' + downloadUrl + '\" download=\"' + data.name + '\">' : '') +\n        '<img src=\"' + (tmpPreviewUrl || previewUrl) + '\"' +\n        (data.width ? ' width=\"' + data.width + '\"' : '') +\n        (data.height ? ' height=\"' + data.height + '\"' : '') + ' border=\"0\" />';\n    },\n    close: data => {\n      return (data.name ? '</a>' : '');\n    },\n    props: data => {\n      if (!data) return null;\n      return {\n        // Temporary preview, or permanent preview, or external link.\n        src: base64toDataUrl(data._tempPreview, data.mime) ||\n          data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger),\n        title: data.name,\n        alt: data.name,\n        'data-width': data.width,\n        'data-height': data.height,\n        'data-name': data.name,\n        'data-size': data.val ? ((data.val.length * 0.75) | 0) : (data.size | 0),\n        'data-mime': data.mime,\n      };\n    },\n  },\n  // Form - structured layout of elements.\n  FM: {\n    open: _ => '<div>',\n    close: _ => '</div>'\n  },\n  // Row: logic grouping of elements\n  RW: {\n    open: _ => '<div>',\n    close: _ => '</div>'\n  },\n  // Quoted block.\n  QQ: {\n    open: _ => '<div>',\n    close: _ => '</div>',\n    props: (data) => {\n      return data ? {} : null;\n    },\n  },\n  // Video call\n  VC: {\n    open: _ => '<div>',\n    close: _ => '</div>',\n    props: data => {\n      if (!data) return {};\n      return {\n        'data-duration': data.duration,\n        'data-state': data.state,\n      };\n    }\n  },\n  // Video.\n  VD: {\n    open: data => {\n      const tmpPreviewUrl = base64toDataUrl(data._tempPreview, data.mime);\n      const previewUrl = data.ref || base64toObjectUrl(data.preview, data.premime || 'image/json', Drafty.logger);\n      return '<img src=\"' + (tmpPreviewUrl || previewUrl) + '\"' +\n        (data.width ? ' width=\"' + data.width + '\"' : '') +\n        (data.height ? ' height=\"' + data.height + '\"' : '') + ' border=\"0\" />';\n    },\n    close: _ => '',\n    props: data => {\n      if (!data) return null;\n      return {\n        // Embedded data or external link.\n        src: data.preref || base64toObjectUrl(data.preview, data.premime || 'image/json', Drafty.logger),\n        'data-src': data.ref || base64toObjectUrl(data.val, data.mime, Drafty.logger),\n        'data-width': data.width,\n        'data-height': data.height,\n        'data-preload': data.ref ? 'metadata' : 'auto',\n        'data-preview': base64toObjectUrl(data.preview, data.premime || 'image/json', Drafty.logger),\n        'data-duration': data.duration | 0,\n        'data-name': data.name,\n        'data-size': data.val ? ((data.val.length * 0.75) | 0) : (data.size | 0),\n        'data-mime': data.mime,\n      };\n    }\n  },\n};\n\n/**\n * The main object which performs all the formatting actions.\n * @class Drafty\n * @constructor\n */\nconst Drafty = function() {\n  this.txt = '';\n  this.fmt = [];\n  this.ent = [];\n}\n\n/**\n * Initialize Drafty document to a plain text string.\n *\n * @param {string} plainText - string to use as Drafty content.\n *\n * @returns new Drafty document or null is plainText is not a string or undefined.\n */\nDrafty.init = function(plainText) {\n  if (typeof plainText == 'undefined') {\n    plainText = '';\n  } else if (typeof plainText != 'string') {\n    return null;\n  }\n\n  return {\n    txt: plainText\n  };\n}\n\n/**\n * Parse plain text into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {string} content - plain-text content to parse.\n * @return {Drafty} parsed document or null if the source is not plain text.\n */\nDrafty.parse = function(content) {\n  // Make sure we are parsing strings only.\n  if (typeof content != 'string') {\n    return null;\n  }\n\n  // Split text into lines. It makes further processing easier.\n  const lines = content.split(/\\r?\\n/);\n\n  // Holds entities referenced from text\n  const entityMap = [];\n  const entityIndex = {};\n\n  // Processing lines one by one, hold intermediate result in blx.\n  const blx = [];\n  lines.forEach((line) => {\n    let spans = [];\n    let entities;\n\n    // Find formatted spans in the string.\n    // Try to match each style.\n    INLINE_STYLES.forEach((tag) => {\n      // Each style could be matched multiple times.\n      spans = spans.concat(spannify(line, tag.start, tag.end, tag.name));\n    });\n\n    let block;\n    if (spans.length == 0) {\n      block = {\n        txt: line\n      };\n    } else {\n      // Sort spans by style occurence early -> late, then by length: first long then short.\n      spans.sort((a, b) => {\n        const diff = a.at - b.at;\n        return diff != 0 ? diff : b.end - a.end;\n      });\n\n      // Convert an array of possibly overlapping spans into a tree.\n      spans = toSpanTree(spans);\n\n      // Build a tree representation of the entire string, not\n      // just the formatted parts.\n      const chunks = chunkify(line, 0, line.length, spans);\n\n      const drafty = draftify(chunks, 0);\n\n      block = {\n        txt: drafty.txt,\n        fmt: drafty.fmt\n      };\n    }\n\n    // Extract entities from the cleaned up string.\n    entities = extractEntities(block.txt);\n    if (entities.length > 0) {\n      const ranges = [];\n      for (let i in entities) {\n        // {offset: match['index'], unique: match[0], len: match[0].length, data: ent.packer(), type: ent.name}\n        const entity = entities[i];\n        let index = entityIndex[entity.unique];\n        if (!index) {\n          index = entityMap.length;\n          entityIndex[entity.unique] = index;\n          entityMap.push({\n            tp: entity.type,\n            data: entity.data\n          });\n        }\n        ranges.push({\n          at: entity.offset,\n          len: entity.len,\n          key: index\n        });\n      }\n      block.ent = ranges;\n    }\n\n    blx.push(block);\n  });\n\n  const result = {\n    txt: ''\n  };\n\n  // Merge lines and save line breaks as BR inline formatting.\n  if (blx.length > 0) {\n    result.txt = blx[0].txt;\n    result.fmt = (blx[0].fmt || []).concat(blx[0].ent || []);\n\n    for (let i = 1; i < blx.length; i++) {\n      const block = blx[i];\n      const offset = result.txt.length + 1;\n\n      result.fmt.push({\n        tp: 'BR',\n        len: 1,\n        at: offset - 1\n      });\n\n      result.txt += ' ' + block.txt;\n      if (block.fmt) {\n        result.fmt = result.fmt.concat(block.fmt.map((s) => {\n          s.at += offset;\n          return s;\n        }));\n      }\n      if (block.ent) {\n        result.fmt = result.fmt.concat(block.ent.map((s) => {\n          s.at += offset;\n          return s;\n        }));\n      }\n    }\n\n    if (result.fmt.length == 0) {\n      delete result.fmt;\n    }\n\n    if (entityMap.length > 0) {\n      result.ent = entityMap;\n    }\n  }\n  return result;\n}\n\n/**\n * Append one Drafty document to another.\n *\n * @param {Drafty} first - Drafty document to append to.\n * @param {Drafty|string} second - Drafty document or string being appended.\n *\n * @return {Drafty} first document with the second appended to it.\n */\nDrafty.append = function(first, second) {\n  if (!first) {\n    return second;\n  }\n  if (!second) {\n    return first;\n  }\n\n  first.txt = first.txt || '';\n  const len = first.txt.length;\n\n  if (typeof second == 'string') {\n    first.txt += second;\n  } else if (second.txt) {\n    first.txt += second.txt;\n  }\n\n  if (Array.isArray(second.fmt)) {\n    first.fmt = first.fmt || [];\n    if (Array.isArray(second.ent)) {\n      first.ent = first.ent || [];\n    }\n    second.fmt.forEach(src => {\n      const fmt = {\n        at: (src.at | 0) + len,\n        len: src.len | 0\n      };\n      // Special case for the outside of the normal rendering flow styles.\n      if (src.at == -1) {\n        fmt.at = -1;\n        fmt.len = 0;\n      }\n      if (src.tp) {\n        fmt.tp = src.tp;\n      } else {\n        fmt.key = first.ent.length;\n        first.ent.push(second.ent[src.key || 0]);\n      }\n      first.fmt.push(fmt);\n    });\n  }\n\n  return first;\n}\n\n/**\n * @typedef Drafty.ImageDesc\n * @memberof Drafty\n * @type Object\n * @param {string} mime - mime-type of the image, e.g. \"image/png\".\n * @param {string} refurl - reference to the content. Could be null/undefined.\n * @param {string} bits - base64-encoded image content. Could be null/undefined.\n * @param {string} preview - base64-encoded thumbnail of the image.\n * @param {integer} width - width of the image.\n * @param {integer} height - height of the image.\n * @param {string} filename - file name suggestion for downloading the image.\n * @param {integer} size - size of the image in bytes. Treat is as an untrusted hint.\n * @param {string} _tempPreview - base64-encoded image preview used during upload process; not serializable.\n * @param {Promise} urlPromise - Promise which returns content URL when resolved.\n */\n\n/**\n * Insert inline image into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add image to.\n * @param {integer} at - index where the object is inserted. The length of the image is always 1.\n * @param {ImageDesc} imageDesc - object with image paramenets and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertImage = function(content, at, imageDesc) {\n  content = content || {\n    txt: ' '\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: 1,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'IM',\n    data: {\n      mime: imageDesc.mime,\n      ref: imageDesc.refurl,\n      val: imageDesc.bits || imageDesc.preview,\n      width: imageDesc.width,\n      height: imageDesc.height,\n      name: imageDesc.filename,\n      size: imageDesc.size | 0,\n    }\n  };\n\n  if (imageDesc.urlPromise) {\n    ex.data._tempPreview = imageDesc._tempPreview;\n    ex.data._processing = true;\n    imageDesc.urlPromise.then(\n      url => {\n        ex.data.ref = url;\n        ex.data._tempPreview = undefined;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        // Catch the error, otherwise it will appear in the console.\n        ex.data._processing = undefined;\n      }\n    );\n  }\n\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * @typedef Drafty.VideoDesc\n * @memberof Drafty\n * @type Object\n * @param {string} mime - mime-type of the video, e.g. \"video/mpeg\".\n * @param {string} refurl - reference to the content. Could be null/undefined.\n * @param {string} bits - in-band base64-encoded image data. Could be null/undefined.\n * @param {string} preview - base64-encoded screencapture from the video. Could be null/undefined.\n * @param {string} preref - reference to screencapture from the video. Could be null/undefined.\n * @param {integer} width - width of the video.\n * @param {integer} height - height of the video.\n * @param {integer} duration - duration of the video.\n * @param {string} filename - file name suggestion for downloading the video.\n * @param {integer} size - size of the video in bytes. Treat is as an untrusted hint.\n * @param {string} _tempPreview - base64-encoded screencapture used during upload process; not serializable.\n * @param {Promise} urlPromise - array of two promises, which return URLs of video and preview uploads correspondingly\n *        (either could be null).\n */\n\n/**\n * Insert inline image into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add video to.\n * @param {integer} at - index where the object is inserted. The length of the video is always 1.\n * @param {VideoDesc} videoDesc - object with video paramenets and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertVideo = function(content, at, videoDesc) {\n  content = content || {\n    txt: ' '\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: 1,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'VD',\n    data: {\n      mime: videoDesc.mime,\n      ref: videoDesc.refurl,\n      val: videoDesc.bits,\n      preref: videoDesc.preref,\n      preview: videoDesc.preview,\n      width: videoDesc.width,\n      height: videoDesc.height,\n      duration: videoDesc.duration | 0,\n      name: videoDesc.filename,\n      size: videoDesc.size | 0,\n    }\n  };\n\n  if (videoDesc.urlPromise) {\n    ex.data._tempPreview = videoDesc._tempPreview;\n    ex.data._processing = true;\n    videoDesc.urlPromise.then(\n      urls => {\n        ex.data.ref = urls[0];\n        ex.data.preref = urls[1];\n        ex.data._tempPreview = undefined;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        // Catch the error, otherwise it will appear in the console.\n        ex.data._processing = undefined;\n      }\n    );\n  }\n\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * @typedef Drafty.AudioDesc\n * @memberof Drafty\n * @type Object\n * @param {string} mime - mime-type of the audio, e.g. \"audio/ogg\".\n * @param {string} refurl - reference to the content. Could be null/undefined.\n * @param {string} bits - base64-encoded audio content. Could be null/undefined.\n * @param {integer} duration - duration of the record in milliseconds.\n * @param {string} preview - base64 encoded short array of amplitude values 0..100.\n * @param {string} filename - file name suggestion for downloading the audio.\n * @param {integer} size - size of the recording in bytes. Treat is as an untrusted hint.\n * @param {Promise} urlPromise - Promise which returns content URL when resolved.\n */\n\n/**\n * Insert audio recording into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add audio record to.\n * @param {integer} at - index where the object is inserted. The length of the record is always 1.\n * @param {AudioDesc} audioDesc - object with the audio paramenets and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertAudio = function(content, at, audioDesc) {\n  content = content || {\n    txt: ' '\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: 1,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'AU',\n    data: {\n      mime: audioDesc.mime,\n      val: audioDesc.bits,\n      duration: audioDesc.duration | 0,\n      preview: audioDesc.preview,\n      name: audioDesc.filename,\n      size: audioDesc.size | 0,\n      ref: audioDesc.refurl\n    }\n  };\n\n  if (audioDesc.urlPromise) {\n    ex.data._processing = true;\n    audioDesc.urlPromise.then(\n      url => {\n        ex.data.ref = url;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        // Catch the error, otherwise it will appear in the console.\n        ex.data._processing = undefined;\n      }\n    );\n  }\n\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Create a (self-contained) video call Drafty document.\n * @memberof Drafty\n * @static\n * @param {boolean} audioOnly <code>true</code> if the call is initially audio-only.\n * @returns Video Call drafty document.\n */\nDrafty.videoCall = function(audioOnly) {\n  const content = {\n    txt: ' ',\n    fmt: [{\n      at: 0,\n      len: 1,\n      key: 0\n    }],\n    ent: [{\n      tp: 'VC',\n      data: {\n        aonly: audioOnly\n      },\n    }]\n  };\n  return content;\n}\n\n/**\n * Update video call (VC) entity with the new status and duration.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - VC document to update.\n * @param {object} params - new video call parameters.\n * @param {string} params.state - state of video call.\n * @param {number} params.duration - duration of the video call in milliseconds.\n *\n * @returns the same document with update applied.\n */\nDrafty.updateVideoCall = function(content, params) {\n  // The video element could be just a format or a format + entity.\n  // Must ensure it's the latter first.\n  const fmt = ((content || {}).fmt || [])[0];\n  if (!fmt) {\n    // Unrecognized content.\n    return content;\n  }\n\n  let ent;\n  if (fmt.tp == 'VC') {\n    // Just a format, convert to format + entity.\n    delete fmt.tp;\n    fmt.key = 0;\n    ent = {\n      tp: 'VC'\n    };\n    content.ent = [ent];\n  } else {\n    ent = (content.ent || [])[fmt.key | 0];\n    if (!ent || ent.tp != 'VC') {\n      // Not a VC entity.\n      return content;\n    }\n  }\n  ent.data = ent.data || {};\n  Object.assign(ent.data, params);\n  return content;\n}\n\n/**\n * Create a quote to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {string} header - Quote header (title, etc.).\n * @param {string} uid - UID of the author to mention.\n * @param {Drafty} body - Body of the quoted message.\n *\n * @returns Reply quote Drafty doc with the quote formatting.\n */\nDrafty.quote = function(header, uid, body) {\n  const quote = Drafty.append(Drafty.appendLineBreak(Drafty.mention(header, uid)), body);\n\n  // Wrap into a quote.\n  quote.fmt.push({\n    at: 0,\n    len: quote.txt.length,\n    tp: 'QQ'\n  });\n\n  return quote;\n}\n\n/**\n * Create a Drafty document with a mention.\n *\n * @param {string} name - mentioned name.\n * @param {string} uid - mentioned user ID.\n *\n * @returns {Drafty} document with the mention.\n */\nDrafty.mention = function(name, uid) {\n  return {\n    txt: name || '',\n    fmt: [{\n      at: 0,\n      len: (name || '').length,\n      key: 0\n    }],\n    ent: [{\n      tp: 'MN',\n      data: {\n        val: uid\n      }\n    }]\n  };\n}\n\n/**\n * Append a link to a Drafty document.\n *\n * @param {Drafty} content - Drafty document to append link to.\n * @param {Object} linkData - Link info in format <code>{txt: 'ankor text', url: 'http://...'}</code>.\n *\n * @returns {Drafty} the same document as <code>content</code>.\n */\nDrafty.appendLink = function(content, linkData) {\n  content = content || {\n    txt: ''\n  };\n\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: content.txt.length,\n    len: linkData.txt.length,\n    key: content.ent.length\n  });\n  content.txt += linkData.txt;\n\n  const ex = {\n    tp: 'LN',\n    data: {\n      url: linkData.url\n    }\n  }\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Append image to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add image to.\n * @param {ImageDesc} imageDesc - object with image paramenets.\n *\n * @return {Drafty} updated document.\n */\nDrafty.appendImage = function(content, imageDesc) {\n  content = content || {\n    txt: ''\n  };\n  content.txt += ' ';\n  return Drafty.insertImage(content, content.txt.length - 1, imageDesc);\n}\n\n/**\n * Append audio recodring to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to add recording to.\n * @param {AudioDesc} audioDesc - object with audio data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.appendAudio = function(content, audioDesc) {\n  content = content || {\n    txt: ''\n  };\n  content.txt += ' ';\n  return Drafty.insertAudio(content, content.txt.length - 1, audioDesc);\n}\n\n/**\n * @typedef Drafty.AttachmentDesc\n * @memberof Drafty\n * @type Object\n * @param {string} mime - mime-type of the attachment, e.g. \"application/octet-stream\"\n * @param {string} data - base64-encoded in-band content of small attachments. Could be null/undefined.\n * @param {string} filename - file name suggestion for downloading the attachment.\n * @param {integer} size - size of the file in bytes. Treat is as an untrusted hint.\n * @param {string} refurl - reference to the out-of-band content. Could be null/undefined.\n * @param {Promise} urlPromise - Promise which returns content URL when resolved.\n */\n\n/**\n * Attach file to Drafty content. Either as a blob or as a reference.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to attach file to.\n * @param {AttachmentDesc} object - containing attachment description and data.\n *\n * @return {Drafty} updated document.\n */\nDrafty.attachFile = function(content, attachmentDesc) {\n  content = content || {\n    txt: ''\n  };\n\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: -1,\n    len: 0,\n    key: content.ent.length\n  });\n\n  const ex = {\n    tp: 'EX',\n    data: {\n      mime: attachmentDesc.mime,\n      val: attachmentDesc.data,\n      name: attachmentDesc.filename,\n      ref: attachmentDesc.refurl,\n      size: attachmentDesc.size | 0\n    }\n  }\n  if (attachmentDesc.urlPromise) {\n    ex.data._processing = true;\n    attachmentDesc.urlPromise.then(\n      url => {\n        ex.data.ref = url;\n        ex.data._processing = undefined;\n      },\n      _ => {\n        /* catch the error, otherwise it will appear in the console. */\n        ex.data._processing = undefined;\n      }\n    );\n  }\n  content.ent.push(ex);\n\n  return content;\n}\n\n/**\n * Wraps drafty document into a simple formatting style.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - document or string to wrap into a style.\n * @param {string} style - two-letter style to wrap into.\n * @param {number} at - index where the style starts, default 0.\n * @param {number} len - length of the form content, default all of it.\n *\n * @return {Drafty} updated document.\n */\nDrafty.wrapInto = function(content, style, at, len) {\n  if (typeof content == 'string') {\n    content = {\n      txt: content\n    };\n  }\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at || 0,\n    len: len || content.txt.length,\n    tp: style,\n  });\n\n  return content;\n}\n\n/**\n * Wraps content into an interactive form.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - to wrap into a form.\n * @param {number} at - index where the forms starts.\n * @param {number} len - length of the form content.\n *\n * @return {Drafty} updated document.\n */\nDrafty.wrapAsForm = function(content, at, len) {\n  return Drafty.wrapInto(content, 'FM', at, len);\n}\n\n/**\n * Insert clickable button into Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - Drafty document to insert button to or a string to be used as button text.\n * @param {number} at - location where the button is inserted.\n * @param {number} len - the length of the text to be used as button title.\n * @param {string} name - the button. Client should return it to the server when the button is clicked.\n * @param {string} actionType - the type of the button, one of 'url' or 'pub'.\n * @param {string} actionValue - the value to return on click:\n * @param {string} refUrl - the URL to go to when the 'url' button is clicked.\n *\n * @return {Drafty} updated document.\n */\nDrafty.insertButton = function(content, at, len, name, actionType, actionValue, refUrl) {\n  if (typeof content == 'string') {\n    content = {\n      txt: content\n    };\n  }\n\n  if (!content || !content.txt || content.txt.length < at + len) {\n    return null;\n  }\n\n  if (len <= 0 || ['url', 'pub'].indexOf(actionType) == -1) {\n    return null;\n  }\n  // Ensure refUrl is a string.\n  if (actionType == 'url' && !refUrl) {\n    return null;\n  }\n  refUrl = '' + refUrl;\n\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: at | 0,\n    len: len,\n    key: content.ent.length\n  });\n  content.ent.push({\n    tp: 'BN',\n    data: {\n      act: actionType,\n      val: actionValue,\n      ref: refUrl,\n      name: name\n    }\n  });\n\n  return content;\n}\n\n/**\n * Append clickable button to Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} content - Drafty document to insert button to or a string to be used as button text.\n * @param {string} title - the text to be used as button title.\n * @param {string} name - the button. Client should return it to the server when the button is clicked.\n * @param {string} actionType - the type of the button, one of 'url' or 'pub'.\n * @param {string} actionValue - the value to return on click:\n * @param {string} refUrl - the URL to go to when the 'url' button is clicked.\n *\n * @return {Drafty} updated document.\n */\nDrafty.appendButton = function(content, title, name, actionType, actionValue, refUrl) {\n  content = content || {\n    txt: ''\n  };\n  const at = content.txt.length;\n  content.txt += title;\n  return Drafty.insertButton(content, at, title.length, name, actionType, actionValue, refUrl);\n}\n\n/**\n * Attach a generic JS object. The object is attached as a json string.\n * Intended for representing a form response.\n *\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - Drafty document to attach file to.\n * @param {Object} data - data to convert to json string and attach.\n * @returns {Drafty} the same document as <code>content</code>.\n */\nDrafty.attachJSON = function(content, data) {\n  content = content || {\n    txt: ''\n  };\n  content.ent = content.ent || [];\n  content.fmt = content.fmt || [];\n\n  content.fmt.push({\n    at: -1,\n    len: 0,\n    key: content.ent.length\n  });\n\n  content.ent.push({\n    tp: 'EX',\n    data: {\n      mime: JSON_MIME_TYPE,\n      val: data\n    }\n  });\n\n  return content;\n}\n/**\n * Append line break to a Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - Drafty document to append linebreak to.\n * @returns {Drafty} the same document as <code>content</code>.\n */\nDrafty.appendLineBreak = function(content) {\n  content = content || {\n    txt: ''\n  };\n  content.fmt = content.fmt || [];\n  content.fmt.push({\n    at: content.txt.length,\n    len: 1,\n    tp: 'BR'\n  });\n  content.txt += ' ';\n\n  return content;\n}\n/**\n * Given Drafty document, convert it to HTML.\n * No attempt is made to strip pre-existing html markup.\n * This is potentially unsafe because <code>content.txt</code> may contain malicious HTML\n * markup.\n * @memberof Tinode.Drafty\n * @static\n *\n * @param {Drafty} doc - document to convert.\n *\n * @returns {string} HTML-representation of content.\n */\nDrafty.UNSAFE_toHTML = function(doc) {\n  const tree = draftyToTree(doc);\n  const htmlFormatter = function(type, data, values) {\n    const tag = DECORATORS[type];\n    let result = values ? values.join('') : '';\n    if (tag) {\n      result = tag.open(data) + result + tag.close(data);\n    }\n    return result;\n  };\n  return treeBottomUp(tree, htmlFormatter, 0);\n}\n\n/**\n * Callback for applying custom formatting to a Drafty document.\n * Called once for each style span.\n * @memberof Drafty\n * @static\n *\n * @callback Formatter\n * @param {string} style - style code such as \"ST\" or \"IM\".\n * @param {Object} data - entity's data.\n * @param {Object} values - possibly styled subspans contained in this style span.\n * @param {number} index - index of the element guaranteed to be unique.\n */\n\n/**\n * Convert Drafty document to a representation suitable for display.\n * The <code>context</code> may expose a function <code>getFormatter(style)</code>. If it's available\n * it will call it to obtain a <code>formatter</code> for a subtree of styles under the <code>style</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|Object} content - Drafty document to transform.\n * @param {Formatter} formatter - callback which formats individual elements.\n * @param {Object} context - context provided to formatter as <code>this</code>.\n *\n * @return {Object} transformed object\n */\nDrafty.format = function(original, formatter, context) {\n  return treeBottomUp(draftyToTree(original), formatter, 0, [], context);\n}\n\n/**\n * Shorten Drafty document making the drafty text no longer than the limit.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @param {number} limit - length in characrets to shorten to.\n * @param {boolean} light - remove heavy data from entities.\n * @returns new shortened Drafty object leaving the original intact.\n */\nDrafty.shorten = function(original, limit, light) {\n  let tree = draftyToTree(original);\n  tree = shortenTree(tree, limit, '…');\n  if (tree && light) {\n    tree = lightEntity(tree);\n  }\n  return treeToDrafty({}, tree, []);\n}\n\n/**\n * Transform Drafty doc for forwarding: strip leading @mention and any leading line breaks or whitespace.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @returns converted Drafty object leaving the original intact.\n */\nDrafty.forwardedContent = function(original) {\n  let tree = draftyToTree(original);\n  const rmMention = function(node) {\n    if (node.type == 'MN') {\n      if (!node.parent || !node.parent.type) {\n        return null;\n      }\n    }\n    return node;\n  }\n  // Strip leading mention.\n  tree = treeTopDown(tree, rmMention);\n  // Remove leading whitespace.\n  tree = lTrim(tree);\n  // Convert back to Drafty.\n  return treeToDrafty({}, tree, []);\n}\n\n/**\n * Prepare Drafty doc for wrapping into QQ as a reply:\n *  - Replace forwarding mention with symbol '➦' and remove data (UID).\n *  - Remove quoted text completely.\n *  - Replace line breaks with spaces.\n *  - Strip entities of heavy content.\n *  - Move attachments to the end of the document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @param {number} limit - length in characters to shorten to.\n * @returns converted Drafty object leaving the original intact.\n */\nDrafty.replyContent = function(original, limit) {\n  const convMNnQQnBR = function(node) {\n    if (node.type == 'QQ') {\n      return null;\n    } else if (node.type == 'MN') {\n      if ((!node.parent || !node.parent.type) && (node.text || '').startsWith('➦')) {\n        node.text = '➦';\n        delete node.children;\n        delete node.data;\n      }\n    } else if (node.type == 'BR') {\n      node.text = ' ';\n      delete node.type;\n      delete node.children;\n    }\n    return node;\n  }\n\n  let tree = draftyToTree(original);\n  if (!tree) {\n    return original;\n  }\n\n  // Strip leading mention.\n  tree = treeTopDown(tree, convMNnQQnBR);\n  // Move attachments to the end of the doc.\n  tree = attachmentsToEnd(tree, MAX_PREVIEW_ATTACHMENTS);\n  // Shorten the doc.\n  tree = shortenTree(tree, limit, '…');\n  // Strip heavy elements except IM.data['val'] and VD.data['preview'] (have to keep them to generate previews later).\n  const filter = node => {\n    switch (node.type) {\n      case 'IM':\n        return ['val'];\n      case 'VD':\n        return ['preview'];\n    }\n    return null;\n  };\n  tree = lightEntity(tree, filter);\n  // Convert back to Drafty.\n  return treeToDrafty({}, tree, []);\n}\n\n\n/**\n * Generate drafty preview:\n *  - Shorten the document.\n *  - Strip all heavy entity data leaving just inline styles and entity references.\n *  - Replace line breaks with spaces.\n *  - Replace content of QQ with a space.\n *  - Replace forwarding mention with symbol '➦'.\n * move all attachments to the end of the document and make them visible.\n * The <code>context</code> may expose a function <code>getFormatter(style)</code>. If it's available\n * it will call it to obtain a <code>formatter</code> for a subtree of styles under the <code>style</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty|string} original - Drafty object to shorten.\n * @param {number} limit - length in characters to shorten to.\n * @param {boolean} forwarding - this a forwarding message preview.\n * @returns new shortened Drafty object leaving the original intact.\n */\nDrafty.preview = function(original, limit, forwarding) {\n  let tree = draftyToTree(original);\n\n  // Move attachments to the end.\n  tree = attachmentsToEnd(tree, MAX_PREVIEW_ATTACHMENTS);\n\n  // Convert leading mention to '➦' and replace QQ and BR with a space ' '.\n  const convMNnQQnBR = function(node) {\n    if (node.type == 'MN') {\n      if ((!node.parent || !node.parent.type) && (node.text || '').startsWith('➦')) {\n        node.text = '➦';\n        delete node.children;\n      }\n    } else if (node.type == 'QQ') {\n      node.text = ' ';\n      delete node.children;\n    } else if (node.type == 'BR') {\n      node.text = ' ';\n      delete node.children;\n      delete node.type;\n    }\n    return node;\n  }\n  tree = treeTopDown(tree, convMNnQQnBR);\n\n  tree = shortenTree(tree, limit, '…');\n  if (forwarding) {\n    // Keep some IM and VD data for preview.\n    const filter = {\n      IM: ['val'],\n      VD: ['preview']\n    };\n    tree = lightEntity(tree, node => {\n      return filter[node.type];\n    });\n  } else {\n    tree = lightEntity(tree);\n  }\n\n  // Convert back to Drafty.\n  return treeToDrafty({}, tree, []);\n}\n\n/**\n * Given Drafty document, convert it to plain text.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to convert to plain text.\n * @returns {string} plain-text representation of the drafty document.\n */\nDrafty.toPlainText = function(content) {\n  return typeof content == 'string' ? content : content.txt;\n}\n\n/**\n * Check if the document has no markup and no entities.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - content to check for presence of markup.\n * @returns <code>true</code> is content is plain text, <code>false</code> otherwise.\n */\nDrafty.isPlainText = function(content) {\n  return typeof content == 'string' || !(content.fmt || content.ent);\n}\n\n/**\n * Convert document to plain text with markdown. All elements which cannot\n * be represented in markdown are stripped.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to convert to plain text with markdown.\n */\nDrafty.toMarkdown = function(content) {\n  let tree = draftyToTree(content);\n  const mdFormatter = function(type, _, values) {\n    const def = FORMAT_TAGS[type];\n    let result = (values ? values.join('') : '');\n    if (def) {\n      if (def.isVoid) {\n        result = def.md_tag || '';\n      } else if (def.md_tag) {\n        result = def.md_tag + result + def.md_tag;\n      }\n    }\n    return result;\n  };\n  return treeBottomUp(tree, mdFormatter, 0);\n}\n\n/**\n * Checks if the object represets is a valid Drafty document.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - content to check for validity.\n * @returns <code>true</code> is content is valid, <code>false</code> otherwise.\n */\nDrafty.isValid = function(content) {\n  if (!content) {\n    return false;\n  }\n\n  const {\n    txt,\n    fmt,\n    ent\n  } = content;\n\n  if (!txt && txt !== '' && !fmt && !ent) {\n    return false;\n  }\n\n  const txt_type = typeof txt;\n  if (txt_type != 'string' && txt_type != 'undefined' && txt !== null) {\n    return false;\n  }\n\n  if (typeof fmt != 'undefined' && !Array.isArray(fmt) && fmt !== null) {\n    return false;\n  }\n\n  if (typeof ent != 'undefined' && !Array.isArray(ent) && ent !== null) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Check if the drafty document has attachments: style EX and outside of normal rendering flow,\n * i.e. <code>at = -1</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to check for attachments.\n * @returns <code>true</code> if there are attachments.\n */\nDrafty.hasAttachments = function(content) {\n  if (!Array.isArray(content.fmt)) {\n    return false;\n  }\n  for (let i in content.fmt) {\n    const fmt = content.fmt[i];\n    if (fmt && fmt.at < 0) {\n      const ent = content.ent[fmt.key | 0];\n      return ent && ent.tp == 'EX' && ent.data;\n    }\n  }\n  return false;\n}\n\n/**\n * Callback for enumerating entities in a Drafty document.\n * Called once for each entity.\n * @memberof Drafty\n * @static\n *\n * @callback EntityCallback\n * @param {Object} data entity data.\n * @param {string} entity type.\n * @param {number} index entity's index in `content.ent`.\n *\n * @return 'true-ish' to stop processing, 'false-ish' otherwise.\n */\n\n/**\n * Enumerate attachments: style EX and outside of normal rendering flow, i.e. <code>at = -1</code>.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to process for attachments.\n * @param {EntityCallback} callback - callback to call for each attachment.\n * @param {Object} context - value of \"this\" for callback.\n */\nDrafty.attachments = function(content, callback, context) {\n  if (!Array.isArray(content.fmt)) {\n    return;\n  }\n  let count = 0;\n  for (let i in content.ent) {\n    let fmt = content.fmt[i];\n    if (fmt && fmt.at < 0) {\n      const ent = content.ent[fmt.key | 0];\n      if (ent && ent.tp == 'EX' && ent.data) {\n        if (callback.call(context, ent.data, count++, 'EX')) {\n          break;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Check if the drafty document has entities.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document to check for entities.\n * @returns <code>true</code> if there are entities.\n */\nDrafty.hasEntities = function(content) {\n  return content.ent && content.ent.length > 0;\n}\n\n/**\n * Enumerate entities. Enumeration stops if callback returns 'true'.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document with entities to enumerate.\n * @param {EntityCallback} callback - callback to call for each entity.\n * @param {Object} context - value of \"this\" for callback.\n *\n */\nDrafty.entities = function(content, callback, context) {\n  if (content.ent && content.ent.length > 0) {\n    for (let i in content.ent) {\n      if (content.ent[i]) {\n        if (callback.call(context, content.ent[i].data, i, content.ent[i].tp)) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback for enumerating styles (inline formats) in a Drafty document.\n * Called once for each style.\n * @memberof Drafty\n * @static\n *\n * @callback StyleCallback\n * @param {string} tp - format type.\n * @param {number} at - starting position of the format in text.\n * @param {number} len - extent of the format in characters.\n * @param {number} key - index of the entity if format is a reference.\n * @param {number} index - style's index in `content.fmt`.\n *\n * @return 'true-ish' to stop processing, 'false-ish' otherwise.\n */\n\n/**\n * Enumerate styles (inline formats). Enumeration stops if callback returns 'true'.\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document with styles (formats) to enumerate.\n * @param {StyleCallback} callback - callback to call for each format.\n * @param {Object} context - value of \"this\" for callback.\n */\nDrafty.styles = function(content, callback, context) {\n  if (content.fmt && content.fmt.length > 0) {\n    for (let i in content.fmt) {\n      const fmt = content.fmt[i];\n      if (fmt) {\n        if (callback.call(context, fmt.tp, fmt.at, fmt.len, fmt.key, i)) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Remove unrecognized fields from entity data\n * @memberof Drafty\n * @static\n *\n * @param {Drafty} content - document with entities to enumerate.\n * @returns content.\n */\nDrafty.sanitizeEntities = function(content) {\n  if (content && content.ent && content.ent.length > 0) {\n    for (let i in content.ent) {\n      const ent = content.ent[i];\n      if (ent && ent.data) {\n        const data = copyEntData(ent.data);\n        if (data) {\n          content.ent[i].data = data;\n        } else {\n          delete content.ent[i].data;\n        }\n      }\n    }\n  }\n  return content;\n}\n\n/**\n * Given the entity, get URL which can be used for downloading\n * entity data.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entData - entity.data to get the URl from.\n * @returns {string} URL to download entity data or <code>null</code>.\n */\nDrafty.getDownloadUrl = function(entData) {\n  let url = null;\n  if (entData.mime != JSON_MIME_TYPE && entData.val) {\n    url = base64toObjectUrl(entData.val, entData.mime, Drafty.logger);\n  } else if (typeof entData.ref == 'string') {\n    url = entData.ref;\n  }\n  return url;\n}\n\n/**\n * Check if the entity data is not ready for sending, such as being uploaded to the server.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entity.data to get the URl from.\n * @returns {boolean} true if upload is in progress, false otherwise.\n */\nDrafty.isProcessing = function(entData) {\n  return !!entData._processing;\n}\n\n/**\n * Given the entity, get URL which can be used for previewing\n * the entity.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entity.data to get the URl from.\n *\n * @returns {string} url for previewing or null if no such url is available.\n */\nDrafty.getPreviewUrl = function(entData) {\n  return entData.val ? base64toObjectUrl(entData.val, entData.mime, Drafty.logger) : null;\n}\n\n/**\n * Get approximate size of the entity.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entData - entity.data to get the size for.\n * @returns {number} size of entity data in bytes.\n */\nDrafty.getEntitySize = function(entData) {\n  // Either size hint or length of value. The value is base64 encoded,\n  // the actual object size is smaller than the encoded length.\n  return entData.size ? entData.size : entData.val ? (entData.val.length * 0.75) | 0 : 0;\n}\n\n/**\n * Get entity mime type.\n * @memberof Drafty\n * @static\n *\n * @param {Object} entData - entity.data to get the type for.\n * @returns {string} mime type of entity.\n */\nDrafty.getEntityMimeType = function(entData) {\n  return entData.mime || 'text/plain';\n}\n\n/**\n * Get HTML tag for a given two-letter style name.\n * @memberof Drafty\n * @static\n *\n * @param {string} style - two-letter style, like ST or LN.\n *\n * @returns {string} HTML tag name if style is found, {code: undefined} if style is falsish or not found.\n */\nDrafty.tagName = function(style) {\n  return FORMAT_TAGS[style] && FORMAT_TAGS[style].html_tag;\n}\n\n/**\n * For a given data bundle generate an object with HTML attributes,\n * for instance, given {url: \"http://www.example.com/\"} return\n * {href: \"http://www.example.com/\"}\n * @memberof Drafty\n * @static\n *\n * @param {string} style - two-letter style to generate attributes for.\n * @param {Object} data - data bundle to convert to attributes\n *\n * @returns {Object} object with HTML attributes.\n */\nDrafty.attrValue = function(style, data) {\n  if (data && DECORATORS[style]) {\n    return DECORATORS[style].props(data);\n  }\n\n  return undefined;\n}\n\n/**\n * Drafty MIME type.\n * @memberof Drafty\n * @static\n *\n * @returns {string} content-Type \"text/x-drafty\".\n */\nDrafty.getContentType = function() {\n  return DRAFTY_MIME_TYPE;\n}\n\n// =================\n// Utility methods.\n// =================\n\n// Take a string and defined earlier style spans, re-compose them into a tree where each leaf is\n// a same-style (including unstyled) string. I.e. 'hello *bold _italic_* and ~more~ world' ->\n// ('hello ', (b: 'bold ', (i: 'italic')), ' and ', (s: 'more'), ' world');\n//\n// This is needed in order to clear markup, i.e. 'hello *world*' -> 'hello world' and convert\n// ranges from markup-ed offsets to plain text offsets.\nfunction chunkify(line, start, end, spans) {\n  const chunks = [];\n\n  if (spans.length == 0) {\n    return [];\n  }\n\n  for (let i in spans) {\n    // Get the next chunk from the queue\n    const span = spans[i];\n\n    // Grab the initial unstyled chunk\n    if (span.at > start) {\n      chunks.push({\n        txt: line.slice(start, span.at)\n      });\n    }\n\n    // Grab the styled chunk. It may include subchunks.\n    const chunk = {\n      tp: span.tp\n    };\n    const chld = chunkify(line, span.at + 1, span.end, span.children);\n    if (chld.length > 0) {\n      chunk.children = chld;\n    } else {\n      chunk.txt = span.txt;\n    }\n    chunks.push(chunk);\n    start = span.end + 1; // '+1' is to skip the formatting character\n  }\n\n  // Grab the remaining unstyled chunk, after the last span\n  if (start < end) {\n    chunks.push({\n      txt: line.slice(start, end)\n    });\n  }\n\n  return chunks;\n}\n\n// Detect starts and ends of formatting spans. Unformatted spans are\n// ignored at this stage.\nfunction spannify(original, re_start, re_end, type) {\n  const result = [];\n  let index = 0;\n  let line = original.slice(0); // make a copy;\n\n  while (line.length > 0) {\n    // match[0]; // match, like '*abc*'\n    // match[1]; // match captured in parenthesis, like 'abc'\n    // match['index']; // offset where the match started.\n\n    // Find the opening token.\n    const start = re_start.exec(line);\n    if (start == null) {\n      break;\n    }\n\n    // Because javascript RegExp does not support lookbehind, the actual offset may not point\n    // at the markup character. Find it in the matched string.\n    let start_offset = start['index'] + start[0].lastIndexOf(start[1]);\n    // Clip the processed part of the string.\n    line = line.slice(start_offset + 1);\n    // start_offset is an offset within the clipped string. Convert to original index.\n    start_offset += index;\n    // Index now point to the beginning of 'line' within the 'original' string.\n    index = start_offset + 1;\n\n    // Find the matching closing token.\n    const end = re_end ? re_end.exec(line) : null;\n    if (end == null) {\n      break;\n    }\n    let end_offset = end['index'] + end[0].indexOf(end[1]);\n    // Clip the processed part of the string.\n    line = line.slice(end_offset + 1);\n    // Update offsets\n    end_offset += index;\n    // Index now points to the beginning of 'line' within the 'original' string.\n    index = end_offset + 1;\n\n    result.push({\n      txt: original.slice(start_offset + 1, end_offset),\n      children: [],\n      at: start_offset,\n      end: end_offset,\n      tp: type\n    });\n  }\n\n  return result;\n}\n\n// Convert linear array or spans into a tree representation.\n// Keep standalone and nested spans, throw away partially overlapping spans.\nfunction toSpanTree(spans) {\n  if (spans.length == 0) {\n    return [];\n  }\n\n  const tree = [spans[0]];\n  let last = spans[0];\n  for (let i = 1; i < spans.length; i++) {\n    // Keep spans which start after the end of the previous span or those which\n    // are complete within the previous span.\n    if (spans[i].at > last.end) {\n      // Span is completely outside of the previous span.\n      tree.push(spans[i]);\n      last = spans[i];\n    } else if (spans[i].end <= last.end) {\n      // Span is fully inside of the previous span. Push to subnode.\n      last.children.push(spans[i]);\n    }\n    // Span could partially overlap, ignoring it as invalid.\n  }\n\n  // Recursively rearrange the subnodes.\n  for (let i in tree) {\n    tree[i].children = toSpanTree(tree[i].children);\n  }\n\n  return tree;\n}\n\n// Convert drafty document to a tree.\nfunction draftyToTree(doc) {\n  if (!doc) {\n    return null;\n  }\n\n  doc = (typeof doc == 'string') ? {\n    txt: doc\n  } : doc;\n  let {\n    txt,\n    fmt,\n    ent\n  } = doc;\n\n  txt = txt || '';\n  if (!Array.isArray(ent)) {\n    ent = [];\n  }\n\n  if (!Array.isArray(fmt) || fmt.length == 0) {\n    if (ent.length == 0) {\n      return {\n        text: txt\n      };\n    }\n\n    // Handle special case when all values in fmt are 0 and fmt therefore is skipped.\n    fmt = [{\n      at: 0,\n      len: 0,\n      key: 0\n    }];\n  }\n\n  // Sanitize spans.\n  const spans = [];\n  const attachments = [];\n  fmt.forEach((span) => {\n    if (!span || typeof span != 'object') {\n      return;\n    }\n\n    if (!['undefined', 'number'].includes(typeof span.at)) {\n      // Present, but non-numeric 'at'.\n      return;\n    }\n    if (!['undefined', 'number'].includes(typeof span.len)) {\n      // Present, but non-numeric 'len'.\n      return;\n    }\n    let at = span.at | 0;\n    let len = span.len | 0;\n    if (len < 0) {\n      // Invalid span length.\n      return;\n    }\n\n    let key = span.key || 0;\n    if (ent.length > 0 && (typeof key != 'number' || key < 0 || key >= ent.length)) {\n      // Invalid key value.\n      return;\n    }\n\n    if (at <= -1) {\n      // Attachment. Store attachments separately.\n      attachments.push({\n        start: -1,\n        end: 0,\n        key: key\n      });\n      return;\n    } else if (at + len > txt.length) {\n      // Span is out of bounds.\n      return;\n    }\n\n    if (!span.tp) {\n      if (ent.length > 0 && (typeof ent[key] == 'object')) {\n        spans.push({\n          start: at,\n          end: at + len,\n          key: key\n        });\n      }\n    } else {\n      spans.push({\n        type: span.tp,\n        start: at,\n        end: at + len\n      });\n    }\n  });\n\n  // Sort spans first by start index (asc) then by length (desc), then by weight.\n  spans.sort((a, b) => {\n    let diff = a.start - b.start;\n    if (diff != 0) {\n      return diff;\n    }\n    diff = b.end - a.end;\n    if (diff != 0) {\n      return diff;\n    }\n    return FMT_WEIGHT.indexOf(b.type) - FMT_WEIGHT.indexOf(a.type);\n  });\n\n  // Move attachments to the end of the list.\n  if (attachments.length > 0) {\n    spans.push(...attachments);\n  }\n\n  spans.forEach((span) => {\n    if (ent.length > 0 && !span.type && ent[span.key] && typeof ent[span.key] == 'object') {\n      span.type = ent[span.key].tp;\n      span.data = ent[span.key].data;\n    }\n\n    // Is type still undefined? Hide the invalid element!\n    if (!span.type) {\n      span.type = 'HD';\n    }\n  });\n\n  let tree = spansToTree({}, txt, 0, txt.length, spans);\n\n  // Flatten tree nodes.\n  const flatten = function(node) {\n    if (Array.isArray(node.children) && node.children.length == 1) {\n      // Unwrap.\n      const child = node.children[0];\n      if (!node.type) {\n        const parent = node.parent;\n        node = child;\n        node.parent = parent;\n      } else if (!child.type && !child.children) {\n        node.text = child.text;\n        delete node.children;\n      }\n    }\n    return node;\n  }\n  tree = treeTopDown(tree, flatten);\n\n  return tree;\n}\n\n// Add tree node to a parent tree.\nfunction addNode(parent, n) {\n  if (!n) {\n    return parent;\n  }\n\n  if (!parent.children) {\n    parent.children = [];\n  }\n\n  // If text is present, move it to a subnode.\n  if (parent.text) {\n    parent.children.push({\n      text: parent.text,\n      parent: parent\n    });\n    delete parent.text;\n  }\n\n  n.parent = parent;\n  parent.children.push(n);\n\n  return parent;\n}\n\n// Returns a tree of nodes.\nfunction spansToTree(parent, text, start, end, spans) {\n  if (!spans || spans.length == 0) {\n    if (start < end) {\n      addNode(parent, {\n        text: text.substring(start, end)\n      });\n    }\n    return parent;\n  }\n\n  // Process subspans.\n  for (let i = 0; i < spans.length; i++) {\n    const span = spans[i];\n    if (span.start < 0 && span.type == 'EX') {\n      addNode(parent, {\n        type: span.type,\n        data: span.data,\n        key: span.key,\n        att: true\n      });\n      continue;\n    }\n\n    // Add un-styled range before the styled span starts.\n    if (start < span.start) {\n      addNode(parent, {\n        text: text.substring(start, span.start)\n      });\n      start = span.start;\n    }\n\n    // Get all spans which are within the current span.\n    const subspans = [];\n    while (i < spans.length - 1) {\n      const inner = spans[i + 1];\n      if (inner.start < 0) {\n        // Attachments are in the end. Stop.\n        break;\n      } else if (inner.start < span.end) {\n        if (inner.end <= span.end) {\n          const tag = FORMAT_TAGS[inner.tp] || {};\n          if (inner.start < inner.end || tag.isVoid) {\n            // Valid subspan: completely within the current span and\n            // either non-zero length or zero length is acceptable.\n            subspans.push(inner);\n          }\n        }\n        i++;\n        // Overlapping subspans are ignored.\n      } else {\n        // Past the end of the current span. Stop.\n        break;\n      }\n    }\n\n    addNode(parent, spansToTree({\n      type: span.type,\n      data: span.data,\n      key: span.key\n    }, text, start, span.end, subspans));\n    start = span.end;\n  }\n\n  // Add the last unformatted range.\n  if (start < end) {\n    addNode(parent, {\n      text: text.substring(start, end)\n    });\n  }\n\n  return parent;\n}\n\n// Append a tree to a Drafty doc.\nfunction treeToDrafty(doc, tree, keymap) {\n  if (!tree) {\n    return doc;\n  }\n\n  doc.txt = doc.txt || '';\n\n  // Checkpoint to measure length of the current tree node.\n  const start = doc.txt.length;\n\n  if (tree.text) {\n    doc.txt += tree.text;\n  } else if (Array.isArray(tree.children)) {\n    tree.children.forEach((c) => {\n      treeToDrafty(doc, c, keymap);\n    });\n  }\n\n  if (tree.type) {\n    const len = doc.txt.length - start;\n    doc.fmt = doc.fmt || [];\n    if (Object.keys(tree.data || {}).length > 0) {\n      doc.ent = doc.ent || [];\n      const newKey = (typeof keymap[tree.key] == 'undefined') ? doc.ent.length : keymap[tree.key];\n      keymap[tree.key] = newKey;\n      doc.ent[newKey] = {\n        tp: tree.type,\n        data: tree.data\n      };\n      if (tree.att) {\n        // Attachment.\n        doc.fmt.push({\n          at: -1,\n          len: 0,\n          key: newKey\n        });\n      } else {\n        doc.fmt.push({\n          at: start,\n          len: len,\n          key: newKey\n        });\n      }\n    } else {\n      doc.fmt.push({\n        tp: tree.type,\n        at: start,\n        len: len\n      });\n    }\n  }\n  return doc;\n}\n\n// Traverse the tree top down transforming the nodes: apply transformer to every tree node.\nfunction treeTopDown(src, transformer, context) {\n  if (!src) {\n    return null;\n  }\n\n  let dst = transformer.call(context, src);\n  if (!dst || !dst.children) {\n    return dst;\n  }\n\n  const children = [];\n  for (let i in dst.children) {\n    let n = dst.children[i];\n    if (n) {\n      n = treeTopDown(n, transformer, context);\n      if (n) {\n        children.push(n);\n      }\n    }\n  }\n\n  if (children.length == 0) {\n    dst.children = null;\n  } else {\n    dst.children = children;\n  }\n\n  return dst;\n}\n\n// Traverse the tree bottom-up: apply formatter to every node.\n// The formatter must maintain its state through context.\nfunction treeBottomUp(src, formatter, index, stack, context) {\n  if (!src) {\n    return null;\n  }\n\n  if (stack && src.type) {\n    stack.push(src.type);\n  }\n\n  let values = [];\n  for (let i in src.children) {\n    const n = treeBottomUp(src.children[i], formatter, i, stack, context);\n    if (n) {\n      values.push(n);\n    }\n  }\n  if (values.length == 0) {\n    if (src.text) {\n      values = [src.text];\n    } else {\n      values = null;\n    }\n  }\n\n  if (stack && src.type) {\n    stack.pop();\n  }\n\n  return formatter.call(context, src.type, src.data, values, index, stack);\n}\n\n// Clip tree to the provided limit.\nfunction shortenTree(tree, limit, tail) {\n  if (!tree) {\n    return null;\n  }\n\n  if (tail) {\n    limit -= tail.length;\n  }\n\n  const shortener = function(node) {\n    if (limit <= -1) {\n      // Limit -1 means the doc was already clipped.\n      return null;\n    }\n\n    if (node.att) {\n      // Attachments are unchanged.\n      return node;\n    }\n    if (limit == 0) {\n      node.text = tail;\n      limit = -1;\n    } else if (node.text) {\n      const len = node.text.length;\n      if (len > limit) {\n        node.text = node.text.substring(0, limit) + tail;\n        limit = -1;\n      } else {\n        limit -= len;\n      }\n    }\n    return node;\n  }\n\n  return treeTopDown(tree, shortener);\n}\n\n// Strip heavy entities from a tree.\nfunction lightEntity(tree, allow) {\n  const lightCopy = node => {\n    const data = copyEntData(node.data, true, allow ? allow(node) : null);\n    if (data) {\n      node.data = data;\n    } else {\n      delete node.data;\n    }\n    return node;\n  }\n  return treeTopDown(tree, lightCopy);\n}\n\n// Remove spaces and breaks on the left.\nfunction lTrim(tree) {\n  if (tree.type == 'BR') {\n    tree = null;\n  } else if (tree.text) {\n    if (!tree.type) {\n      tree.text = tree.text.trimStart();\n      if (!tree.text) {\n        tree = null;\n      }\n    }\n  } else if (!tree.type && tree.children && tree.children.length > 0) {\n    const c = lTrim(tree.children[0]);\n    if (c) {\n      tree.children[0] = c;\n    } else {\n      tree.children.shift();\n      if (!tree.type && tree.children.length == 0) {\n        tree = null;\n      }\n    }\n  }\n  return tree;\n}\n\n// Move attachments to the end. Attachments must be at the top level, no need to traverse the tree.\nfunction attachmentsToEnd(tree, limit) {\n  if (!tree) {\n    return null;\n  }\n\n  if (tree.att) {\n    tree.text = ' ';\n    delete tree.att;\n    delete tree.children;\n  } else if (tree.children) {\n    const attachments = [];\n    const children = [];\n    for (let i in tree.children) {\n      const c = tree.children[i];\n      if (c.att) {\n        if (attachments.length == limit) {\n          // Too many attachments to preview;\n          continue;\n        }\n        if (c.data['mime'] == JSON_MIME_TYPE) {\n          // JSON attachments are not shown in preview.\n          continue;\n        }\n\n        delete c.att;\n        delete c.children;\n        c.text = ' ';\n        attachments.push(c);\n      } else {\n        children.push(c);\n      }\n    }\n    tree.children = children.concat(attachments);\n  }\n  return tree;\n}\n\n// Get a list of entities from a text.\nfunction extractEntities(line) {\n  let match;\n  let extracted = [];\n  ENTITY_TYPES.forEach((entity) => {\n    while ((match = entity.re.exec(line)) !== null) {\n      extracted.push({\n        offset: match['index'],\n        len: match[0].length,\n        unique: match[0],\n        data: entity.pack(match[0]),\n        type: entity.name\n      });\n    }\n  });\n\n  if (extracted.length == 0) {\n    return extracted;\n  }\n\n  // Remove entities detected inside other entities, like #hashtag in a URL.\n  extracted.sort((a, b) => {\n    return a.offset - b.offset;\n  });\n\n  let idx = -1;\n  extracted = extracted.filter((el) => {\n    const result = (el.offset > idx);\n    idx = el.offset + el.len;\n    return result;\n  });\n\n  return extracted;\n}\n\n// Convert the chunks into format suitable for serialization.\nfunction draftify(chunks, startAt) {\n  let plain = '';\n  let ranges = [];\n  for (let i in chunks) {\n    const chunk = chunks[i];\n    if (!chunk.txt) {\n      const drafty = draftify(chunk.children, plain.length + startAt);\n      chunk.txt = drafty.txt;\n      ranges = ranges.concat(drafty.fmt);\n    }\n\n    if (chunk.tp) {\n      ranges.push({\n        at: plain.length + startAt,\n        len: chunk.txt.length,\n        tp: chunk.tp\n      });\n    }\n\n    plain += chunk.txt;\n  }\n  return {\n    txt: plain,\n    fmt: ranges\n  };\n}\n\n// Create a copy of entity data with (light=false) or without (light=true) the large payload.\n// The array 'allow' contains a list of fields exempt from stripping.\nfunction copyEntData(data, light, allow) {\n  if (data && Object.entries(data).length > 0) {\n    allow = allow || [];\n    const dc = {};\n    ALLOWED_ENT_FIELDS.forEach(key => {\n      if (data[key]) {\n        if (light && !allow.includes(key) &&\n          (typeof data[key] == 'string' || Array.isArray(data[key])) &&\n          data[key].length > MAX_PREVIEW_DATA_SIZE) {\n          return;\n        }\n        if (typeof data[key] == 'object') {\n          return;\n        }\n        dc[key] = data[key];\n      }\n    });\n\n    if (Object.entries(dc).length != 0) {\n      return dc;\n    }\n  }\n  return null;\n}\n\nif (typeof module != 'undefined') {\n  module.exports = Drafty;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * @file Access control model.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\n/**\n * Helper class for handling access mode.\n *\n * @class AccessMode\n * @memberof Tinode\n *\n * @param {AccessMode|Object=} acs - AccessMode to copy or access mode object received from the server.\n */\nexport default class AccessMode {\n  constructor(acs) {\n    if (acs) {\n      this.given = typeof acs.given == 'number' ? acs.given : AccessMode.decode(acs.given);\n      this.want = typeof acs.want == 'number' ? acs.want : AccessMode.decode(acs.want);\n      this.mode = acs.mode ? (typeof acs.mode == 'number' ? acs.mode : AccessMode.decode(acs.mode)) :\n        (this.given & this.want);\n    }\n  }\n\n  static #checkFlag(val, side, flag) {\n    side = side || 'mode';\n    if (['given', 'want', 'mode'].includes(side)) {\n      return ((val[side] & flag) != 0);\n    }\n    throw new Error(`Invalid AccessMode component '${side}'`);\n  }\n  /**\n   * Parse string into an access mode value.\n   * @memberof Tinode.AccessMode\n   * @static\n   *\n   * @param {string | Number} mode - either a String representation of the access mode to parse or a set of bits to assign.\n   * @returns {number} - Access mode as a numeric value.\n   */\n  static decode(str) {\n    if (!str) {\n      return null;\n    } else if (typeof str == 'number') {\n      return str & AccessMode._BITMASK;\n    } else if (str === 'N' || str === 'n') {\n      return AccessMode._NONE;\n    }\n\n    const bitmask = {\n      'J': AccessMode._JOIN,\n      'R': AccessMode._READ,\n      'W': AccessMode._WRITE,\n      'P': AccessMode._PRES,\n      'A': AccessMode._APPROVE,\n      'S': AccessMode._SHARE,\n      'D': AccessMode._DELETE,\n      'O': AccessMode._OWNER\n    };\n\n    let m0 = AccessMode._NONE;\n\n    for (let i = 0; i < str.length; i++) {\n      const bit = bitmask[str.charAt(i).toUpperCase()];\n      if (!bit) {\n        // Unrecognized bit, skip.\n        continue;\n      }\n      m0 |= bit;\n    }\n    return m0;\n  }\n  /**\n   * Convert numeric representation of the access mode into a string.\n   *\n   * @memberof Tinode.AccessMode\n   * @static\n   *\n   * @param {number} val - access mode value to convert to a string.\n   * @returns {string} - Access mode as a string.\n   */\n  static encode(val) {\n    if (val === null || val === AccessMode._INVALID) {\n      return null;\n    } else if (val === AccessMode._NONE) {\n      return 'N';\n    }\n\n    const bitmask = ['J', 'R', 'W', 'P', 'A', 'S', 'D', 'O'];\n    let res = '';\n    for (let i = 0; i < bitmask.length; i++) {\n      if ((val & (1 << i)) != 0) {\n        res = res + bitmask[i];\n      }\n    }\n    return res;\n  }\n  /**\n   * Update numeric representation of access mode with the new value. The value\n   * is one of the following:\n   *  - a string starting with <code>'+'</code> or <code>'-'</code> then the bits to add or remove, e.g. <code>'+R-W'</code> or <code>'-PS'</code>.\n   *  - a new value of access mode\n   *\n   * @memberof Tinode.AccessMode\n   * @static\n   *\n   * @param {number} val - access mode value to update.\n   * @param {string} upd - update to apply to val.\n   * @returns {number} - updated access mode.\n   */\n  static update(val, upd) {\n    if (!upd || typeof upd != 'string') {\n      return val;\n    }\n\n    let action = upd.charAt(0);\n    if (action == '+' || action == '-') {\n      let val0 = val;\n      // Split delta-string like '+ABC-DEF+Z' into an array of parts including + and -.\n      const parts = upd.split(/([-+])/);\n      // Starting iteration from 1 because String.split() creates an array with the first empty element.\n      // Iterating by 2 because we parse pairs +/- then data.\n      for (let i = 1; i < parts.length - 1; i += 2) {\n        action = parts[i];\n        const m0 = AccessMode.decode(parts[i + 1]);\n        if (m0 == AccessMode._INVALID) {\n          return val;\n        }\n        if (m0 == null) {\n          continue;\n        }\n        if (action === '+') {\n          val0 |= m0;\n        } else if (action === '-') {\n          val0 &= ~m0;\n        }\n      }\n      val = val0;\n    } else {\n      // The string is an explicit new value 'ABC' rather than delta.\n      const val0 = AccessMode.decode(upd);\n      if (val0 != AccessMode._INVALID) {\n        val = val0;\n      }\n    }\n\n    return val;\n  }\n  /**\n   * Bits present in a1 but missing in a2.\n   *\n   * @static\n   * @memberof Tinode\n   *\n   * @param {number | string} a1 - access mode to subtract from.\n   * @param {number | string} a2 - access mode to subtract.\n   * @returns {number} access mode with bits present in <code>a1</code> but missing in <code>a2</code>.\n   */\n  static diff(a1, a2) {\n    a1 = AccessMode.decode(a1);\n    a2 = AccessMode.decode(a2);\n\n    if (a1 == AccessMode._INVALID || a2 == AccessMode._INVALID) {\n      return AccessMode._INVALID;\n    }\n    return a1 & ~a2;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Custom formatter\n   */\n  toString() {\n    return '{\"mode\": \"' + AccessMode.encode(this.mode) +\n      '\", \"given\": \"' + AccessMode.encode(this.given) +\n      '\", \"want\": \"' + AccessMode.encode(this.want) + '\"}';\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Converts numeric values to strings.\n   */\n  jsonHelper() {\n    return {\n      mode: AccessMode.encode(this.mode),\n      given: AccessMode.encode(this.given),\n      want: AccessMode.encode(this.want)\n    };\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Assign value to 'mode'.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string | Number} m - either a string representation of the access mode or a set of bits.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  setMode(m) {\n    this.mode = AccessMode.decode(m);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update <code>mode</code> value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string} u - string representation of the changes to apply to access mode.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateMode(u) {\n    this.mode = AccessMode.update(this.mode, u);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get <code>mode</code> value as a string.\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} - <code>mode</code> value.\n   */\n  getMode() {\n    return AccessMode.encode(this.mode);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Assign <code>given</code>  value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string | Number} g - either a string representation of the access mode or a set of bits.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  setGiven(g) {\n    this.given = AccessMode.decode(g);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update 'given' value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string} u - string representation of the changes to apply to access mode.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateGiven(u) {\n    this.given = AccessMode.update(this.given, u);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get 'given' value as a string.\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} - <b>given</b> value.\n   */\n  getGiven() {\n    return AccessMode.encode(this.given);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Assign 'want' value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string | Number} w - either a string representation of the access mode or a set of bits.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  setWant(w) {\n    this.want = AccessMode.decode(w);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update 'want' value.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {string} u - string representation of the changes to apply to access mode.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateWant(u) {\n    this.want = AccessMode.update(this.want, u);\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get 'want' value as a string.\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} - <b>want</b> value.\n   */\n  getWant() {\n    return AccessMode.encode(this.want);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get permissions present in 'want' but missing in 'given'.\n   * Inverse of {@link Tinode.AccessMode#getExcessive}\n   *\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} permissions present in <b>want</b> but missing in <b>given</b>.\n   */\n  getMissing() {\n    return AccessMode.encode(this.want & ~this.given);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Get permissions present in 'given' but missing in 'want'.\n   * Inverse of {@link Tinode.AccessMode#getMissing}\n   * @memberof Tinode.AccessMode\n   *\n   * @returns {string} permissions present in <b>given</b> but missing in <b>want</b>.\n   */\n  getExcessive() {\n    return AccessMode.encode(this.given & ~this.want);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Update 'want', 'give', and 'mode' values.\n   * @memberof Tinode.AccessMode\n   *\n   * @param {AccessMode} val - new access mode value.\n   * @returns {AccessMode} - <code>this</code> AccessMode.\n   */\n  updateAll(val) {\n    if (val) {\n      this.updateGiven(val.given);\n      this.updateWant(val.want);\n      this.mode = this.given & this.want;\n    }\n    return this;\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Owner (O) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isOwner(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._OWNER);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Presence (P) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isPresencer(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._PRES);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Presence (P) flag is NOT set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isMuted(side) {\n    return !this.isPresencer(side);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Join (J) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isJoiner(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._JOIN);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Reader (R) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isReader(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._READ);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Writer (W) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isWriter(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._WRITE);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Approver (A) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isApprover(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._APPROVE);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if either one of Owner (O) or Approver (A) flags is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isAdmin(side) {\n    return this.isOwner(side) || this.isApprover(side);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if either one of Owner (O), Approver (A), or Sharer (S) flags is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isSharer(side) {\n    return this.isAdmin(side) || AccessMode.#checkFlag(this, side, AccessMode._SHARE);\n  }\n  /**\n   * AccessMode is a class representing topic access mode.\n   *\n   * @memberof Tinode\n   * @class AccessMode\n   */\n  /**\n   * Check if Deleter (D) flag is set.\n   * @memberof Tinode.AccessMode\n   * @param {string=} side - which permission to check: given, want, mode; default: mode.\n   * @returns {boolean} - <code>true</code> if flag is set.\n   */\n  isDeleter(side) {\n    return AccessMode.#checkFlag(this, side, AccessMode._DELETE);\n  }\n}\n\nAccessMode._NONE = 0x00;\nAccessMode._JOIN = 0x01;\nAccessMode._READ = 0x02;\nAccessMode._WRITE = 0x04;\nAccessMode._PRES = 0x08;\nAccessMode._APPROVE = 0x10;\nAccessMode._SHARE = 0x20;\nAccessMode._DELETE = 0x40;\nAccessMode._OWNER = 0x80;\n\nAccessMode._BITMASK = AccessMode._JOIN | AccessMode._READ | AccessMode._WRITE | AccessMode._PRES |\n  AccessMode._APPROVE | AccessMode._SHARE | AccessMode._DELETE | AccessMode._OWNER;\nAccessMode._INVALID = 0x100000;\n","export const PACKAGE_VERSION = \"0.21.0\";\n","/**\n * @file Global constants and configuration parameters.\n *\n * @copyright 2015-2023 Tinode LLC\n */\n'use strict';\n\nimport {\n  PACKAGE_VERSION\n} from '../version.js';\n\n// Global constants\nexport const PROTOCOL_VERSION = '0'; // Major component of the version, e.g. '0' in '0.17.1'.\nexport const VERSION = PACKAGE_VERSION || '0.21';\nexport const LIBRARY = 'tinodejs/' + VERSION;\n\n// Topic name prefixes.\nexport const TOPIC_NEW = 'new';\nexport const TOPIC_NEW_CHAN = 'nch';\nexport const TOPIC_ME = 'me';\nexport const TOPIC_FND = 'fnd';\nexport const TOPIC_SYS = 'sys';\nexport const TOPIC_CHAN = 'chn';\nexport const TOPIC_GRP = 'grp';\nexport const TOPIC_P2P = 'p2p';\nexport const USER_NEW = 'new';\n\n// Starting value of a locally-generated seqId used for pending messages.\nexport const LOCAL_SEQID = 0xFFFFFFF;\n\n// Status codes.\nexport const MESSAGE_STATUS_NONE = 0; // Status not assigned.\nexport const MESSAGE_STATUS_QUEUED = 1; // Local ID assigned, in progress to be sent.\nexport const MESSAGE_STATUS_SENDING = 2; // Transmission started.\nexport const MESSAGE_STATUS_FAILED = 3; // At least one attempt was made to send the message.\nexport const MESSAGE_STATUS_SENT = 4; // Delivered to the server.\nexport const MESSAGE_STATUS_RECEIVED = 5; // Received by the client.\nexport const MESSAGE_STATUS_READ = 6; // Read by the user.\nexport const MESSAGE_STATUS_TO_ME = 7; // The message is received from another user.\n\n// Reject unresolved futures after this many milliseconds.\nexport const EXPIRE_PROMISES_TIMEOUT = 5_000;\n// Periodicity of garbage collection of unresolved futures.\nexport const EXPIRE_PROMISES_PERIOD = 1_000;\n\n// Delay before acknowledging that a message was recived.\nexport const RECV_TIMEOUT = 100;\n\n// Default number of messages to pull into memory from persistent cache.\nexport const DEFAULT_MESSAGES_PAGE = 24;\n\n// Unicode DEL character indicating data was deleted.\nexport const DEL_CHAR = '\\u2421';\n","/**\n * @file Throwable error with numeric error code.\n *\n * @copyright 2015-2023 Tinode LLC.\n */\n'use strict';\n\nexport default class CommError extends Error {\n  constructor(message, code) {\n    super(`${message} (${code})`);\n    this.name = 'CommError';\n    this.code = code;\n  }\n}\n","/**\n * @file Utilities used in multiple places.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\nimport AccessMode from './access-mode.js';\nimport {\n  DEL_CHAR\n} from './config.js';\n\n// Attempt to convert date and AccessMode strings to objects.\nexport function jsonParseHelper(key, val) {\n  // Try to convert string timestamps with optional milliseconds to Date,\n  // e.g. 2015-09-02T01:45:43[.123]Z\n  if (typeof val == 'string' && val.length >= 20 && val.length <= 24 && ['ts', 'touched', 'updated', 'created', 'when', 'deleted', 'expires'].includes(key)) {\n    const date = new Date(val);\n    if (!isNaN(date)) {\n      return date;\n    }\n  } else if (key === 'acs' && typeof val === 'object') {\n    return new AccessMode(val);\n  }\n  return val;\n}\n\n// Checks if URL is a relative url, i.e. has no 'scheme://', including the case of missing scheme '//'.\n// The scheme is expected to be RFC-compliant, e.g. [a-z][a-z0-9+.-]*\n// example.html - ok\n// https:example.com - not ok.\n// http:/example.com - not ok.\n// ' ↲ https://example.com' - not ok. (↲ means carriage return)\nexport function isUrlRelative(url) {\n  return url && !/^\\s*([a-z][a-z0-9+.-]*:|\\/\\/)/im.test(url);\n}\n\nfunction isValidDate(d) {\n  return (d instanceof Date) && !isNaN(d) && (d.getTime() != 0);\n}\n\n// RFC3339 formater of Date\nexport function rfc3339DateString(d) {\n  if (!isValidDate(d)) {\n    return undefined;\n  }\n\n  const pad = function(val, sp) {\n    sp = sp || 2;\n    return '0'.repeat(sp - ('' + val).length) + val;\n  };\n\n  const millis = d.getUTCMilliseconds();\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) +\n    'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) +\n    (millis ? '.' + pad(millis, 3) : '') + 'Z';\n}\n\n// Recursively merge src's own properties to dst.\n// Ignore properties where ignore[property] is true.\n// Array and Date objects are shallow-copied.\nexport function mergeObj(dst, src, ignore) {\n  if (typeof src != 'object') {\n    if (src === undefined) {\n      return dst;\n    }\n    if (src === DEL_CHAR) {\n      return undefined;\n    }\n    return src;\n  }\n  // JS is crazy: typeof null is 'object'.\n  if (src === null) {\n    return src;\n  }\n\n  // Handle Date\n  if (src instanceof Date && !isNaN(src)) {\n    return (!dst || !(dst instanceof Date) || isNaN(dst) || dst < src) ? src : dst;\n  }\n\n  // Access mode\n  if (src instanceof AccessMode) {\n    return new AccessMode(src);\n  }\n\n  // Handle Array\n  if (src instanceof Array) {\n    return src;\n  }\n\n  if (!dst || dst === DEL_CHAR) {\n    dst = src.constructor();\n  }\n\n  for (let prop in src) {\n    if (src.hasOwnProperty(prop) && (!ignore || !ignore[prop]) && (prop != '_noForwarding')) {\n      try {\n        dst[prop] = mergeObj(dst[prop], src[prop]);\n      } catch (err) {\n        // FIXME: probably need to log something here.\n      }\n    }\n  }\n  return dst;\n}\n\n// Update object stored in a cache. Returns updated value.\nexport function mergeToCache(cache, key, newval, ignore) {\n  cache[key] = mergeObj(cache[key], newval, ignore);\n  return cache[key];\n}\n\n// Strips all values from an object of they evaluate to false or if their name starts with '_'.\n// Used on all outgoing object before serialization to string.\nexport function simplify(obj) {\n  Object.keys(obj).forEach((key) => {\n    if (key[0] == '_') {\n      // Strip fields like \"obj._key\".\n      delete obj[key];\n    } else if (!obj[key]) {\n      // Strip fields which evaluate to false.\n      delete obj[key];\n    } else if (Array.isArray(obj[key]) && obj[key].length == 0) {\n      // Strip empty arrays.\n      delete obj[key];\n    } else if (!obj[key]) {\n      // Strip fields which evaluate to false.\n      delete obj[key];\n    } else if (obj[key] instanceof Date) {\n      // Strip invalid or zero date.\n      if (!isValidDate(obj[key])) {\n        delete obj[key];\n      }\n    } else if (typeof obj[key] == 'object') {\n      simplify(obj[key]);\n      // Strip empty objects.\n      if (Object.getOwnPropertyNames(obj[key]).length == 0) {\n        delete obj[key];\n      }\n    }\n  });\n  return obj;\n};\n\n\n// Trim whitespace, strip empty and duplicate elements elements.\n// If the result is an empty array, add a single element \"\\u2421\" (Unicode Del character).\nexport function normalizeArray(arr) {\n  let out = [];\n  if (Array.isArray(arr)) {\n    // Trim, throw away very short and empty tags.\n    for (let i = 0, l = arr.length; i < l; i++) {\n      let t = arr[i];\n      if (t) {\n        t = t.trim().toLowerCase();\n        if (t.length > 1) {\n          out.push(t);\n        }\n      }\n    }\n    out.sort().filter(function(item, pos, ary) {\n      return !pos || item != ary[pos - 1];\n    });\n  }\n  if (out.length == 0) {\n    // Add single tag with a Unicode Del character, otherwise an ampty array\n    // is ambiguos. The Del tag will be stripped by the server.\n    out.push(DEL_CHAR);\n  }\n  return out;\n}\n","/**\n * @file Abstraction layer for websocket and long polling connections.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\nimport CommError from './comm-error.js';\nimport {\n  jsonParseHelper\n} from './utils.js';\n\nlet WebSocketProvider;\nlet XHRProvider;\n\n// Error code to return in case of a network problem.\nconst NETWORK_ERROR = 503;\nconst NETWORK_ERROR_TEXT = \"Connection failed\";\n\n// Error code to return when user disconnected from server.\nconst NETWORK_USER = 418;\nconst NETWORK_USER_TEXT = \"Disconnected by client\";\n\n// Settings for exponential backoff\nconst _BOFF_BASE = 2000; // 2000 milliseconds, minimum delay between reconnects\nconst _BOFF_MAX_ITER = 10; // Maximum delay between reconnects 2^10 * 2000 ~ 34 minutes\nconst _BOFF_JITTER = 0.3; // Add random delay\n\n// Helper function for creating an endpoint URL.\nfunction makeBaseUrl(host, protocol, version, apiKey) {\n  let url = null;\n\n  if (['http', 'https', 'ws', 'wss'].includes(protocol)) {\n    url = `${protocol}://${host}`;\n    if (url.charAt(url.length - 1) !== '/') {\n      url += '/';\n    }\n    url += 'v' + version + '/channels';\n    if (['http', 'https'].includes(protocol)) {\n      // Long polling endpoint ends with \"lp\", i.e.\n      // '/v0/channels/lp' vs just '/v0/channels' for ws\n      url += '/lp';\n    }\n    url += '?apikey=' + apiKey;\n  }\n  return url;\n}\n\n/**\n * An abstraction for a websocket or a long polling connection.\n *\n * @class Connection\n * @memberof Tinode\n\n * @param {Object} config - configuration parameters.\n * @param {string} config.host - Host name and optional port number to connect to.\n * @param {string} config.apiKey - API key generated by <code>keygen</code>.\n * @param {string} config.transport - Network transport to use, either <code>\"ws\"<code>/<code>\"wss\"</code> for websocket or\n *      <code>lp</code> for long polling.\n * @param {boolean} config.secure - Use Secure WebSocket if <code>true</code>.\n * @param {string} version_ - Major value of the protocol version, e.g. '0' in '0.17.1'.\n * @param {boolean} autoreconnect_ - If connection is lost, try to reconnect automatically.\n */\nexport default class Connection {\n  // Logger, does nothing by default.\n  static #log = _ => {};\n\n  #boffTimer = null;\n  #boffIteration = 0;\n  #boffClosed = false; // Indicator if the socket was manually closed - don't autoreconnect if true.\n\n  // Websocket.\n  #socket = null;\n\n  host;\n  secure;\n  apiKey;\n\n  version;\n  autoreconnect;\n\n  initialized;\n\n  // (config.host, config.apiKey, config.transport, config.secure), PROTOCOL_VERSION, true\n  constructor(config, version_, autoreconnect_) {\n    this.host = config.host;\n    this.secure = config.secure;\n    this.apiKey = config.apiKey;\n\n    this.version = version_;\n    this.autoreconnect = autoreconnect_;\n\n    if (config.transport === 'lp') {\n      // explicit request to use long polling\n      this.#init_lp();\n      this.initialized = 'lp';\n    } else if (config.transport === 'ws') {\n      // explicit request to use web socket\n      // if websockets are not available, horrible things will happen\n      this.#init_ws();\n      this.initialized = 'ws';\n    }\n\n    if (!this.initialized) {\n      // Invalid or undefined network transport.\n      Connection.#log(\"Unknown or invalid network transport. Running under Node? Call 'Tinode.setNetworkProviders()'.\");\n      throw new Error(\"Unknown or invalid network transport. Running under Node? Call 'Tinode.setNetworkProviders()'.\");\n    }\n  }\n\n  /**\n   * To use Connection in a non browser context, supply WebSocket and XMLHttpRequest providers.\n   * @static\n   * @memberof Connection\n   * @param wsProvider WebSocket provider, e.g. for nodeJS , <code>require('ws')</code>.\n   * @param xhrProvider XMLHttpRequest provider, e.g. for node <code>require('xhr')</code>.\n   */\n  static setNetworkProviders(wsProvider, xhrProvider) {\n    WebSocketProvider = wsProvider;\n    XHRProvider = xhrProvider;\n  }\n\n  /**\n   * Assign a non-default logger.\n   * @static\n   * @memberof Connection\n   * @param {function} l variadic logging function.\n   */\n  static set logger(l) {\n    Connection.#log = l;\n  }\n\n  /**\n   * Initiate a new connection\n   * @memberof Tinode.Connection#\n   * @param {string} host_ Host name to connect to; if <code>null</code> the old host name will be used.\n   * @param {boolean} force Force new connection even if one already exists.\n   * @return {Promise} Promise resolved/rejected when the connection call completes, resolution is called without\n   *  parameters, rejection passes the {Error} as parameter.\n   */\n  connect(host_, force) {\n    return Promise.reject(null);\n  }\n\n  /**\n   * Try to restore a network connection, also reset backoff.\n   * @memberof Tinode.Connection#\n   *\n   * @param {boolean} force - reconnect even if there is a live connection already.\n   */\n  reconnect(force) {}\n\n  /**\n   * Terminate the network connection\n   * @memberof Tinode.Connection#\n   */\n  disconnect() {}\n\n  /**\n   * Send a string to the server.\n   * @memberof Tinode.Connection#\n   *\n   * @param {string} msg - String to send.\n   * @throws Throws an exception if the underlying connection is not live.\n   */\n  sendText(msg) {}\n\n  /**\n   * Check if connection is alive.\n   * @memberof Tinode.Connection#\n   * @returns {boolean} <code>true</code> if connection is live, <code>false</code> otherwise.\n   */\n  isConnected() {\n    return false;\n  }\n\n  /**\n   * Get the name of the current network transport.\n   * @memberof Tinode.Connection#\n   * @returns {string} name of the transport such as <code>\"ws\"</code> or <code>\"lp\"</code>.\n   */\n  transport() {\n    return this.initialized;\n  }\n\n  /**\n   * Send network probe to check if connection is indeed live.\n   * @memberof Tinode.Connection#\n   */\n  probe() {\n    this.sendText('1');\n  }\n\n  /**\n   * Reset autoreconnect counter to zero.\n   * @memberof Tinode.Connection#\n   */\n  backoffReset() {\n    this.#boffReset();\n  }\n\n  // Backoff implementation - reconnect after a timeout.\n  #boffReconnect() {\n    // Clear timer\n    clearTimeout(this.#boffTimer);\n    // Calculate when to fire the reconnect attempt\n    const timeout = _BOFF_BASE * (Math.pow(2, this.#boffIteration) * (1.0 + _BOFF_JITTER * Math.random()));\n    // Update iteration counter for future use\n    this.#boffIteration = (this.#boffIteration >= _BOFF_MAX_ITER ? this.#boffIteration : this.#boffIteration + 1);\n    if (this.onAutoreconnectIteration) {\n      this.onAutoreconnectIteration(timeout);\n    }\n\n    this.#boffTimer = setTimeout(_ => {\n      Connection.#log(`Reconnecting, iter=${this.#boffIteration}, timeout=${timeout}`);\n      // Maybe the socket was closed while we waited for the timer?\n      if (!this.#boffClosed) {\n        const prom = this.connect();\n        if (this.onAutoreconnectIteration) {\n          this.onAutoreconnectIteration(0, prom);\n        } else {\n          // Suppress error if it's not used.\n          prom.catch(_ => {\n            /* do nothing */\n          });\n        }\n      } else if (this.onAutoreconnectIteration) {\n        this.onAutoreconnectIteration(-1);\n      }\n    }, timeout);\n  }\n\n  // Terminate auto-reconnect process.\n  #boffStop() {\n    clearTimeout(this.#boffTimer);\n    this.#boffTimer = null;\n  }\n\n  // Reset auto-reconnect iteration counter.\n  #boffReset() {\n    this.#boffIteration = 0;\n  }\n\n  // Initialization for long polling.\n  #init_lp() {\n    const XDR_UNSENT = 0; // Client has been created. open() not called yet.\n    const XDR_OPENED = 1; // open() has been called.\n    const XDR_HEADERS_RECEIVED = 2; // send() has been called, and headers and status are available.\n    const XDR_LOADING = 3; // Downloading; responseText holds partial data.\n    const XDR_DONE = 4; // The operation is complete.\n\n    // Fully composed endpoint URL, with API key & SID\n    let _lpURL = null;\n\n    let _poller = null;\n    let _sender = null;\n\n    let lp_sender = (url_) => {\n      const sender = new XHRProvider();\n      sender.onreadystatechange = (evt) => {\n        if (sender.readyState == XDR_DONE && sender.status >= 400) {\n          // Some sort of error response\n          throw new CommError(\"LP sender failed\", sender.status);\n        }\n      };\n\n      sender.open('POST', url_, true);\n      return sender;\n    }\n\n    let lp_poller = (url_, resolve, reject) => {\n      let poller = new XHRProvider();\n      let promiseCompleted = false;\n\n      poller.onreadystatechange = evt => {\n        if (poller.readyState == XDR_DONE) {\n          if (poller.status == 201) { // 201 == HTTP.Created, get SID\n            let pkt = JSON.parse(poller.responseText, jsonParseHelper);\n            _lpURL = url_ + '&sid=' + pkt.ctrl.params.sid;\n            poller = lp_poller(_lpURL);\n            poller.send(null);\n            if (this.onOpen) {\n              this.onOpen();\n            }\n\n            if (resolve) {\n              promiseCompleted = true;\n              resolve();\n            }\n\n            if (this.autoreconnect) {\n              this.#boffStop();\n            }\n          } else if (poller.status > 0 && poller.status < 400) { // 0 = network error; 400 = HTTP.BadRequest\n            if (this.onMessage) {\n              this.onMessage(poller.responseText);\n            }\n            poller = lp_poller(_lpURL);\n            poller.send(null);\n          } else {\n            // Don't throw an error here, gracefully handle server errors\n            if (reject && !promiseCompleted) {\n              promiseCompleted = true;\n              reject(poller.responseText);\n            }\n            if (this.onMessage && poller.responseText) {\n              this.onMessage(poller.responseText);\n            }\n            if (this.onDisconnect) {\n              const code = poller.status || (this.#boffClosed ? NETWORK_USER : NETWORK_ERROR);\n              const text = poller.responseText || (this.#boffClosed ? NETWORK_USER_TEXT : NETWORK_ERROR_TEXT);\n              this.onDisconnect(new CommError(text, code), code);\n            }\n\n            // Polling has stopped. Indicate it by setting poller to null.\n            poller = null;\n            if (!this.#boffClosed && this.autoreconnect) {\n              this.#boffReconnect();\n            }\n          }\n        }\n      };\n      // Using POST to avoid caching response by service worker.\n      poller.open('POST', url_, true);\n      return poller;\n    }\n\n    this.connect = (host_, force) => {\n      this.#boffClosed = false;\n\n      if (_poller) {\n        if (!force) {\n          return Promise.resolve();\n        }\n        _poller.onreadystatechange = undefined;\n        _poller.abort();\n        _poller = null;\n      }\n\n      if (host_) {\n        this.host = host_;\n      }\n\n      return new Promise((resolve, reject) => {\n        const url = makeBaseUrl(this.host, this.secure ? 'https' : 'http', this.version, this.apiKey);\n        Connection.#log(\"LP connecting to:\", url);\n        _poller = lp_poller(url, resolve, reject);\n        _poller.send(null);\n      }).catch(err => {\n        Connection.#log(\"LP connection failed:\", err);\n      });\n    };\n\n    this.reconnect = force => {\n      this.#boffStop();\n      this.connect(null, force);\n    };\n\n    this.disconnect = _ => {\n      this.#boffClosed = true;\n      this.#boffStop();\n\n      if (_sender) {\n        _sender.onreadystatechange = undefined;\n        _sender.abort();\n        _sender = null;\n      }\n      if (_poller) {\n        _poller.onreadystatechange = undefined;\n        _poller.abort();\n        _poller = null;\n      }\n\n      if (this.onDisconnect) {\n        this.onDisconnect(new CommError(NETWORK_USER_TEXT, NETWORK_USER), NETWORK_USER);\n      }\n      // Ensure it's reconstructed\n      _lpURL = null;\n    };\n\n    this.sendText = (msg) => {\n      _sender = lp_sender(_lpURL);\n      if (_sender && (_sender.readyState == XDR_OPENED)) { // 1 == OPENED\n        _sender.send(msg);\n      } else {\n        throw new Error(\"Long poller failed to connect\");\n      }\n    };\n\n    this.isConnected = _ => {\n      return (_poller && true);\n    };\n  }\n\n  // Initialization for Websocket\n  #init_ws() {\n    this.connect = (host_, force) => {\n      this.#boffClosed = false;\n\n      if (this.#socket) {\n        if (!force && this.#socket.readyState == this.#socket.OPEN) {\n          return Promise.resolve();\n        }\n        this.#socket.close();\n        this.#socket = null;\n      }\n\n      if (host_) {\n        this.host = host_;\n      }\n\n      return new Promise((resolve, reject) => {\n        const url = makeBaseUrl(this.host, this.secure ? 'wss' : 'ws', this.version, this.apiKey);\n\n        Connection.#log(\"WS connecting to: \", url);\n\n        // It throws when the server is not accessible but the exception cannot be caught:\n        // https://stackoverflow.com/questions/31002592/javascript-doesnt-catch-error-in-websocket-instantiation/31003057\n        const conn = new WebSocketProvider(url);\n\n        conn.onerror = err => {\n          reject(err);\n        };\n\n        conn.onopen = _ => {\n          if (this.autoreconnect) {\n            this.#boffStop();\n          }\n\n          if (this.onOpen) {\n            this.onOpen();\n          }\n\n          resolve();\n        };\n\n        conn.onclose = _ => {\n          this.#socket = null;\n\n          if (this.onDisconnect) {\n            const code = this.#boffClosed ? NETWORK_USER : NETWORK_ERROR;\n            this.onDisconnect(new CommError(this.#boffClosed ? NETWORK_USER_TEXT : NETWORK_ERROR_TEXT, code), code);\n          }\n\n          if (!this.#boffClosed && this.autoreconnect) {\n            this.#boffReconnect();\n          }\n        };\n\n        conn.onmessage = evt => {\n          if (this.onMessage) {\n            this.onMessage(evt.data);\n          }\n        };\n\n        this.#socket = conn;\n      });\n    }\n\n    this.reconnect = force => {\n      this.#boffStop();\n      this.connect(null, force);\n    };\n\n    this.disconnect = _ => {\n      this.#boffClosed = true;\n      this.#boffStop();\n\n      if (!this.#socket) {\n        return;\n      }\n      this.#socket.close();\n      this.#socket = null;\n    };\n\n    this.sendText = msg => {\n      if (this.#socket && (this.#socket.readyState == this.#socket.OPEN)) {\n        this.#socket.send(msg);\n      } else {\n        throw new Error(\"Websocket is not connected\");\n      }\n    };\n\n    this.isConnected = _ => {\n      return (this.#socket && (this.#socket.readyState == this.#socket.OPEN));\n    };\n  }\n\n  // Callbacks:\n\n  /**\n   * A callback to pass incoming messages to. See {@link Tinode.Connection#onMessage}.\n   * @callback Tinode.Connection.OnMessage\n   * @memberof Tinode.Connection\n   * @param {string} message - Message to process.\n   */\n  onMessage = undefined;\n\n  /**\n   * A callback for reporting a dropped connection.\n   * @type {function}\n   * @memberof Tinode.Connection#\n   */\n  onDisconnect = undefined;\n\n  /**\n   * A callback called when the connection is ready to be used for sending. For websockets it's socket open,\n   * for long polling it's <code>readyState=1</code> (OPENED)\n   * @type {function}\n   * @memberof Tinode.Connection#\n   */\n  onOpen = undefined;\n\n  /**\n   * A callback to notify of reconnection attempts. See {@link Tinode.Connection#onAutoreconnectIteration}.\n   * @memberof Tinode.Connection\n   * @callback AutoreconnectIterationType\n   * @param {string} timeout - time till the next reconnect attempt in milliseconds. <code>-1</code> means reconnect was skipped.\n   * @param {Promise} promise resolved or rejected when the reconnect attemp completes.\n   *\n   */\n  /**\n   * A callback to inform when the next attampt to reconnect will happen and to receive connection promise.\n   * @memberof Tinode.Connection#\n   * @type {Tinode.Connection.AutoreconnectIterationType}\n   */\n  onAutoreconnectIteration = undefined;\n}\n\nConnection.NETWORK_ERROR = NETWORK_ERROR;\nConnection.NETWORK_ERROR_TEXT = NETWORK_ERROR_TEXT;\nConnection.NETWORK_USER = NETWORK_USER;\nConnection.NETWORK_USER_TEXT = NETWORK_USER_TEXT;\n","/**\n * @file Helper methods for dealing with IndexedDB cache of messages, users, and topics.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\nconst DB_VERSION = 1;\nconst DB_NAME = 'tinode-web';\n\nlet IDBProvider;\n\nexport default class DB {\n  #onError = _ => {};\n  #logger = _ => {};\n\n  // Instance of IndexDB.\n  db = null;\n  // Indicator that the cache is disabled.\n  disabled = false;\n\n  constructor(onError, logger) {\n    this.#onError = onError || this.#onError;\n    this.#logger = logger || this.#logger;\n  }\n\n  #mapObjects(source, callback, context) {\n    if (!this.db) {\n      return disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction([source]);\n      trx.onerror = event => {\n        this.#logger('PCache', 'mapObjects', source, event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore(source).getAll().onsuccess = event => {\n        if (callback) {\n          event.target.result.forEach(topic => {\n            callback.call(context, topic);\n          });\n        }\n        resolve(event.target.result);\n      };\n    });\n  }\n\n  /**\n   * Initialize persistent cache: open or create/upgrade if needed.\n   * @returns {Promise} promise to be resolved/rejected when the DB is initialized.\n   */\n  initDatabase() {\n    return new Promise((resolve, reject) => {\n      // Open the database and initialize callbacks.\n      const req = IDBProvider.open(DB_NAME, DB_VERSION);\n      req.onsuccess = event => {\n        this.db = event.target.result;\n        this.disabled = false;\n        resolve(this.db);\n      };\n      req.onerror = event => {\n        this.#logger('PCache', \"failed to initialize\", event);\n        reject(event.target.error);\n        this.#onError(event.target.error);\n      };\n      req.onupgradeneeded = event => {\n        this.db = event.target.result;\n\n        this.db.onerror = event => {\n          this.#logger('PCache', \"failed to create storage\", event);\n          this.#onError(event.target.error);\n        };\n\n        // Individual object stores.\n        // Object store (table) for topics. The primary key is topic name.\n        this.db.createObjectStore('topic', {\n          keyPath: 'name'\n        });\n\n        // Users object store. UID is the primary key.\n        this.db.createObjectStore('user', {\n          keyPath: 'uid'\n        });\n\n        // Subscriptions object store topic <-> user. Topic name + UID is the primary key.\n        this.db.createObjectStore('subscription', {\n          keyPath: ['topic', 'uid']\n        });\n\n        // Messages object store. The primary key is topic name + seq.\n        this.db.createObjectStore('message', {\n          keyPath: ['topic', 'seq']\n        });\n      };\n    });\n  }\n\n  /**\n   * Delete persistent cache.\n   */\n  deleteDatabase() {\n    // Close connection, otherwise operations will fail with 'onblocked'.\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n    return new Promise((resolve, reject) => {\n      const req = IDBProvider.deleteDatabase(DB_NAME);\n      req.onblocked = _ => {\n        if (this.db) {\n          this.db.close();\n        }\n        const err = new Error(\"blocked\");\n        this.#logger('PCache', 'deleteDatabase', err);\n        reject(err);\n      };\n      req.onsuccess = _ => {\n        this.db = null;\n        this.disabled = true;\n        resolve(true);\n      };\n      req.onerror = event => {\n        this.#logger('PCache', 'deleteDatabase', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  }\n\n  /**\n   * Check if persistent cache is ready for use.\n   * @memberOf DB\n   * @returns {boolean} <code>true</code> if cache is ready, <code>false</code> otherwise.\n   */\n  isReady() {\n    return !!this.db;\n  }\n\n  // Topics.\n\n  /**\n   * Save to cache or update topic in persistent cache.\n   * @memberOf DB\n   * @param {Topic} topic - topic to be added or updated.\n   * @returns {Promise} promise resolved/rejected on operation completion.\n   */\n  updTopic(topic) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['topic'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updTopic', event.target.error);\n        reject(event.target.error);\n      };\n      const req = trx.objectStore('topic').get(topic.name);\n      req.onsuccess = _ => {\n        trx.objectStore('topic').put(DB.#serializeTopic(req.result, topic));\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Mark or unmark topic as deleted.\n   * @memberOf DB\n   * @param {string} name - name of the topic to mark or unmark.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  markTopicAsDeleted(name) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['topic'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'markTopicAsDeleted', event.target.error);\n        reject(event.target.error);\n      };\n      const req = trx.objectStore('topic').get(name);\n      req.onsuccess = event => {\n        const topic = event.target.result;\n        topic._deleted = true;\n        trx.objectStore('topic').put(topic);\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Remove topic from persistent cache.\n   * @memberOf DB\n   * @param {string} name - name of the topic to remove from database.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  remTopic(name) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['topic', 'subscription', 'message'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'remTopic', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('topic').delete(IDBKeyRange.only(name));\n      trx.objectStore('subscription').delete(IDBKeyRange.bound([name, '-'], [name, '~']));\n      trx.objectStore('message').delete(IDBKeyRange.bound([name, 0], [name, Number.MAX_SAFE_INTEGER]));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Execute a callback for each stored topic.\n   * @memberOf DB\n   * @param {function} callback - function to call for each topic.\n   * @param {Object} context - the value or <code>this</code> inside the callback.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  mapTopics(callback, context) {\n    return this.#mapObjects('topic', callback, context);\n  }\n\n  /**\n   * Copy data from serialized object to topic.\n   * @memberOf DB\n   * @param {Topic} topic - target to deserialize to.\n   * @param {Object} src - serialized data to copy from.\n   */\n  deserializeTopic(topic, src) {\n    DB.#deserializeTopic(topic, src);\n  }\n\n  // Users.\n  /**\n   * Add or update user object in the persistent cache.\n   * @memberOf DB\n   * @param {string} uid - ID of the user to save or update.\n   * @param {Object} pub - user's <code>public</code> information.\n   * @returns {Promise} promise resolved/rejected on operation completion.\n   */\n  updUser(uid, pub) {\n    if (arguments.length < 2 || pub === undefined) {\n      // No point inupdating user with invalid data.\n      return;\n    }\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['user'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updUser', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('user').put({\n        uid: uid,\n        public: pub\n      });\n      trx.commit();\n    });\n  }\n\n  /**\n   * Remove user from persistent cache.\n   * @memberOf DB\n   * @param {string} uid - ID of the user to remove from the cache.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  remUser(uid) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['user'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'remUser', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('user').delete(IDBKeyRange.only(uid));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Execute a callback for each stored user.\n   * @memberOf DB\n   * @param {function} callback - function to call for each topic.\n   * @param {Object} context - the value or <code>this</code> inside the callback.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  mapUsers(callback, context) {\n    return this.#mapObjects('user', callback, context);\n  }\n\n  /**\n   * Read a single user from persistent cache.\n   * @memberOf DB\n   * @param {string} uid - ID of the user to fetch from cache.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  getUser(uid) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['user']);\n      trx.oncomplete = event => {\n        const user = event.target.result;\n        resolve({\n          user: user.uid,\n          public: user.public\n        });\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'getUser', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('user').get(uid);\n    });\n  }\n\n  // Subscriptions.\n  /**\n   * Add or update subscription in persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {string} uid - ID of the subscribed user.\n   * @param {Object} sub - subscription to save.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  updSubscription(topicName, uid, sub) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['subscription'], 'readwrite');\n      trx.oncomplete = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updSubscription', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('subscription').get([topicName, uid]).onsuccess = (event) => {\n        trx.objectStore('subscription').put(DB.#serializeSubscription(event.target.result, topicName, uid, sub));\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Execute a callback for each cached subscription in a given topic.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the subscriptions.\n   * @param {function} callback - function to call for each subscription.\n   * @param {Object} context - the value or <code>this</code> inside the callback.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  mapSubscriptions(topicName, callback, context) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['subscription']);\n      trx.onerror = (event) => {\n        this.#logger('PCache', 'mapSubscriptions', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('subscription').getAll(IDBKeyRange.bound([topicName, '-'], [topicName, '~'])).onsuccess = (event) => {\n        if (callback) {\n          event.target.result.forEach((topic) => {\n            callback.call(context, topic);\n          });\n        }\n        resolve(event.target.result);\n      };\n    });\n  }\n\n  // Messages.\n\n  /**\n   * Save message to persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {Object} msg - message to save.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  addMessage(msg) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['message'], 'readwrite');\n      trx.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'addMessage', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('message').add(DB.#serializeMessage(null, msg));\n      trx.commit();\n    });\n  }\n\n  /**\n   * Update delivery status of a message stored in persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {number} seq - ID of the message to update\n   * @param {number} status - new delivery status of the message.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  updMessageStatus(topicName, seq, status) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      const trx = this.db.transaction(['message'], 'readwrite');\n      trx.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      trx.onerror = event => {\n        this.#logger('PCache', 'updMessageStatus', event.target.error);\n        reject(event.target.error);\n      };\n      const req = trx.objectStore('message').get(IDBKeyRange.only([topicName, seq]));\n      req.onsuccess = event => {\n        const src = req.result || event.target.result;\n        if (!src || src._status == status) {\n          trx.commit();\n          return;\n        }\n        trx.objectStore('message').put(DB.#serializeMessage(src, {\n          topic: topicName,\n          seq: seq,\n          _status: status\n        }));\n        trx.commit();\n      };\n    });\n  }\n\n  /**\n   * Remove one or more messages from persistent cache.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic which owns the message.\n   * @param {number} from - id of the message to remove or lower boundary when removing range (inclusive).\n   * @param {number=} to - upper boundary (exclusive) when removing a range of messages.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  remMessages(topicName, from, to) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve() :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      if (!from && !to) {\n        from = 0;\n        to = Number.MAX_SAFE_INTEGER;\n      }\n      const range = to > 0 ? IDBKeyRange.bound([topicName, from], [topicName, to], false, true) :\n        IDBKeyRange.only([topicName, from]);\n      const trx = this.db.transaction(['message'], 'readwrite');\n      trx.onsuccess = (event) => {\n        resolve(event.target.result);\n      };\n      trx.onerror = (event) => {\n        this.#logger('PCache', 'remMessages', event.target.error);\n        reject(event.target.error);\n      };\n      trx.objectStore('message').delete(range);\n      trx.commit();\n    });\n  }\n\n  /**\n   * Retrieve messages from persistent store.\n   * @memberOf DB\n   * @param {string} topicName - name of the topic to retrieve messages from.\n   * @param {function} callback to call for each retrieved message.\n   * @param {Object} query - parameters of the message range to retrieve.\n   * @param {number=} query.since - the least message ID to retrieve (inclusive).\n   * @param {number=} query.before - the greatest message ID to retrieve (exclusive).\n   * @param {number=} query.limit - the maximum number of messages to retrieve.\n   * @return {Promise} promise resolved/rejected on operation completion.\n   */\n  readMessages(topicName, query, callback, context) {\n    if (!this.isReady()) {\n      return this.disabled ?\n        Promise.resolve([]) :\n        Promise.reject(new Error(\"not initialized\"));\n    }\n    return new Promise((resolve, reject) => {\n      query = query || {};\n      const since = query.since > 0 ? query.since : 0;\n      const before = query.before > 0 ? query.before : Number.MAX_SAFE_INTEGER;\n      const limit = query.limit | 0;\n\n      const result = [];\n      const range = IDBKeyRange.bound([topicName, since], [topicName, before], false, true);\n      const trx = this.db.transaction(['message']);\n      trx.onerror = (event) => {\n        this.#logger('PCache', 'readMessages', event.target.error);\n        reject(event.target.error);\n      };\n      // Iterate in descending order.\n      trx.objectStore('message').openCursor(range, 'prev').onsuccess = (event) => {\n        const cursor = event.target.result;\n        if (cursor) {\n          if (callback) {\n            callback.call(context, cursor.value);\n          }\n          result.push(cursor.value);\n          if (limit <= 0 || result.length < limit) {\n            cursor.continue();\n          } else {\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      };\n    });\n  }\n\n  // Private methods.\n\n  // Serializable topic fields.\n  static #topic_fields = ['created', 'updated', 'deleted', 'read', 'recv', 'seq', 'clear', 'defacs',\n    'creds', 'public', 'trusted', 'private', 'touched', '_deleted'\n  ];\n\n  // Copy data from src to Topic object.\n  static #deserializeTopic(topic, src) {\n    DB.#topic_fields.forEach((f) => {\n      if (src.hasOwnProperty(f)) {\n        topic[f] = src[f];\n      }\n    });\n    if (Array.isArray(src.tags)) {\n      topic._tags = src.tags;\n    }\n    if (src.acs) {\n      topic.setAccessMode(src.acs);\n    }\n    topic.seq |= 0;\n    topic.read |= 0;\n    topic.unread = Math.max(0, topic.seq - topic.read);\n  }\n\n  // Copy values from 'src' to 'dst'. Allocate dst if it's null or undefined.\n  static #serializeTopic(dst, src) {\n    const res = dst || {\n      name: src.name\n    };\n    DB.#topic_fields.forEach((f) => {\n      if (src.hasOwnProperty(f)) {\n        res[f] = src[f];\n      }\n    });\n    if (Array.isArray(src._tags)) {\n      res.tags = src._tags;\n    }\n    if (src.acs) {\n      res.acs = src.getAccessMode().jsonHelper();\n    }\n    return res;\n  }\n\n  static #serializeSubscription(dst, topicName, uid, sub) {\n    const fields = ['updated', 'mode', 'read', 'recv', 'clear', 'lastSeen', 'userAgent'];\n    const res = dst || {\n      topic: topicName,\n      uid: uid\n    };\n\n    fields.forEach((f) => {\n      if (sub.hasOwnProperty(f)) {\n        res[f] = sub[f];\n      }\n    });\n\n    return res;\n  }\n\n  static #serializeMessage(dst, msg) {\n    // Serializable fields.\n    const fields = ['topic', 'seq', 'ts', '_status', 'from', 'head', 'content'];\n    const res = dst || {};\n    fields.forEach((f) => {\n      if (msg.hasOwnProperty(f)) {\n        res[f] = msg[f];\n      }\n    });\n    return res;\n  }\n\n  /**\n   * To use DB in a non browser context, supply indexedDB provider.\n   * @static\n   * @memberof DB\n   * @param idbProvider indexedDB provider, e.g. for node <code>require('fake-indexeddb')</code>.\n   */\n  static setDatabaseProvider(idbProvider) {\n    IDBProvider = idbProvider;\n  }\n}\n","/**\n * @file Utilities for uploading and downloading files.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\nimport CommError from './comm-error.js';\nimport {\n  isUrlRelative,\n  jsonParseHelper\n} from './utils.js';\n\nlet XHRProvider;\n\n/**\n * @class LargeFileHelper - utilities for uploading and downloading files out of band.\n * Don't instantiate this class directly. Use {Tinode.getLargeFileHelper} instead.\n * @memberof Tinode\n *\n * @param {Tinode} tinode - the main Tinode object.\n * @param {string} version - protocol version, i.e. '0'.\n */\nexport default class LargeFileHelper {\n  constructor(tinode, version) {\n    this._tinode = tinode;\n    this._version = version;\n\n    this._apiKey = tinode._apiKey;\n    this._authToken = tinode.getAuthToken();\n    this._reqId = tinode.getNextUniqueId();\n    this.xhr = new XHRProvider();\n\n    // Promise\n    this.toResolve = null;\n    this.toReject = null;\n\n    // Callbacks\n    this.onProgress = null;\n    this.onSuccess = null;\n    this.onFailure = null;\n  }\n\n  /**\n   * Start uploading the file to a non-default endpoint.\n   *\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @param {string} baseUrl alternative base URL of upload server.\n   * @param {File|Blob} data to upload.\n   * @param {string} avatarFor topic name if the upload represents an avatar.\n   * @param {Callback} onProgress callback. Takes one {float} parameter 0..1\n   * @param {Callback} onSuccess callback. Called when the file is successfully uploaded.\n   * @param {Callback} onFailure callback. Called in case of a failure.\n   *\n   * @returns {Promise} resolved/rejected when the upload is completed/failed.\n   */\n  uploadWithBaseUrl(baseUrl, data, avatarFor, onProgress, onSuccess, onFailure) {\n    const instance = this;\n\n    let url = `/v${this._version}/file/u/`;\n    if (baseUrl) {\n      let base = baseUrl;\n      if (base.endsWith('/')) {\n        // Removing trailing slash.\n        base = base.slice(0, -1);\n      }\n      if (base.startsWith('http://') || base.startsWith('https://')) {\n        url = base + url;\n      } else {\n        throw new Error(`Invalid base URL '${baseUrl}'`);\n      }\n    }\n    this.xhr.open('POST', url, true);\n    this.xhr.setRequestHeader('X-Tinode-APIKey', this._apiKey);\n    if (this._authToken) {\n      this.xhr.setRequestHeader('X-Tinode-Auth', `Token ${this._authToken.token}`);\n    }\n    const result = new Promise((resolve, reject) => {\n      this.toResolve = resolve;\n      this.toReject = reject;\n    });\n\n    this.onProgress = onProgress;\n    this.onSuccess = onSuccess;\n    this.onFailure = onFailure;\n\n    this.xhr.upload.onprogress = (e) => {\n      if (e.lengthComputable && instance.onProgress) {\n        instance.onProgress(e.loaded / e.total);\n      }\n    };\n\n    this.xhr.onload = function() {\n      let pkt;\n      try {\n        pkt = JSON.parse(this.response, jsonParseHelper);\n      } catch (err) {\n        instance._tinode.logger(\"ERROR: Invalid server response in LargeFileHelper\", this.response);\n        pkt = {\n          ctrl: {\n            code: this.status,\n            text: this.statusText\n          }\n        };\n      }\n\n      if (this.status >= 200 && this.status < 300) {\n        if (instance.toResolve) {\n          instance.toResolve(pkt.ctrl.params.url);\n        }\n        if (instance.onSuccess) {\n          instance.onSuccess(pkt.ctrl);\n        }\n      } else if (this.status >= 400) {\n        if (instance.toReject) {\n          instance.toReject(new CommError(pkt.ctrl.text, pkt.ctrl.code));\n        }\n        if (instance.onFailure) {\n          instance.onFailure(pkt.ctrl);\n        }\n      } else {\n        instance._tinode.logger(\"ERROR: Unexpected server response status\", this.status, this.response);\n      }\n    };\n\n    this.xhr.onerror = function(e) {\n      if (instance.toReject) {\n        instance.toReject(e || new Error(\"failed\"));\n      }\n      if (instance.onFailure) {\n        instance.onFailure(null);\n      }\n    };\n\n    this.xhr.onabort = function(e) {\n      if (instance.toReject) {\n        instance.toReject(new Error(\"upload cancelled by user\"));\n      }\n      if (instance.onFailure) {\n        instance.onFailure(null);\n      }\n    };\n\n    try {\n      const form = new FormData();\n      form.append('file', data);\n      form.set('id', this._reqId);\n      if (avatarFor) {\n        form.set('topic', avatarFor);\n      }\n      this.xhr.send(form);\n    } catch (err) {\n      if (this.toReject) {\n        this.toReject(err);\n      }\n      if (this.onFailure) {\n        this.onFailure(null);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Start uploading the file to default endpoint.\n   *\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @param {File|Blob} data to upload\n   * @param {string} avatarFor topic name if the upload represents an avatar.\n   * @param {Callback} onProgress callback. Takes one {float} parameter 0..1\n   * @param {Callback} onSuccess callback. Called when the file is successfully uploaded.\n   * @param {Callback} onFailure callback. Called in case of a failure.\n   *\n   * @returns {Promise} resolved/rejected when the upload is completed/failed.\n   */\n  upload(data, avatarFor, onProgress, onSuccess, onFailure) {\n    const baseUrl = (this._tinode._secure ? 'https://' : 'http://') + this._tinode._host;\n    return this.uploadWithBaseUrl(baseUrl, data, avatarFor, onProgress, onSuccess, onFailure);\n  }\n  /**\n   * Download the file from a given URL using GET request. This method works with the Tinode server only.\n   *\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @param {string} relativeUrl - URL to download the file from. Must be relative url, i.e. must not contain the host.\n   * @param {string=} filename - file name to use for the downloaded file.\n   *\n   * @returns {Promise} resolved/rejected when the download is completed/failed.\n   */\n  download(relativeUrl, filename, mimetype, onProgress, onError) {\n    if (!isUrlRelative(relativeUrl)) {\n      // As a security measure refuse to download from an absolute URL.\n      if (onError) {\n        onError(`The URL '${relativeUrl}' must be relative, not absolute`);\n      }\n      return;\n    }\n    if (!this._authToken) {\n      if (onError) {\n        onError(\"Must authenticate first\");\n      }\n      return;\n    }\n    const instance = this;\n    // Get data as blob (stored by the browser as a temporary file).\n    this.xhr.open('GET', relativeUrl, true);\n    this.xhr.setRequestHeader('X-Tinode-APIKey', this._apiKey);\n    this.xhr.setRequestHeader('X-Tinode-Auth', 'Token ' + this._authToken.token);\n    this.xhr.responseType = 'blob';\n\n    this.onProgress = onProgress;\n    this.xhr.onprogress = function(e) {\n      if (instance.onProgress) {\n        // Passing e.loaded instead of e.loaded/e.total because e.total\n        // is always 0 with gzip compression enabled by the server.\n        instance.onProgress(e.loaded);\n      }\n    };\n\n    const result = new Promise((resolve, reject) => {\n      this.toResolve = resolve;\n      this.toReject = reject;\n    });\n\n    // The blob needs to be saved as file. There is no known way to\n    // save the blob as file other than to fake a click on an <a href... download=...>.\n    this.xhr.onload = function() {\n      if (this.status == 200) {\n        const link = document.createElement('a');\n        // URL.createObjectURL is not available in non-browser environment. This call will fail.\n        link.href = window.URL.createObjectURL(new Blob([this.response], {\n          type: mimetype\n        }));\n        link.style.display = 'none';\n        link.setAttribute('download', filename);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(link.href);\n        if (instance.toResolve) {\n          instance.toResolve();\n        }\n      } else if (this.status >= 400 && instance.toReject) {\n        // The this.responseText is undefined, must use this.response which is a blob.\n        // Need to convert this.response to JSON. The blob can only be accessed by the\n        // FileReader.\n        const reader = new FileReader();\n        reader.onload = function() {\n          try {\n            const pkt = JSON.parse(this.result, jsonParseHelper);\n            instance.toReject(new CommError(pkt.ctrl.text, pkt.ctrl.code));\n          } catch (err) {\n            instance._tinode.logger(\"ERROR: Invalid server response in LargeFileHelper\", this.result);\n            instance.toReject(err);\n          }\n        };\n        reader.readAsText(this.response);\n      }\n    };\n\n    this.xhr.onerror = function(e) {\n      if (instance.toReject) {\n        instance.toReject(new Error(\"failed\"));\n      }\n    };\n\n    this.xhr.onabort = function() {\n      if (instance.toReject) {\n        instance.toReject(null);\n      }\n    };\n\n    try {\n      this.xhr.send();\n    } catch (err) {\n      if (this.toReject) {\n        this.toReject(err);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Try to cancel an ongoing upload or download.\n   * @memberof Tinode.LargeFileHelper#\n   */\n  cancel() {\n    if (this.xhr && this.xhr.readyState < 4) {\n      this.xhr.abort();\n    }\n  }\n  /**\n   * Get unique id of this request.\n   * @memberof Tinode.LargeFileHelper#\n   *\n   * @returns {string} unique id\n   */\n  getId() {\n    return this._reqId;\n  }\n  /**\n   * To use LargeFileHelper in a non browser context, supply XMLHttpRequest provider.\n   * @static\n   * @memberof LargeFileHelper\n   * @param xhrProvider XMLHttpRequest provider, e.g. for node <code>require('xhr')</code>.\n   */\n  static setNetworkProvider(xhrProvider) {\n    XHRProvider = xhrProvider;\n  }\n}\n","/**\n * @file Helper class for constructing {@link Tinode.GetQuery}.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\n/**\n * Helper class for constructing {@link Tinode.GetQuery}.\n *\n * @class MetaGetBuilder\n * @memberof Tinode\n *\n * @param {Tinode.Topic} parent topic which instantiated this builder.\n */\nexport default class MetaGetBuilder {\n  constructor(parent) {\n    this.topic = parent;\n    this.what = {};\n  }\n\n  // Get timestamp of the most recent desc update.\n  #get_desc_ims() {\n    return this.topic.updated;\n  }\n\n  // Get timestamp of the most recent subs update.\n  #get_subs_ims() {\n    if (this.topic.isP2PType()) {\n      return this.#get_desc_ims();\n    }\n    return this.topic._lastSubsUpdate;\n  }\n  /**\n   * Add query parameters to fetch messages within explicit limits.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} since - messages newer than this (inclusive);\n   * @param {number=} before - older than this (exclusive)\n   * @param {number=} limit - number of messages to fetch\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withData(since, before, limit) {\n    this.what['data'] = {\n      since: since,\n      before: before,\n      limit: limit\n    };\n    return this;\n  }\n  /**\n   * Add query parameters to fetch messages newer than the latest saved message.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - number of messages to fetch\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterData(limit) {\n    return this.withData(this.topic._maxSeq > 0 ? this.topic._maxSeq + 1 : undefined, undefined, limit);\n  }\n  /**\n   * Add query parameters to fetch messages older than the earliest saved message.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - maximum number of messages to fetch.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withEarlierData(limit) {\n    return this.withData(undefined, this.topic._minSeq > 0 ? this.topic._minSeq : undefined, limit);\n  }\n  /**\n   * Add query parameters to fetch topic description if it's newer than the given timestamp.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Date=} ims - fetch messages newer than this timestamp.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withDesc(ims) {\n    this.what['desc'] = {\n      ims: ims\n    };\n    return this;\n  }\n  /**\n   * Add query parameters to fetch topic description if it's newer than the last update.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterDesc() {\n    return this.withDesc(this.#get_desc_ims());\n  }\n  /**\n   * Add query parameters to fetch subscriptions.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Date=} ims - fetch subscriptions modified more recently than this timestamp\n   * @param {number=} limit - maximum number of subscriptions to fetch.\n   * @param {string=} userOrTopic - user ID or topic name to fetch for fetching one subscription.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withSub(ims, limit, userOrTopic) {\n    const opts = {\n      ims: ims,\n      limit: limit\n    };\n    if (this.topic.getType() == 'me') {\n      opts.topic = userOrTopic;\n    } else {\n      opts.user = userOrTopic;\n    }\n    this.what['sub'] = opts;\n    return this;\n  }\n  /**\n   * Add query parameters to fetch a single subscription.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {Date=} ims - fetch subscriptions modified more recently than this timestamp\n   * @param {string=} userOrTopic - user ID or topic name to fetch for fetching one subscription.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withOneSub(ims, userOrTopic) {\n    return this.withSub(ims, undefined, userOrTopic);\n  }\n  /**\n   * Add query parameters to fetch a single subscription if it's been updated since the last update.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {string=} userOrTopic - user ID or topic name to fetch for fetching one subscription.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterOneSub(userOrTopic) {\n    return this.withOneSub(this.topic._lastSubsUpdate, userOrTopic);\n  }\n  /**\n   * Add query parameters to fetch subscriptions updated since the last update.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - maximum number of subscriptions to fetch.\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterSub(limit) {\n    return this.withSub(this.#get_subs_ims(), limit);\n  }\n  /**\n   * Add query parameters to fetch topic tags.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withTags() {\n    this.what['tags'] = true;\n    return this;\n  }\n  /**\n   * Add query parameters to fetch user's credentials. <code>'me'</code> topic only.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withCred() {\n    if (this.topic.getType() == 'me') {\n      this.what['cred'] = true;\n    } else {\n      this.topic._tinode.logger(\"ERROR: Invalid topic type for MetaGetBuilder:withCreds\", this.topic.getType());\n    }\n    return this;\n  }\n  /**\n   * Add query parameters to fetch deleted messages within explicit limits. Any/all parameters can be null.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} since - ids of messages deleted since this 'del' id (inclusive)\n   * @param {number=} limit - number of deleted message ids to fetch\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withDel(since, limit) {\n    if (since || limit) {\n      this.what['del'] = {\n        since: since,\n        limit: limit\n      };\n    }\n    return this;\n  }\n  /**\n   * Add query parameters to fetch messages deleted after the saved <code>'del'</code> id.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @param {number=} limit - number of deleted message ids to fetch\n   *\n   * @returns {Tinode.MetaGetBuilder} <code>this</code> object.\n   */\n  withLaterDel(limit) {\n    // Specify 'since' only if we have already received some messages. If\n    // we have no locally cached messages then we don't care if any messages were deleted.\n    return this.withDel(this.topic._maxSeq > 0 ? this.topic._maxDel + 1 : undefined, limit);\n  }\n\n  /**\n   * Extract subquery: get an object that contains specified subquery.\n   * @memberof Tinode.MetaGetBuilder#\n   * @param {string} what - subquery to return: one of 'data', 'sub', 'desc', 'tags', 'cred', 'del'.\n   * @returns {Object} requested subquery or <code>undefined</code>.\n   */\n  extract(what) {\n    return this.what[what];\n  }\n\n  /**\n   * Construct parameters.\n   * @memberof Tinode.MetaGetBuilder#\n   *\n   * @returns {Tinode.GetQuery} Get query\n   */\n  build() {\n    const what = [];\n    let params = {};\n    ['data', 'sub', 'desc', 'tags', 'cred', 'del'].forEach((key) => {\n      if (this.what.hasOwnProperty(key)) {\n        what.push(key);\n        if (Object.getOwnPropertyNames(this.what[key]).length > 0) {\n          params[key] = this.what[key];\n        }\n      }\n    });\n    if (what.length > 0) {\n      params.what = what.join(' ');\n    } else {\n      params = undefined;\n    }\n    return params;\n  }\n}\n","/**\n * @file In-memory sorted cache of objects.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\n/**\n * In-memory sorted cache of objects.\n *\n * @class CBuffer\n * @memberof Tinode\n * @protected\n *\n * @param {function} compare custom comparator of objects. Takes two parameters <code>a</code> and <code>b</code>;\n *    returns <code>-1</code> if <code>a < b</code>, <code>0</code> if <code>a == b</code>, <code>1</code> otherwise.\n * @param {boolean} unique enforce element uniqueness: when <code>true</code> replace existing element with a new\n *    one on conflict; when <code>false</code> keep both elements.\n */\nexport default class CBuffer {\n  #comparator = undefined;\n  #unique = false;\n  buffer = [];\n\n  constructor(compare_, unique_) {\n    this.#comparator = compare_ || ((a, b) => {\n      return a === b ? 0 : a < b ? -1 : 1;\n    });\n    this.#unique = unique_;\n  }\n\n  #findNearest(elem, arr, exact) {\n    let start = 0;\n    let end = arr.length - 1;\n    let pivot = 0;\n    let diff = 0;\n    let found = false;\n\n    while (start <= end) {\n      pivot = (start + end) / 2 | 0;\n      diff = this.#comparator(arr[pivot], elem);\n      if (diff < 0) {\n        start = pivot + 1;\n      } else if (diff > 0) {\n        end = pivot - 1;\n      } else {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      return {\n        idx: pivot,\n        exact: true\n      };\n    }\n    if (exact) {\n      return {\n        idx: -1\n      };\n    }\n    // Not exact - insertion point\n    return {\n      idx: diff < 0 ? pivot + 1 : pivot\n    };\n  }\n\n  // Insert element into a sorted array.\n  #insertSorted(elem, arr) {\n    const found = this.#findNearest(elem, arr, false);\n    const count = (found.exact && this.#unique) ? 1 : 0;\n    arr.splice(found.idx, count, elem);\n    return arr;\n  }\n\n  /**\n   * Get an element at the given position.\n   * @memberof Tinode.CBuffer#\n   * @param {number} at - Position to fetch from.\n   * @returns {Object} Element at the given position or <code>undefined</code>.\n   */\n  getAt(at) {\n    return this.buffer[at];\n  }\n\n  /**\n   * Convenience method for getting the element from the end of the buffer.\n   * @memberof Tinode.CBuffer#\n   * @param {number} at - position to fetch from, counting from the end;\n   *    <code>undefined</code> or <code>null</code>  mean \"last\".\n   * @returns {Object} The last element in the buffer or <code>undefined</code> if buffer is empty.\n   */\n  getLast(at) {\n    at |= 0;\n    return this.buffer.length > at ? this.buffer[this.buffer.length - 1 - at] : undefined;\n  }\n\n  /**\n   * Add new element(s) to the buffer. Variadic: takes one or more arguments. If an array is passed as a single\n   * argument, its elements are inserted individually.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {...Object|Array} - One or more objects to insert.\n   */\n  put() {\n    let insert;\n    // inspect arguments: if array, insert its elements, if one or more non-array arguments, insert them one by one\n    if (arguments.length == 1 && Array.isArray(arguments[0])) {\n      insert = arguments[0];\n    } else {\n      insert = arguments;\n    }\n    for (let idx in insert) {\n      this.#insertSorted(insert[idx], this.buffer);\n    }\n  }\n\n  /**\n   * Remove element at the given position.\n   * @memberof Tinode.CBuffer#\n   * @param {number} at - Position to delete at.\n   * @returns {Object} Element at the given position or <code>undefined</code>.\n   */\n  delAt(at) {\n    at |= 0;\n    let r = this.buffer.splice(at, 1);\n    if (r && r.length > 0) {\n      return r[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove elements between two positions.\n   * @memberof Tinode.CBuffer#\n   * @param {number} since - Position to delete from (inclusive).\n   * @param {number} before - Position to delete to (exclusive).\n   *\n   * @returns {Array} array of removed elements (could be zero length).\n   */\n  delRange(since, before) {\n    return this.buffer.splice(since, before - since);\n  }\n\n  /**\n   * Return the number of elements the buffer holds.\n   * @memberof Tinode.CBuffer#\n   * @return {number} Number of elements in the buffer.\n   */\n  length() {\n    return this.buffer.length;\n  }\n\n  /**\n   * Reset the buffer discarding all elements\n   * @memberof Tinode.CBuffer#\n   */\n  reset() {\n    this.buffer = [];\n  }\n\n  /**\n   * Callback for iterating contents of buffer. See {@link Tinode.CBuffer#forEach}.\n   * @callback ForEachCallbackType\n   * @memberof Tinode.CBuffer#\n   * @param {Object} elem - Current element of the buffer.\n   * @param {Object} prev - Previous element of the buffer.\n   * @param {Object} next - Next element of the buffer.\n   * @param {number} index - Index of the current element.\n   */\n\n  /**\n   * Apply given <code>callback</code> to all elements of the buffer.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {Tinode.ForEachCallbackType} callback - Function to call for each element.\n   * @param {number} startIdx - Optional index to start iterating from (inclusive).\n   * @param {number} beforeIdx - Optional index to stop iterating before (exclusive).\n   * @param {Object} context - calling context (i.e. value of <code>this</code> in callback)\n   */\n  forEach(callback, startIdx, beforeIdx, context) {\n    startIdx = startIdx | 0;\n    beforeIdx = beforeIdx || this.buffer.length;\n\n    for (let i = startIdx; i < beforeIdx; i++) {\n      callback.call(context, this.buffer[i],\n        (i > startIdx ? this.buffer[i - 1] : undefined),\n        (i < beforeIdx - 1 ? this.buffer[i + 1] : undefined), i);\n    }\n  }\n\n  /**\n   * Find element in buffer using buffer's comparison function.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {Object} elem - element to find.\n   * @param {boolean=} nearest - when true and exact match is not found, return the nearest element (insertion point).\n   * @returns {number} index of the element in the buffer or -1.\n   */\n  find(elem, nearest) {\n    const {\n      idx\n    } = this.#findNearest(elem, this.buffer, !nearest);\n    return idx;\n  }\n\n  /**\n   * Callback for filtering the buffer. See {@link Tinode.CBuffer#filter}.\n   * @callback FilterCallbackType\n   * @memberof Tinode.CBuffer#\n   * @param {Object} elem - Current element of the buffer.\n   * @param {number} index - Index of the current element.\n   * @returns {boolen} <code>true</code> to keep the element, <code>false</code> to remove.\n   */\n\n  /**\n   * Remove all elements that do not pass the test implemented by the provided callback function.\n   * @memberof Tinode.CBuffer#\n   *\n   * @param {Tinode.FilterCallbackType} callback - Function to call for each element.\n   * @param {Object} context - calling context (i.e. value of <code>this</code> in the callback)\n   */\n  filter(callback, context) {\n    let count = 0;\n    for (let i = 0; i < this.buffer.length; i++) {\n      if (callback.call(context, this.buffer[i], i)) {\n        this.buffer[count] = this.buffer[i];\n        count++;\n      }\n    }\n\n    this.buffer.splice(count);\n  }\n\n  /**\n   * Check if buffer is empty.\n   * @returns {boolean} <code>true</code> if the buffer is empty, <code>false</code> otherwise.\n   */\n  isEmpty() {\n    return this.buffer.length == 0;\n  }\n}\n","/**\n * @file Topic management.\n *\n * @copyright 2015-2022 Tinode LLC.\n */\n'use strict';\n\nimport AccessMode from './access-mode.js';\nimport CBuffer from './cbuffer.js';\nimport * as Const from './config.js';\nimport Drafty from './drafty.js';\nimport MetaGetBuilder from './meta-builder.js';\nimport {\n  mergeObj,\n  mergeToCache,\n  normalizeArray\n} from './utils.js';\n\nexport class Topic {\n  /**\n   * @callback Tinode.Topic.onData\n   * @param {Data} data - Data packet\n   */\n  /**\n   * Topic is a class representing a logical communication channel.\n   * @class Topic\n   * @memberof Tinode\n   *\n   * @param {string} name - Name of the topic to create.\n   * @param {Object=} callbacks - Object with various event callbacks.\n   * @param {Tinode.Topic.onData} callbacks.onData - Callback which receives a <code>{data}</code> message.\n   * @param {callback} callbacks.onMeta - Callback which receives a <code>{meta}</code> message.\n   * @param {callback} callbacks.onPres - Callback which receives a <code>{pres}</code> message.\n   * @param {callback} callbacks.onInfo - Callback which receives an <code>{info}</code> message.\n   * @param {callback} callbacks.onMetaDesc - Callback which receives changes to topic desctioption {@link desc}.\n   * @param {callback} callbacks.onMetaSub - Called for a single subscription record change.\n   * @param {callback} callbacks.onSubsUpdated - Called after a batch of subscription changes have been recieved and cached.\n   * @param {callback} callbacks.onDeleteTopic - Called after the topic is deleted.\n   * @param {callback} callbacls.onAllMessagesReceived - Called when all requested <code>{data}</code> messages have been recived.\n   */\n  constructor(name, callbacks) {\n    // Parent Tinode object.\n    this._tinode = null;\n\n    // Server-provided data, locally immutable.\n    // topic name\n    this.name = name;\n    // Timestamp when the topic was created.\n    this.created = null;\n    // Timestamp when the topic was last updated.\n    this.updated = null;\n    // Timestamp of the last messages\n    this.touched = new Date(0);\n    // Access mode, see AccessMode\n    this.acs = new AccessMode(null);\n    // Per-topic private data (accessible by current user only).\n    this.private = null;\n    // Per-topic public data (accessible by all users).\n    this.public = null;\n    // Per-topic system-provided data (accessible by all users).\n    this.trusted = null;\n\n    // Locally cached data\n    // Subscribed users, for tracking read/recv/msg notifications.\n    this._users = {};\n\n    // Current value of locally issued seqId, used for pending messages.\n    this._queuedSeqId = Const.LOCAL_SEQID;\n\n    // The maximum known {data.seq} value.\n    this._maxSeq = 0;\n    // The minimum known {data.seq} value.\n    this._minSeq = 0;\n    // Indicator that the last request for earlier messages returned 0.\n    this._noEarlierMsgs = false;\n    // The maximum known deletion ID.\n    this._maxDel = 0;\n    // Timer object used to send 'recv' notifications.\n    this._recvNotificationTimer = null;\n\n    // User discovery tags\n    this._tags = [];\n    // Credentials such as email or phone number.\n    this._credentials = [];\n    // Message versions cache (e.g. for edited messages).\n    // Keys: original message seq ID.\n    // Values: CBuffers containing newer versions of the original message\n    // ordered by seq id.\n    this._messageVersions = {};\n    // Message cache, sorted by message seq values, from old to new.\n    this._messages = new CBuffer((a, b) => {\n      return a.seq - b.seq;\n    }, true);\n    // Boolean, true if the topic is currently live\n    this._attached = false;\n    // Timestap of the most recently updated subscription.\n    this._lastSubsUpdate = new Date(0);\n    // Topic created but not yet synced with the server. Used only during initialization.\n    this._new = true;\n    // The topic is deleted at the server, this is a local copy.\n    this._deleted = false;\n\n    // Timer used to trgger {leave} request after a delay.\n    this._delayedLeaveTimer = null;\n\n    // Callbacks\n    if (callbacks) {\n      this.onData = callbacks.onData;\n      this.onMeta = callbacks.onMeta;\n      this.onPres = callbacks.onPres;\n      this.onInfo = callbacks.onInfo;\n      // A single desc update;\n      this.onMetaDesc = callbacks.onMetaDesc;\n      // A single subscription record;\n      this.onMetaSub = callbacks.onMetaSub;\n      // All subscription records received;\n      this.onSubsUpdated = callbacks.onSubsUpdated;\n      this.onTagsUpdated = callbacks.onTagsUpdated;\n      this.onCredsUpdated = callbacks.onCredsUpdated;\n      this.onDeleteTopic = callbacks.onDeleteTopic;\n      this.onAllMessagesReceived = callbacks.onAllMessagesReceived;\n    }\n  }\n\n  // Static methods.\n\n  /**\n   * Determine topic type from topic's name: grp, p2p, me, fnd, sys.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {string} One of <code>\"me\"</code>, <code>\"fnd\"</code>, <code>\"sys\"</code>, <code>\"grp\"</code>,\n   *    <code>\"p2p\"</code> or <code>undefined</code>.\n   */\n  static topicType(name) {\n    const types = {\n      'me': Const.TOPIC_ME,\n      'fnd': Const.TOPIC_FND,\n      'grp': Const.TOPIC_GRP,\n      'new': Const.TOPIC_GRP,\n      'nch': Const.TOPIC_GRP,\n      'chn': Const.TOPIC_GRP,\n      'usr': Const.TOPIC_P2P,\n      'sys': Const.TOPIC_SYS\n    };\n    return types[(typeof name == 'string') ? name.substring(0, 3) : 'xxx'];\n  }\n\n  /**\n   * Check if the given topic name is a name of a 'me' topic.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a 'me' topic, <code>false</code> otherwise.\n   */\n  static isMeTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_ME;\n  }\n\n  /**\n   * Check if the given topic name is a name of a group topic.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a group topic, <code>false</code> otherwise.\n   */\n  static isGroupTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_GRP;\n  }\n\n  /**\n   * Check if the given topic name is a name of a p2p topic.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p topic, <code>false</code> otherwise.\n   */\n  static isP2PTopicName(name) {\n    return Topic.topicType(name) == Const.TOPIC_P2P;\n  }\n\n  /**\n   * Check if the given topic name is a name of a communication topic, i.e. P2P or group.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p or group topic, <code>false</code> otherwise.\n   */\n  static isCommTopicName(name) {\n    return Topic.isP2PTopicName(name) || Topic.isGroupTopicName(name);\n  }\n\n  /**\n   * Check if the topic name is a name of a new topic.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a new topic, <code>false</code> otherwise.\n   */\n  static isNewGroupTopicName(name) {\n    return (typeof name == 'string') &&\n      (name.substring(0, 3) == Const.TOPIC_NEW || name.substring(0, 3) == Const.TOPIC_NEW_CHAN);\n  }\n\n  /**\n   * Check if the topic name is a name of a channel.\n   * @memberof Tinode.Topic#\n   * @static\n   *\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a channel, <code>false</code> otherwise.\n   */\n  static isChannelTopicName(name) {\n    return (typeof name == 'string') &&\n      (name.substring(0, 3) == Const.TOPIC_CHAN || name.substring(0, 3) == Const.TOPIC_NEW_CHAN);\n  }\n\n  /**\n   * Check if the topic is subscribed.\n   * @memberof Tinode.Topic#\n   * @returns {boolean} True is topic is attached/subscribed, false otherwise.\n   */\n  isSubscribed() {\n    return this._attached;\n  }\n\n  /**\n   * Request topic to subscribe. Wrapper for {@link Tinode#subscribe}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.GetQuery=} getParams - get query parameters.\n   * @param {Tinode.SetParams=} setParams - set parameters.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  subscribe(getParams, setParams) {\n    // Clear request to leave topic.\n    clearTimeout(this._delayedLeaveTimer);\n    this._delayedLeaveTimer = null;\n\n    // If the topic is already subscribed, return resolved promise\n    if (this._attached) {\n      return Promise.resolve(this);\n    }\n\n    // If the topic is deleted, reject subscription requests.\n    if (this._deleted) {\n      return Promise.reject(new Error(\"Conversation deleted\"));\n    }\n\n    // Send subscribe message, handle async response.\n    // If topic name is explicitly provided, use it. If no name, then it's a new group topic,\n    // use \"new\".\n    return this._tinode.subscribe(this.name || Const.TOPIC_NEW, getParams, setParams).then(ctrl => {\n      if (ctrl.code >= 300) {\n        // Do nothing if subscription status has not changed.\n        return ctrl;\n      }\n\n      this._attached = true;\n      this._deleted = false;\n      this.acs = (ctrl.params && ctrl.params.acs) ? ctrl.params.acs : this.acs;\n\n      // Set topic name for new topics and add it to cache.\n      if (this._new) {\n        delete this._new;\n\n        if (this.name != ctrl.topic) {\n          // Name may change new123456 -> grpAbCdEf. Remove from cache under the old name.\n          this._cacheDelSelf();\n          this.name = ctrl.topic;\n        }\n        this._cachePutSelf();\n\n        this.created = ctrl.ts;\n        this.updated = ctrl.ts;\n\n        if (this.name != Const.TOPIC_ME && this.name != Const.TOPIC_FND) {\n          // Add the new topic to the list of contacts maintained by the 'me' topic.\n          const me = this._tinode.getMeTopic();\n          if (me.onMetaSub) {\n            me.onMetaSub(this);\n          }\n          if (me.onSubsUpdated) {\n            me.onSubsUpdated([this.name], 1);\n          }\n        }\n\n        if (setParams && setParams.desc) {\n          setParams.desc._noForwarding = true;\n          this._processMetaDesc(setParams.desc);\n        }\n      }\n      return ctrl;\n    });\n  }\n\n  /**\n   * Create a draft of a message without sending it to the server.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string | Object} data - Content to wrap in a draft.\n   * @param {boolean=} noEcho - If <code>true</code> server will not echo message back to originating\n   * session. Otherwise the server will send a copy of the message to sender.\n   *\n   * @returns {Object} message draft.\n   */\n  createMessage(data, noEcho) {\n    return this._tinode.createMessage(this.name, data, noEcho);\n  }\n\n  /**\n   * Immediately publish data to topic. Wrapper for {@link Tinode#publish}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string | Object} data - Message to publish, either plain string or a Drafty object.\n   * @param {boolean=} noEcho - If <code>true</code> server will not echo message back to originating\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  publish(data, noEcho) {\n    return this.publishMessage(this.createMessage(data, noEcho));\n  }\n\n  /**\n   * Publish message created by {@link Tinode.Topic#createMessage}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Object} pub - {data} object to publish. Must be created by {@link Tinode.Topic#createMessage}\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  publishMessage(pub) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot publish on inactive topic\"));\n    }\n    if (this._sending) {\n      return Promise.reject(new Error(\"The message is already being sent\"));\n    }\n\n    // Send data.\n    pub._sending = true;\n    pub._failed = false;\n\n    // Extract refereces to attachments and out of band image records.\n    let attachments = null;\n    if (Drafty.hasEntities(pub.content)) {\n      attachments = [];\n      Drafty.entities(pub.content, data => {\n        if (data && data.ref) {\n          attachments.push(data.ref);\n        }\n      });\n      if (attachments.length == 0) {\n        attachments = null;\n      }\n    }\n\n    return this._tinode.publishMessage(pub, attachments).then(ctrl => {\n      pub._sending = false;\n      pub.ts = ctrl.ts;\n      this.swapMessageId(pub, ctrl.params.seq);\n      this._maybeUpdateMessageVersionsCache(pub);\n      this._routeData(pub);\n      return ctrl;\n    }).catch(err => {\n      this._tinode.logger(\"WARNING: Message rejected by the server\", err);\n      pub._sending = false;\n      pub._failed = true;\n      if (this.onData) {\n        this.onData();\n      }\n    });\n  }\n\n  /**\n   * Add message to local message cache, send to the server when the promise is resolved.\n   * If promise is null or undefined, the message will be sent immediately.\n   * The message is sent when the\n   * The message should be created by {@link Tinode.Topic#createMessage}.\n   * This is probably not the final API.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Object} pub - Message to use as a draft.\n   * @param {Promise} prom - Message will be sent when this promise is resolved, discarded if rejected.\n   *\n   * @returns {Promise} derived promise.\n   */\n  publishDraft(pub, prom) {\n    const seq = pub.seq || this._getQueuedSeqId();\n    if (!pub._noForwarding) {\n      // The 'seq', 'ts', and 'from' are added to mimic {data}. They are removed later\n      // before the message is sent.\n      pub._noForwarding = true;\n      pub.seq = seq;\n      pub.ts = new Date();\n      pub.from = this._tinode.getCurrentUserID();\n\n      // Don't need an echo message because the message is added to local cache right away.\n      pub.noecho = true;\n      // Add to cache.\n      this._messages.put(pub);\n      this._tinode._db.addMessage(pub);\n\n      if (this.onData) {\n        this.onData(pub);\n      }\n    }\n    // If promise is provided, send the queued message when it's resolved.\n    // If no promise is provided, create a resolved one and send immediately.\n    return (prom || Promise.resolve())\n      .then(_ => {\n        if (pub._cancelled) {\n          return {\n            code: 300,\n            text: \"cancelled\"\n          };\n        }\n        return this.publishMessage(pub);\n      }).catch(err => {\n        this._tinode.logger(\"WARNING: Message draft rejected\", err);\n        pub._sending = false;\n        pub._failed = true;\n        if (this.onData) {\n          this.onData();\n        }\n        // Rethrow to let caller know that the operation failed.\n        throw err;\n      });\n  }\n\n  /**\n   * Leave the topic, optionally unsibscribe. Leaving the topic means the topic will stop\n   * receiving updates from the server. Unsubscribing will terminate user's relationship with the topic.\n   * Wrapper for {@link Tinode#leave}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean=} unsub - If true, unsubscribe, otherwise just leave.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  leave(unsub) {\n    // It's possible to unsubscribe (unsub==true) from inactive topic.\n    if (!this._attached && !unsub) {\n      return Promise.reject(new Error(\"Cannot leave inactive topic\"));\n    }\n\n    // Send a 'leave' message, handle async response\n    return this._tinode.leave(this.name, unsub).then(ctrl => {\n      this._resetSub();\n      if (unsub) {\n        this._gone();\n      }\n      return ctrl;\n    });\n  }\n\n  /**\n   * Leave the topic, optionally unsibscribe after a delay. Leaving the topic means the topic will stop\n   * receiving updates from the server. Unsubscribing will terminate user's relationship with the topic.\n   * Wrapper for {@link Tinode#leave}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} unsub - If true, unsubscribe, otherwise just leave.\n   * @param {number} delay - time in milliseconds to delay leave request.\n   */\n  leaveDelayed(unsub, delay) {\n    clearTimeout(this._delayedLeaveTimer);\n    this._delayedLeaveTimer = setTimeout(_ => {\n      this._delayedLeaveTimer = null;\n      this.leave(unsub)\n    }, delay);\n  }\n\n  /**\n   * Request topic metadata from the server.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.GetQuery} request parameters\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  getMeta(params) {\n    // Send {get} message, return promise.\n    return this._tinode.getMeta(this.name, params);\n  }\n\n  /**\n   * Request more messages from the server\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} limit number of messages to get.\n   * @param {boolean} forward if true, request newer messages.\n   */\n  getMessagesPage(limit, forward) {\n    let query = forward ?\n      this.startMetaQuery().withLaterData(limit) :\n      this.startMetaQuery().withEarlierData(limit);\n\n    // First try fetching from DB, then from the server.\n    return this._loadMessages(this._tinode._db, query.extract('data'))\n      .then((count) => {\n        if (count == limit) {\n          // Got enough messages from local cache.\n          return Promise.resolve({\n            topic: this.name,\n            code: 200,\n            params: {\n              count: count\n            }\n          });\n        }\n\n        // Reduce the count of requested messages.\n        limit -= count;\n        // Update query with new values loaded from DB.\n        query = forward ? this.startMetaQuery().withLaterData(limit) :\n          this.startMetaQuery().withEarlierData(limit);\n        let promise = this.getMeta(query.build());\n        if (!forward) {\n          promise = promise.then(ctrl => {\n            if (ctrl && ctrl.params && !ctrl.params.count) {\n              this._noEarlierMsgs = true;\n            }\n          });\n        }\n        return promise;\n      });\n  }\n  /**\n   * Update topic metadata.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.SetParams} params parameters to update.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  setMeta(params) {\n    if (params.tags) {\n      params.tags = normalizeArray(params.tags);\n    }\n    // Send Set message, handle async response.\n    return this._tinode.setMeta(this.name, params)\n      .then(ctrl => {\n        if (ctrl && ctrl.code >= 300) {\n          // Not modified\n          return ctrl;\n        }\n\n        if (params.sub) {\n          params.sub.topic = this.name;\n          if (ctrl.params && ctrl.params.acs) {\n            params.sub.acs = ctrl.params.acs;\n            params.sub.updated = ctrl.ts;\n          }\n          if (!params.sub.user) {\n            // This is a subscription update of the current user.\n            // Assign user ID otherwise the update will be ignored by _processMetaSub.\n            params.sub.user = this._tinode.getCurrentUserID();\n            if (!params.desc) {\n              // Force update to topic's asc.\n              params.desc = {};\n            }\n          }\n          params.sub._noForwarding = true;\n          this._processMetaSub([params.sub]);\n        }\n\n        if (params.desc) {\n          if (ctrl.params && ctrl.params.acs) {\n            params.desc.acs = ctrl.params.acs;\n            params.desc.updated = ctrl.ts;\n          }\n          this._processMetaDesc(params.desc);\n        }\n\n        if (params.tags) {\n          this._processMetaTags(params.tags);\n        }\n        if (params.cred) {\n          this._processMetaCreds([params.cred], true);\n        }\n\n        return ctrl;\n      });\n  }\n  /**\n   * Update access mode of the current user or of another topic subsriber.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - UID of the user to update or null to update current user.\n   * @param {string} update - the update value, full or delta.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  updateMode(uid, update) {\n    const user = uid ? this.subscriber(uid) : null;\n    const am = user ?\n      user.acs.updateGiven(update).getGiven() :\n      this.getAccessMode().updateWant(update).getWant();\n\n    return this.setMeta({\n      sub: {\n        user: uid,\n        mode: am\n      }\n    });\n  }\n  /**\n   * Create new topic subscription. Wrapper for {@link Tinode#setMeta}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - ID of the user to invite\n   * @param {string=} mode - Access mode. <code>null</code> means to use default.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  invite(uid, mode) {\n    return this.setMeta({\n      sub: {\n        user: uid,\n        mode: mode\n      }\n    });\n  }\n  /**\n   * Archive or un-archive the topic. Wrapper for {@link Tinode#setMeta}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} arch - true to archive the topic, false otherwise.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  archive(arch) {\n    if (this.private && (!this.private.arch == !arch)) {\n      return Promise.resolve(arch);\n    }\n    return this.setMeta({\n      desc: {\n        private: {\n          arch: arch ? true : Const.DEL_CHAR\n        }\n      }\n    });\n  }\n  /**\n   * Delete messages. Hard-deleting messages requires Owner permission.\n   * Wrapper for {@link Tinode#delMessages}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.DelRange[]} ranges - Ranges of message IDs to delete.\n   * @param {boolean=} hard - Hard or soft delete\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delMessages(ranges, hard) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot delete messages in inactive topic\"));\n    }\n\n    // Sort ranges in accending order by low, the descending by hi.\n    ranges.sort((r1, r2) => {\n      if (r1.low < r2.low) {\n        return true;\n      }\n      if (r1.low == r2.low) {\n        return !r2.hi || (r1.hi >= r2.hi);\n      }\n      return false;\n    });\n\n    // Remove pending messages from ranges possibly clipping some ranges.\n    let tosend = ranges.reduce((out, r) => {\n      if (r.low < Const.LOCAL_SEQID) {\n        if (!r.hi || r.hi < Const.LOCAL_SEQID) {\n          out.push(r);\n        } else {\n          // Clip hi to max allowed value.\n          out.push({\n            low: r.low,\n            hi: this._maxSeq + 1\n          });\n        }\n      }\n      return out;\n    }, []);\n\n    // Send {del} message, return promise\n    let result;\n    if (tosend.length > 0) {\n      result = this._tinode.delMessages(this.name, tosend, hard);\n    } else {\n      result = Promise.resolve({\n        params: {\n          del: 0\n        }\n      });\n    }\n    // Update local cache.\n    return result.then(ctrl => {\n      if (ctrl.params.del > this._maxDel) {\n        this._maxDel = ctrl.params.del;\n      }\n\n      ranges.forEach((r) => {\n        if (r.hi) {\n          this.flushMessageRange(r.low, r.hi);\n        } else {\n          this.flushMessage(r.low);\n        }\n      });\n\n      if (this.onData) {\n        // Calling with no parameters to indicate the messages were deleted.\n        this.onData();\n      }\n      return ctrl;\n    });\n  }\n  /**\n   * Delete all messages. Hard-deleting messages requires Deleter permission.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} hardDel - true if messages should be hard-deleted.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delMessagesAll(hardDel) {\n    if (!this._maxSeq || this._maxSeq <= 0) {\n      // There are no messages to delete.\n      return Promise.resolve();\n    }\n    return this.delMessages([{\n      low: 1,\n      hi: this._maxSeq + 1,\n      _all: true\n    }], hardDel);\n  }\n\n  /**\n   * Delete multiple messages defined by their IDs. Hard-deleting messages requires Deleter permission.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Array.<number>} list - list of seq IDs to delete.\n   * @param {boolean=} hardDel - true if messages should be hard-deleted.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delMessagesList(list, hardDel) {\n    // Sort the list in ascending order\n    list.sort((a, b) => a - b);\n    // Convert the array of IDs to ranges.\n    let ranges = list.reduce((out, id) => {\n      if (out.length == 0) {\n        // First element.\n        out.push({\n          low: id\n        });\n      } else {\n        let prev = out[out.length - 1];\n        if ((!prev.hi && (id != prev.low + 1)) || (id > prev.hi)) {\n          // New range.\n          out.push({\n            low: id\n          });\n        } else {\n          // Expand existing range.\n          prev.hi = prev.hi ? Math.max(prev.hi, id + 1) : id + 1;\n        }\n      }\n      return out;\n    }, []);\n    // Send {del} message, return promise\n    return this.delMessages(ranges, hardDel);\n  }\n\n  /**\n   * Delete original message and edited variants. Hard-deleting messages requires Deleter permission.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - original seq ID of the message to delete.\n   * @param {boolean=} hardDel - true if messages should be hard-deleted.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  delMessagesEdits(seq, hardDel) {\n    const list = [seq];\n    this.messageVersions(seq, msg => list.push(msg.seq));\n    // Send {del} message, return promise\n    return this.delMessagesList(list, hardDel);\n  }\n\n  /**\n   * Delete topic. Requires Owner permission. Wrapper for {@link Tinode#delTopic}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} hard - had-delete topic.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to the request.\n   */\n  delTopic(hard) {\n    if (this._deleted) {\n      // The topic is already deleted at the server, just remove from DB.\n      this._gone();\n      return Promise.resolve(null);\n    }\n\n    return this._tinode.delTopic(this.name, hard).then(ctrl => {\n      this._deleted = true;\n      this._resetSub();\n      this._gone();\n      return ctrl;\n    });\n  }\n  /**\n   * Delete subscription. Requires Share permission. Wrapper for {@link Tinode#delSubscription}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} user - ID of the user to remove subscription for.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  delSubscription(user) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot delete subscription in inactive topic\"));\n    }\n    // Send {del} message, return promise\n    return this._tinode.delSubscription(this.name, user).then(ctrl => {\n      // Remove the object from the subscription cache;\n      delete this._users[user];\n      // Notify listeners\n      if (this.onSubsUpdated) {\n        this.onSubsUpdated(Object.keys(this._users));\n      }\n      return ctrl;\n    });\n  }\n  /**\n   * Send a read/recv notification.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} what - what notification to send: <code>recv</code>, <code>read</code>.\n   * @param {number} seq - ID or the message read or received.\n   */\n  note(what, seq) {\n    if (!this._attached) {\n      // Cannot sending {note} on an inactive topic\".\n      return;\n    }\n\n    // Update local cache with the new count.\n    const user = this._users[this._tinode.getCurrentUserID()];\n    let update = false;\n    if (user) {\n      // Self-subscription is found.\n      if (!user[what] || user[what] < seq) {\n        user[what] = seq;\n        update = true;\n      }\n    } else {\n      // Self-subscription is not found.\n      update = (this[what] | 0) < seq;\n    }\n\n    if (update) {\n      // Send notification to the server.\n      this._tinode.note(this.name, what, seq);\n      // Update locally cached contact with the new count.\n      this._updateReadRecv(what, seq);\n\n      if (this.acs != null && !this.acs.isMuted()) {\n        const me = this._tinode.getMeTopic();\n        // Sent a notification to 'me' listeners.\n        me._refreshContact(what, this);\n      }\n    }\n  }\n\n  /**\n   * Send a 'recv' receipt. Wrapper for {@link Tinode#noteRecv}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - ID of the message to aknowledge.\n   */\n  noteRecv(seq) {\n    this.note('recv', seq);\n  }\n  /**\n   * Send a 'read' receipt. Wrapper for {@link Tinode#noteRead}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - ID of the message to aknowledge or 0/undefined to acknowledge the latest messages.\n   */\n  noteRead(seq) {\n    seq = seq || this._maxSeq;\n    if (seq > 0) {\n      this.note('read', seq);\n    }\n  }\n  /**\n   * Send a key-press notification. Wrapper for {@link Tinode#noteKeyPress}.\n   * @memberof Tinode.Topic#\n   */\n  noteKeyPress() {\n    if (this._attached) {\n      this._tinode.noteKeyPress(this.name);\n    } else {\n      this._tinode.logger(\"INFO: Cannot send notification in inactive topic\");\n    }\n  }\n  /**\n   * Send a notification than a video or audio message is . Wrapper for {@link Tinode#noteKeyPress}.\n   * @memberof Tinode.Topic#\n   * @param audioOnly - true if the recording is audio-only, false if it's a video recording.\n   */\n  noteRecording(audioOnly) {\n    if (this._attached) {\n      this._tinode.noteKeyPress(this.name, audioOnly ? 'kpa' : 'kpv');\n    } else {\n      this._tinode.logger(\"INFO: Cannot send notification in inactive topic\");\n    }\n  }\n\n  /**\n   * Send a {note what='call'}. Wrapper for {@link Tinode#videoCall}.\n   * @memberof Tinode#\n   *\n   * @param {string} evt - Call event.\n   * @param {int} seq - ID of the call message the event pertains to.\n   * @param {string} payload - Payload associated with this event (e.g. SDP string).\n   *\n   * @returns {Promise} Promise (for some call events) which will\n   *                    be resolved/rejected on receiving server reply\n   */\n  videoCall(evt, seq, payload) {\n    if (!this._attached && !['ringing', 'hang-up'].includes(evt)) {\n      // Cannot {call} on an inactive topic\".\n      return;\n    }\n    return this._tinode.videoCall(this.name, seq, evt, payload);\n  }\n\n  // Update cached read/recv/unread counts.\n  _updateReadRecv(what, seq, ts) {\n    let oldVal, doUpdate = false;\n\n    seq = seq | 0;\n    this.seq = this.seq | 0;\n    this.read = this.read | 0;\n    this.recv = this.recv | 0;\n    switch (what) {\n      case 'recv':\n        oldVal = this.recv;\n        this.recv = Math.max(this.recv, seq);\n        doUpdate = (oldVal != this.recv);\n        break;\n      case 'read':\n        oldVal = this.read;\n        this.read = Math.max(this.read, seq);\n        doUpdate = (oldVal != this.read);\n        break;\n      case 'msg':\n        oldVal = this.seq;\n        this.seq = Math.max(this.seq, seq);\n        if (!this.touched || this.touched < ts) {\n          this.touched = ts;\n        }\n        doUpdate = (oldVal != this.seq);\n        break;\n    }\n\n    // Sanity checks.\n    if (this.recv < this.read) {\n      this.recv = this.read;\n      doUpdate = true;\n    }\n    if (this.seq < this.recv) {\n      this.seq = this.recv;\n      if (!this.touched || this.touched < ts) {\n        this.touched = ts;\n      }\n      doUpdate = true;\n    }\n    this.unread = this.seq - this.read;\n    return doUpdate;\n  }\n  /**\n   * Get user description from global cache. The user does not need to be a\n   * subscriber of this topic.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - ID of the user to fetch.\n   * @return {Object} user description or undefined.\n   */\n  userDesc(uid) {\n    // TODO: handle asynchronous requests\n    const user = this._cacheGetUser(uid);\n    if (user) {\n      return user; // Promise.resolve(user)\n    }\n  }\n  /**\n   * Get description of the p2p peer from subscription cache.\n   * @memberof Tinode.Topic#\n   *\n   * @return {Object} peer's description or undefined.\n   */\n  p2pPeerDesc() {\n    if (!this.isP2PType()) {\n      return undefined;\n    }\n    return this._users[this.name];\n  }\n  /**\n   * Iterate over cached subscribers. If callback is undefined, use this.onMetaSub.\n   * @memberof Tinode.Topic#\n   *\n   * @param {function} callback - Callback which will receive subscribers one by one.\n   * @param {Object=} context - Value of `this` inside the `callback`.\n   */\n  subscribers(callback, context) {\n    const cb = (callback || this.onMetaSub);\n    if (cb) {\n      for (let idx in this._users) {\n        cb.call(context, this._users[idx], idx, this._users);\n      }\n    }\n  }\n  /**\n   * Get a copy of cached tags.\n   * @memberof Tinode.Topic#\n   *\n   * @return {Array.<string>} a copy of tags\n   */\n  tags() {\n    // Return a copy.\n    return this._tags.slice(0);\n  }\n  /**\n   * Get cached subscription for the given user ID.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} uid - id of the user to query for\n   * @return user description or undefined.\n   */\n  subscriber(uid) {\n    return this._users[uid];\n  }\n  /**\n   * Iterate over versions of a message: call <code>callback</code> for each version (excluding original).\n   * If <code>callback</code> is undefined, does nothing.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} origSeq - seq ID of the original message.\n   * @param {Tinode.ForEachCallbackType} callback - Callback which will receive messages one by one. See {@link Tinode.CBuffer#forEach}\n   * @param {Object} context - Value of `this` inside the `callback`.\n   */\n  messageVersions(origSeq, callback, context) {\n    if (!callback) {\n      // No callback? We are done then.\n      return;\n    }\n    const versions = this._messageVersions[origSeq];\n    if (!versions) {\n      return;\n    }\n    versions.forEach(callback, undefined, undefined, context);\n  }\n  /**\n   * Iterate over cached messages: call <code>callback</code> for each message in the range [sinceIdx, beforeIdx).\n   * If <code>callback</code> is undefined, use <code>this.onData</code>.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Tinode.ForEachCallbackType} callback - Callback which will receive messages one by one. See {@link Tinode.CBuffer#forEach}\n   * @param {number} sinceId - Optional seqId to start iterating from (inclusive).\n   * @param {number} beforeId - Optional seqId to stop iterating before it is reached (exclusive).\n   * @param {Object} context - Value of `this` inside the `callback`.\n   */\n  messages(callback, sinceId, beforeId, context) {\n    const cb = (callback || this.onData);\n    if (cb) {\n      const startIdx = typeof sinceId == 'number' ? this._messages.find({\n        seq: sinceId\n      }, true) : undefined;\n      const beforeIdx = typeof beforeId == 'number' ? this._messages.find({\n        seq: beforeId\n      }, true) : undefined;\n      if (startIdx != -1 && beforeIdx != -1) {\n        // Step 1. Filter out all replacement messages and\n        // save displayable messages in a temporary buffer.\n        let msgs = [];\n        this._messages.forEach((msg, unused1, unused2, i) => {\n          if (this._isReplacementMsg(msg)) {\n            // Skip replacements.\n            return;\n          }\n          // In case the massage was edited, replace timestamp of the version with the original's timestamp.\n          const latest = this.latestMsgVersion(msg.seq) || msg;\n          if (!latest._origTs) {\n            latest._origTs = latest.ts;\n            latest._origSeq = latest.seq;\n            latest.ts = msg.ts;\n            latest.seq = msg.seq;\n          }\n          msgs.push({\n            data: latest,\n            idx: i\n          });\n        }, startIdx, beforeIdx, {});\n        // Step 2. Loop over displayble messages invoking cb on each of them.\n        msgs.forEach((val, i) => {\n          cb.call(context, val.data,\n            (i > 0 ? msgs[i - 1].data : undefined),\n            (i < msgs.length - 1 ? msgs[i + 1].data : undefined), val.idx);\n        });\n      }\n    }\n  }\n  /**\n   * Get the message from cache by <code>seq</code>.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - message seqId to search for.\n   * @returns {Object} the message with the given <code>seq</code> or <code>undefined</code>, if no such message is found.\n   */\n  findMessage(seq) {\n    const idx = this._messages.find({\n      seq: seq\n    });\n    if (idx >= 0) {\n      return this._messages.getAt(idx);\n    }\n    return undefined;\n  }\n  /**\n   * Get the most recent message from cache. This method counts all messages, including deleted ranges.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Object} the most recent cached message or <code>undefined</code>, if no messages are cached.\n   */\n  latestMessage() {\n    return this._messages.getLast();\n  }\n  /**\n   * Get the latest version for message.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - original seq ID of the message.\n   * @returns {Object} the latest version of the message or null if message not found.\n   */\n  latestMsgVersion(seq) {\n    const versions = this._messageVersions[seq];\n    return versions ? versions.getLast() : null;\n  }\n  /**\n   * Get the maximum cached seq ID.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} the greatest seq ID in cache.\n   */\n  maxMsgSeq() {\n    return this._maxSeq;\n  }\n  /**\n   * Get the maximum deletion ID.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} the greatest deletion ID.\n   */\n  maxClearId() {\n    return this._maxDel;\n  }\n  /**\n   * Get the number of messages in the cache.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {number} count of cached messages.\n   */\n  messageCount() {\n    return this._messages.length();\n  }\n  /**\n   * Iterate over cached unsent messages. Wraps {@link Tinode.Topic#messages}.\n   * @memberof Tinode.Topic#\n   *\n   * @param {function} callback - Callback which will receive messages one by one. See {@link Tinode.CBuffer#forEach}\n   * @param {Object} context - Value of <code>this</code> inside the <code>callback</code>.\n   */\n  queuedMessages(callback, context) {\n    if (!callback) {\n      throw new Error(\"Callback must be provided\");\n    }\n    this.messages(callback, Const.LOCAL_SEQID, undefined, context);\n  }\n  /**\n   * Get the number of topic subscribers who marked this message as either recv or read\n   * Current user is excluded from the count.\n   * @memberof Tinode.Topic#\n   *\n   * @param {string} what - what action to consider: received <code>\"recv\"</code> or read <code>\"read\"</code>.\n   * @param {number} seq - ID or the message read or received.\n   *\n   * @returns {number} the number of subscribers who marked the message with the given ID as read or received.\n   */\n  msgReceiptCount(what, seq) {\n    let count = 0;\n    if (seq > 0) {\n      const me = this._tinode.getCurrentUserID();\n      for (let idx in this._users) {\n        const user = this._users[idx];\n        if (user.user !== me && user[what] >= seq) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n  /**\n   * Get the number of topic subscribers who marked this message (and all older messages) as read.\n   * The current user is excluded from the count.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - message id to check.\n   * @returns {number} number of subscribers who claim to have received the message.\n   */\n  msgReadCount(seq) {\n    return this.msgReceiptCount('read', seq);\n  }\n  /**\n   * Get the number of topic subscribers who marked this message (and all older messages) as received.\n   * The current user is excluded from the count.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seq - Message id to check.\n   * @returns {number} Number of subscribers who claim to have received the message.\n   */\n  msgRecvCount(seq) {\n    return this.msgReceiptCount('recv', seq);\n  }\n  /**\n   * Check if cached message IDs indicate that the server may have more messages.\n   * @memberof Tinode.Topic#\n   *\n   * @param {boolean} newer - if <code>true</code>, check for newer messages only.\n   */\n  msgHasMoreMessages(newer) {\n    return newer ? this.seq > this._maxSeq :\n      // _minSeq could be more than 1, but earlier messages could have been deleted.\n      (this._minSeq > 1 && !this._noEarlierMsgs);\n  }\n  /**\n   * Check if the given seq Id is id of the most recent message.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seqId id of the message to check\n   */\n  isNewMessage(seqId) {\n    return this._maxSeq <= seqId;\n  }\n  /**\n   * Remove one message from local cache.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seqId id of the message to remove from cache.\n   * @returns {Message} removed message or undefined if such message was not found.\n   */\n  flushMessage(seqId) {\n    const idx = this._messages.find({\n      seq: seqId\n    });\n    delete this._messageVersions[seqId];\n    if (idx >= 0) {\n      this._tinode._db.remMessages(this.name, seqId);\n      return this._messages.delAt(idx);\n    }\n    return undefined;\n  }\n  /**\n   * Remove a range of messages from the local cache.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} fromId seq ID of the first message to remove (inclusive).\n   * @param {number} untilId seqID of the last message to remove (exclusive).\n   *\n   * @returns {Message[]} array of removed messages (could be empty).\n   */\n  flushMessageRange(fromId, untilId) {\n    // Remove range from persistent cache.\n    this._tinode._db.remMessages(this.name, fromId, untilId);\n\n    // Remove all versions keyed by IDs in the range.\n    for (let i = fromId; i < untilId; i++) {\n      delete this._messageVersions[i];\n    }\n\n    // start, end: find insertion points (nearest == true).\n    const since = this._messages.find({\n      seq: fromId\n    }, true);\n    return since >= 0 ? this._messages.delRange(since, this._messages.find({\n      seq: untilId\n    }, true)) : [];\n  }\n  /**\n   * Update message's seqId.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Object} pub message object.\n   * @param {number} newSeqId new seq id for pub.\n   */\n  swapMessageId(pub, newSeqId) {\n    const idx = this._messages.find(pub);\n    const numMessages = this._messages.length();\n    if (0 <= idx && idx < numMessages) {\n      // Remove message with the old seq ID.\n      this._messages.delAt(idx);\n      this._tinode._db.remMessages(this.name, pub.seq);\n      // Add message with the new seq ID.\n      pub.seq = newSeqId;\n      this._messages.put(pub);\n      this._tinode._db.addMessage(pub);\n    }\n  }\n  /**\n   * Attempt to stop message from being sent.\n   * @memberof Tinode.Topic#\n   *\n   * @param {number} seqId id of the message to stop sending and remove from cache.\n   *\n   * @returns {boolean} <code>true</code> if message was cancelled, <code>false</code> otherwise.\n   */\n  cancelSend(seqId) {\n    const idx = this._messages.find({\n      seq: seqId\n    });\n    if (idx >= 0) {\n      const msg = this._messages.getAt(idx);\n      const status = this.msgStatus(msg);\n      if (status == Const.MESSAGE_STATUS_QUEUED || status == Const.MESSAGE_STATUS_FAILED) {\n        this._tinode._db.remMessages(this.name, seqId);\n        msg._cancelled = true;\n        this._messages.delAt(idx);\n        if (this.onData) {\n          // Calling with no parameters to indicate the message was deleted.\n          this.onData();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Get type of the topic: me, p2p, grp, fnd...\n   * @memberof Tinode.Topic#\n   *\n   * @returns {string} One of 'me', 'p2p', 'grp', 'fnd', 'sys' or <code>undefined</code>.\n   */\n  getType() {\n    return Topic.topicType(this.name);\n  }\n  /**\n   * Get current user's access mode of the topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Tinode.AccessMode} - user's access mode\n   */\n  getAccessMode() {\n    return this.acs;\n  }\n  /**\n   * Set current user's access mode of the topic.\n   * @memberof Tinode.Topic#\n   *\n   * @param {AccessMode | Object} acs - access mode to set.\n   */\n  setAccessMode(acs) {\n    return this.acs = new AccessMode(acs);\n  }\n  /**\n   * Get topic's default access mode.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Tinode.DefAcs} - access mode, such as {auth: `RWP`, anon: `N`}.\n   */\n  getDefaultAccess() {\n    return this.defacs;\n  }\n  /**\n   * Initialize new meta {@link Tinode.GetQuery} builder. The query is attched to the current topic.\n   * It will not work correctly if used with a different topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {Tinode.MetaGetBuilder} query attached to the current topic.\n   */\n  startMetaQuery() {\n    return new MetaGetBuilder(this);\n  }\n  /**\n   * Check if topic is archived, i.e. private.arch == true.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is archived, <code>false</code> otherwise.\n   */\n  isArchived() {\n    return this.private && !!this.private.arch;\n  }\n  /**\n   * Check if topic is a 'me' topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a 'me' topic, <code>false</code> otherwise.\n   */\n  isMeType() {\n    return Topic.isMeTopicName(this.name);\n  }\n  /**\n   * Check if topic is a channel.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a channel, <code>false</code> otherwise.\n   */\n  isChannelType() {\n    return Topic.isChannelTopicName(this.name);\n  }\n  /**\n   * Check if topic is a group topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a group, <code>false</code> otherwise.\n   */\n  isGroupType() {\n    return Topic.isGroupTopicName(this.name);\n  }\n  /**\n   * Check if topic is a p2p topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a p2p topic, <code>false</code> otherwise.\n   */\n  isP2PType() {\n    return Topic.isP2PTopicName(this.name);\n  }\n  /**\n   * Check if topic is a communication topic, i.e. a group or p2p topic.\n   * @memberof Tinode.Topic#\n   *\n   * @returns {boolean} - <code>true</code> if topic is a p2p or group topic, <code>false</code> otherwise.\n   */\n  isCommType() {\n    return Topic.isCommTopicName(this.name);\n  }\n  /**\n   * Get status (queued, sent, received etc) of a given message in the context\n   * of this topic.\n   * @memberof Tinode.Topic#\n   *\n   * @param {Message} msg - message to check for status.\n   * @param {boolean} upd - update chached message status.\n   *\n   * @returns message status constant.\n   */\n  msgStatus(msg, upd) {\n    let status = Const.MESSAGE_STATUS_NONE;\n    if (this._tinode.isMe(msg.from)) {\n      if (msg._sending) {\n        status = Const.MESSAGE_STATUS_SENDING;\n      } else if (msg._failed || msg._cancelled) {\n        status = Const.MESSAGE_STATUS_FAILED;\n      } else if (msg.seq >= Const.LOCAL_SEQID) {\n        status = Const.MESSAGE_STATUS_QUEUED;\n      } else if (this.msgReadCount(msg.seq) > 0) {\n        status = Const.MESSAGE_STATUS_READ;\n      } else if (this.msgRecvCount(msg.seq) > 0) {\n        status = Const.MESSAGE_STATUS_RECEIVED;\n      } else if (msg.seq > 0) {\n        status = Const.MESSAGE_STATUS_SENT;\n      }\n      // } else if (msg._status == Const.MESSAGE_STATUS_DEL_RANGE) {\n      //   status == Const.MESSAGE_STATUS_DEL_RANGE;\n    } else {\n      status = Const.MESSAGE_STATUS_TO_ME;\n    }\n\n    if (upd && msg._status != status) {\n      msg._status = status;\n      this._tinode._db.updMessageStatus(this.name, msg.seq, status);\n    }\n\n    return status;\n  }\n\n  // Returns true if pub is meant to replace another message (e.g. original message was edited).\n  _isReplacementMsg(pub) {\n    return pub.head && pub.head.replace;\n  }\n\n  // If msg is a replacement for another message, save the msg in the message versions cache\n  // as a newer version for the message it's supposed to replace.\n  _maybeUpdateMessageVersionsCache(msg) {\n    if (!this._isReplacementMsg(msg)) {\n      // Check if this message is the original in the chain of edits and if so\n      // ensure all version have the same sender.\n      if (this._messageVersions[msg.seq]) {\n        // Remove versions with different 'from'.\n        this._messageVersions[msg.seq].filter(version => version.from == msg.from);\n        if (this._messageVersions[msg.seq].isEmpty()) {\n          delete this._messageVersions[msg.seq];\n        }\n      }\n      return;\n    }\n\n    const targetSeq = parseInt(msg.head.replace.split(':')[1]);\n    if (targetSeq > msg.seq) {\n      // Substitutes are supposed to have higher seq ids.\n      return;\n    }\n    const targetMsg = this.findMessage(targetSeq);\n    if (targetMsg && targetMsg.from != msg.from) {\n      // Substitute cannot change the sender.\n      return;\n    }\n    const versions = this._messageVersions[targetSeq] || new CBuffer((a, b) => {\n      return a.seq - b.seq;\n    }, true);\n    versions.put(msg);\n    this._messageVersions[targetSeq] = versions;\n  }\n\n  // Process data message\n  _routeData(data) {\n    if (data.content) {\n      if (!this.touched || this.touched < data.ts) {\n        this.touched = data.ts;\n        this._tinode._db.updTopic(this);\n      }\n    }\n\n    if (data.seq > this._maxSeq) {\n      this._maxSeq = data.seq;\n      this.msgStatus(data, true);\n      // Ackn receiving the message.\n      clearTimeout(this._recvNotificationTimer);\n      this._recvNotificationTimer = setTimeout(_ => {\n        this._recvNotificationTimer = null;\n        this.noteRecv(this._maxSeq);\n      }, Const.RECV_TIMEOUT);\n    }\n\n    if (data.seq < this._minSeq || this._minSeq == 0) {\n      this._minSeq = data.seq;\n    }\n\n    const outgoing = ((!this.isChannelType() && !data.from) || this._tinode.isMe(data.from));\n\n    if (data.head && data.head.webrtc && data.head.mime == Drafty.getContentType() && data.content) {\n      // Rewrite VC body with info from the headers.\n      data.content = Drafty.updateVideoCall(data.content, {\n        state: data.head.webrtc,\n        duration: data.head['webrtc-duration'],\n        incoming: !outgoing,\n      });\n    }\n\n    if (!data._noForwarding) {\n      this._messages.put(data);\n      this._tinode._db.addMessage(data);\n      this._maybeUpdateMessageVersionsCache(data);\n    }\n\n    if (this.onData) {\n      this.onData(data);\n    }\n\n    // Update locally cached contact with the new message count.\n    const what = outgoing ? 'read' : 'msg';\n    this._updateReadRecv(what, data.seq, data.ts);\n    // Notify 'me' listeners of the change.\n    this._tinode.getMeTopic()._refreshContact(what, this);\n  }\n\n  // Process metadata message\n  _routeMeta(meta) {\n    if (meta.desc) {\n      this._processMetaDesc(meta.desc);\n    }\n    if (meta.sub && meta.sub.length > 0) {\n      this._processMetaSub(meta.sub);\n    }\n    if (meta.del) {\n      this._processDelMessages(meta.del.clear, meta.del.delseq);\n    }\n    if (meta.tags) {\n      this._processMetaTags(meta.tags);\n    }\n    if (meta.cred) {\n      this._processMetaCreds(meta.cred);\n    }\n    if (this.onMeta) {\n      this.onMeta(meta);\n    }\n  }\n  // Process presence change message\n  _routePres(pres) {\n    let user, uid;\n    switch (pres.what) {\n      case 'del':\n        // Delete cached messages.\n        this._processDelMessages(pres.clear, pres.delseq);\n        break;\n      case 'on':\n      case 'off':\n        // Update online status of a subscription.\n        user = this._users[pres.src];\n        if (user) {\n          user.online = pres.what == 'on';\n        } else {\n          this._tinode.logger(\"WARNING: Presence update for an unknown user\", this.name, pres.src);\n        }\n        break;\n      case 'term':\n        // Attachment to topic is terminated probably due to cluster rehashing.\n        this._resetSub();\n        break;\n      case 'upd':\n        // A topic subscriber has updated his description.\n        // Issue {get sub} only if the current user has no p2p topics with the updated user (p2p name is not in cache).\n        // Otherwise 'me' will issue a {get desc} request.\n        if (pres.src && !this._tinode.isTopicCached(pres.src)) {\n          this.getMeta(this.startMetaQuery().withLaterOneSub(pres.src).build());\n        }\n        break;\n      case 'acs':\n        uid = pres.src || this._tinode.getCurrentUserID();\n        user = this._users[uid];\n        if (!user) {\n          // Update for an unknown user: notification of a new subscription.\n          const acs = new AccessMode().updateAll(pres.dacs);\n          if (acs && acs.mode != AccessMode._NONE) {\n            user = this._cacheGetUser(uid);\n            if (!user) {\n              user = {\n                user: uid,\n                acs: acs\n              };\n              this.getMeta(this.startMetaQuery().withOneSub(undefined, uid).build());\n            } else {\n              user.acs = acs;\n            }\n            user.updated = new Date();\n            this._processMetaSub([user]);\n          }\n        } else {\n          // Known user\n          user.acs.updateAll(pres.dacs);\n          // Update user's access mode.\n          this._processMetaSub([{\n            user: uid,\n            updated: new Date(),\n            acs: user.acs\n          }]);\n        }\n        break;\n      default:\n        this._tinode.logger(\"INFO: Ignored presence update\", pres.what);\n    }\n\n    if (this.onPres) {\n      this.onPres(pres);\n    }\n  }\n  // Process {info} message\n  _routeInfo(info) {\n    switch (info.what) {\n      case 'recv':\n      case 'read':\n        const user = this._users[info.from];\n        if (user) {\n          user[info.what] = info.seq;\n          if (user.recv < user.read) {\n            user.recv = user.read;\n          }\n        }\n        const msg = this.latestMessage();\n        if (msg) {\n          this.msgStatus(msg, true);\n        }\n\n        // If this is an update from the current user, update the cache with the new count.\n        if (this._tinode.isMe(info.from)) {\n          this._updateReadRecv(info.what, info.seq);\n        }\n\n        // Notify 'me' listener of the status change.\n        this._tinode.getMeTopic()._refreshContact(info.what, this);\n        break;\n      case 'kp':\n        // Do nothing.\n        break;\n      case 'call':\n        // Do nothing here.\n        break;\n      default:\n        this._tinode.logger(\"INFO: Ignored info update\", info.what);\n    }\n\n    if (this.onInfo) {\n      this.onInfo(info);\n    }\n  }\n  // Called by Tinode when meta.desc packet is received.\n  // Called by 'me' topic on contact update (desc._noForwarding is true).\n  _processMetaDesc(desc) {\n    if (this.isP2PType()) {\n      // Synthetic desc may include defacs for p2p topics which is useless.\n      // Remove it.\n      delete desc.defacs;\n\n      // Update to p2p desc is the same as user update. Update cached user.\n      this._tinode._db.updUser(this.name, desc.public);\n    }\n\n    // Copy parameters from desc object to this topic.\n    mergeObj(this, desc);\n    // Update persistent cache.\n    this._tinode._db.updTopic(this);\n\n    // Notify 'me' listener, if available:\n    if (this.name !== Const.TOPIC_ME && !desc._noForwarding) {\n      const me = this._tinode.getMeTopic();\n      if (me.onMetaSub) {\n        me.onMetaSub(this);\n      }\n      if (me.onSubsUpdated) {\n        me.onSubsUpdated([this.name], 1);\n      }\n    }\n\n    if (this.onMetaDesc) {\n      this.onMetaDesc(this);\n    }\n  }\n  // Called by Tinode when meta.sub is recived or in response to received\n  // {ctrl} after setMeta-sub.\n  _processMetaSub(subs) {\n    for (let idx in subs) {\n      const sub = subs[idx];\n\n      // Fill defaults.\n      sub.online = !!sub.online;\n      // Update timestamp of the most recent subscription update.\n      this._lastSubsUpdate = new Date(Math.max(this._lastSubsUpdate, sub.updated));\n\n      let user = null;\n      if (!sub.deleted) {\n        // If this is a change to user's own permissions, update them in topic too.\n        // Desc will update 'me' topic.\n        if (this._tinode.isMe(sub.user) && sub.acs) {\n          this._processMetaDesc({\n            updated: sub.updated,\n            touched: sub.touched,\n            acs: sub.acs\n          });\n        }\n        user = this._updateCachedUser(sub.user, sub);\n      } else {\n        // Subscription is deleted, remove it from topic (but leave in Users cache)\n        delete this._users[sub.user];\n        user = sub;\n      }\n\n      if (this.onMetaSub) {\n        this.onMetaSub(user);\n      }\n    }\n\n    if (this.onSubsUpdated) {\n      this.onSubsUpdated(Object.keys(this._users));\n    }\n  }\n  // Called by Tinode when meta.tags is recived.\n  _processMetaTags(tags) {\n    if (tags.length == 1 && tags[0] == Const.DEL_CHAR) {\n      tags = [];\n    }\n    this._tags = tags;\n    if (this.onTagsUpdated) {\n      this.onTagsUpdated(tags);\n    }\n  }\n  // Do nothing for topics other than 'me'\n  _processMetaCreds(creds) {}\n  // Delete cached messages and update cached transaction IDs\n  _processDelMessages(clear, delseq) {\n    this._maxDel = Math.max(clear, this._maxDel);\n    this.clear = Math.max(clear, this.clear);\n    const topic = this;\n    let count = 0;\n    if (Array.isArray(delseq)) {\n      delseq.forEach(function(range) {\n        if (!range.hi) {\n          count++;\n          topic.flushMessage(range.low);\n        } else {\n          for (let i = range.low; i < range.hi; i++) {\n            count++;\n            topic.flushMessage(i);\n          }\n        }\n      });\n    }\n\n    if (count > 0) {\n      // this._updateDeletedRanges();\n\n      if (this.onData) {\n        this.onData();\n      }\n    }\n  }\n  // Topic is informed that the entire response to {get what=data} has been received.\n  _allMessagesReceived(count) {\n\n    if (this.onAllMessagesReceived) {\n      this.onAllMessagesReceived(count);\n    }\n  }\n  // Reset subscribed state\n  _resetSub() {\n    this._attached = false;\n  }\n  // This topic is either deleted or unsubscribed from.\n  _gone() {\n    this._messages.reset();\n    this._tinode._db.remMessages(this.name);\n    this._users = {};\n    this.acs = new AccessMode(null);\n    this.private = null;\n    this.public = null;\n    this.trusted = null;\n    this._maxSeq = 0;\n    this._minSeq = 0;\n    this._attached = false;\n\n    const me = this._tinode.getMeTopic();\n    if (me) {\n      me._routePres({\n        _noForwarding: true,\n        what: 'gone',\n        topic: Const.TOPIC_ME,\n        src: this.name\n      });\n    }\n    if (this.onDeleteTopic) {\n      this.onDeleteTopic();\n    }\n  }\n  // Update global user cache and local subscribers cache.\n  // Don't call this method for non-subscribers.\n  _updateCachedUser(uid, obj) {\n    // Fetch user object from the global cache.\n    // This is a clone of the stored object\n    let cached = this._cacheGetUser(uid);\n    cached = mergeObj(cached || {}, obj);\n    // Save to global cache\n    this._cachePutUser(uid, cached);\n    // Save to the list of topic subsribers.\n    return mergeToCache(this._users, uid, cached);\n  }\n  // Get local seqId for a queued message.\n  _getQueuedSeqId() {\n    return this._queuedSeqId++;\n  }\n\n  // Load most recent messages from persistent cache.\n  _loadMessages(db, params) {\n    const {\n      since,\n      before,\n      limit\n    } = params || {};\n    return db.readMessages(this.name, {\n        since: since,\n        before: before,\n        limit: limit || Const.DEFAULT_MESSAGES_PAGE\n      })\n      .then(msgs => {\n        msgs.forEach((data) => {\n          if (data.seq > this._maxSeq) {\n            this._maxSeq = data.seq;\n          }\n          if (data.seq < this._minSeq || this._minSeq == 0) {\n            this._minSeq = data.seq;\n          }\n          this._messages.put(data);\n          this._maybeUpdateMessageVersionsCache(data);\n        });\n        return msgs.length;\n      });\n  }\n  // Push or {pres}: message received.\n  _updateReceived(seq, act) {\n    this.touched = new Date();\n    this.seq = seq | 0;\n    // Check if message is sent by the current user. If so it's been read already.\n    if (!act || this._tinode.isMe(act)) {\n      this.read = this.read ? Math.max(this.read, this.seq) : this.seq;\n      this.recv = this.recv ? Math.max(this.read, this.recv) : this.read;\n    }\n    this.unread = this.seq - (this.read | 0);\n    this._tinode._db.updTopic(this);\n  }\n}\n\n/**\n * @class TopicMe - special case of {@link Tinode.Topic} for\n * managing data of the current user, including contact list.\n * @extends Tinode.Topic\n * @memberof Tinode\n *\n * @param {TopicMe.Callbacks} callbacks - Callbacks to receive various events.\n */\n/**\n * @class TopicMe - special case of {@link Tinode.Topic} for\n * managing data of the current user, including contact list.\n * @extends Tinode.Topic\n * @memberof Tinode\n *\n * @param {TopicMe.Callbacks} callbacks - Callbacks to receive various events.\n */\nexport class TopicMe extends Topic {\n  onContactUpdate;\n\n  constructor(callbacks) {\n    super(Const.TOPIC_ME, callbacks);\n\n    // me-specific callbacks\n    if (callbacks) {\n      this.onContactUpdate = callbacks.onContactUpdate;\n    }\n  }\n\n  // Override the original Topic._processMetaDesc.\n  _processMetaDesc(desc) {\n    // Check if online contacts need to be turned off because P permission was removed.\n    const turnOff = (desc.acs && !desc.acs.isPresencer()) && (this.acs && this.acs.isPresencer());\n\n    // Copy parameters from desc object to this topic.\n    mergeObj(this, desc);\n    this._tinode._db.updTopic(this);\n    // Update current user's record in the global cache.\n    this._updateCachedUser(this._tinode._myUID, desc);\n\n    // 'P' permission was removed. All topics are offline now.\n    if (turnOff) {\n      this._tinode.mapTopics((cont) => {\n        if (cont.online) {\n          cont.online = false;\n          cont.seen = Object.assign(cont.seen || {}, {\n            when: new Date()\n          });\n          this._refreshContact('off', cont);\n        }\n      });\n    }\n\n    if (this.onMetaDesc) {\n      this.onMetaDesc(this);\n    }\n  }\n\n  // Override the original Topic._processMetaSub\n  _processMetaSub(subs) {\n    let updateCount = 0;\n    subs.forEach((sub) => {\n      const topicName = sub.topic;\n      // Don't show 'me' and 'fnd' topics in the list of contacts.\n      if (topicName == Const.TOPIC_FND || topicName == Const.TOPIC_ME) {\n        return;\n      }\n      sub.online = !!sub.online;\n\n      let cont = null;\n      if (sub.deleted) {\n        cont = sub;\n        this._tinode.cacheRemTopic(topicName);\n        this._tinode._db.remTopic(topicName);\n      } else {\n        // Ensure the values are defined and are integers.\n        if (typeof sub.seq != 'undefined') {\n          sub.seq = sub.seq | 0;\n          sub.recv = sub.recv | 0;\n          sub.read = sub.read | 0;\n          sub.unread = sub.seq - sub.read;\n        }\n\n        const topic = this._tinode.getTopic(topicName);\n        if (topic._new) {\n          delete topic._new;\n        }\n\n        cont = mergeObj(topic, sub);\n        this._tinode._db.updTopic(cont);\n\n        if (Topic.isP2PTopicName(topicName)) {\n          this._cachePutUser(topicName, cont);\n          this._tinode._db.updUser(topicName, cont.public);\n        }\n        // Notify topic of the update if it's an external update.\n        if (!sub._noForwarding && topic) {\n          sub._noForwarding = true;\n          topic._processMetaDesc(sub);\n        }\n      }\n\n      updateCount++;\n\n      if (this.onMetaSub) {\n        this.onMetaSub(cont);\n      }\n    });\n\n    if (this.onSubsUpdated && updateCount > 0) {\n      const keys = [];\n      subs.forEach((s) => {\n        keys.push(s.topic);\n      });\n      this.onSubsUpdated(keys, updateCount);\n    }\n  }\n\n  // Called by Tinode when meta.sub is recived.\n  _processMetaCreds(creds, upd) {\n    if (creds.length == 1 && creds[0] == Const.DEL_CHAR) {\n      creds = [];\n    }\n    if (upd) {\n      creds.forEach((cr) => {\n        if (cr.val) {\n          // Adding a credential.\n          let idx = this._credentials.findIndex((el) => {\n            return el.meth == cr.meth && el.val == cr.val;\n          });\n          if (idx < 0) {\n            // Not found.\n            if (!cr.done) {\n              // Unconfirmed credential replaces previous unconfirmed credential of the same method.\n              idx = this._credentials.findIndex((el) => {\n                return el.meth == cr.meth && !el.done;\n              });\n              if (idx >= 0) {\n                // Remove previous unconfirmed credential.\n                this._credentials.splice(idx, 1);\n              }\n            }\n            this._credentials.push(cr);\n          } else {\n            // Found. Maybe change 'done' status.\n            this._credentials[idx].done = cr.done;\n          }\n        } else if (cr.resp) {\n          // Handle credential confirmation.\n          const idx = this._credentials.findIndex((el) => {\n            return el.meth == cr.meth && !el.done;\n          });\n          if (idx >= 0) {\n            this._credentials[idx].done = true;\n          }\n        }\n      });\n    } else {\n      this._credentials = creds;\n    }\n    if (this.onCredsUpdated) {\n      this.onCredsUpdated(this._credentials);\n    }\n  }\n\n  // Process presence change message\n  _routePres(pres) {\n    if (pres.what == 'term') {\n      // The 'me' topic itself is detached. Mark as unsubscribed.\n      this._resetSub();\n      return;\n    }\n\n    if (pres.what == 'upd' && pres.src == Const.TOPIC_ME) {\n      // Update to me's description. Request updated value.\n      this.getMeta(this.startMetaQuery().withDesc().build());\n      return;\n    }\n\n    const cont = this._tinode.cacheGetTopic(pres.src);\n    if (cont) {\n      switch (pres.what) {\n        case 'on': // topic came online\n          cont.online = true;\n          break;\n        case 'off': // topic went offline\n          if (cont.online) {\n            cont.online = false;\n            cont.seen = Object.assign(cont.seen || {}, {\n              when: new Date()\n            });\n          }\n          break;\n        case 'msg': // new message received\n          cont._updateReceived(pres.seq, pres.act);\n          break;\n        case 'upd': // desc updated\n          // Request updated subscription.\n          this.getMeta(this.startMetaQuery().withLaterOneSub(pres.src).build());\n          break;\n        case 'acs': // access mode changed\n          if (cont.acs) {\n            cont.acs.updateAll(pres.dacs);\n          } else {\n            cont.acs = new AccessMode().updateAll(pres.dacs);\n          }\n          cont.touched = new Date();\n          break;\n        case 'ua':\n          // user agent changed.\n          cont.seen = {\n            when: new Date(),\n            ua: pres.ua\n          };\n          break;\n        case 'recv':\n          // user's other session marked some messges as received.\n          pres.seq = pres.seq | 0;\n          cont.recv = cont.recv ? Math.max(cont.recv, pres.seq) : pres.seq;\n          break;\n        case 'read':\n          // user's other session marked some messages as read.\n          pres.seq = pres.seq | 0;\n          cont.read = cont.read ? Math.max(cont.read, pres.seq) : pres.seq;\n          cont.recv = cont.recv ? Math.max(cont.read, cont.recv) : cont.recv;\n          cont.unread = cont.seq - cont.read;\n          break;\n        case 'gone':\n          // topic deleted or unsubscribed from.\n          if (!cont._deleted) {\n            cont._deleted = true;\n            cont._attached = false;\n            this._tinode._db.markTopicAsDeleted(pres.src);\n          } else {\n            this._tinode._db.remTopic(pres.src);\n          }\n          break;\n        case 'del':\n          // Update topic.del value.\n          break;\n        default:\n          this._tinode.logger(\"INFO: Unsupported presence update in 'me'\", pres.what);\n      }\n\n      this._refreshContact(pres.what, cont);\n    } else {\n      if (pres.what == 'acs') {\n        // New subscriptions and deleted/banned subscriptions have full\n        // access mode (no + or - in the dacs string). Changes to known subscriptions are sent as\n        // deltas, but they should not happen here.\n        const acs = new AccessMode(pres.dacs);\n        if (!acs || acs.mode == AccessMode._INVALID) {\n          this._tinode.logger(\"ERROR: Invalid access mode update\", pres.src, pres.dacs);\n          return;\n        } else if (acs.mode == AccessMode._NONE) {\n          this._tinode.logger(\"WARNING: Removing non-existent subscription\", pres.src, pres.dacs);\n          return;\n        } else {\n          // New subscription. Send request for the full description.\n          // Using .withOneSub (not .withLaterOneSub) to make sure IfModifiedSince is not set.\n          this.getMeta(this.startMetaQuery().withOneSub(undefined, pres.src).build());\n          // Create a dummy entry to catch online status update.\n          const dummy = this._tinode.getTopic(pres.src);\n          dummy.topic = pres.src;\n          dummy.online = false;\n          dummy.acs = acs;\n          this._tinode._db.updTopic(dummy);\n        }\n      } else if (pres.what == 'tags') {\n        this.getMeta(this.startMetaQuery().withTags().build());\n      }\n    }\n\n    if (this.onPres) {\n      this.onPres(pres);\n    }\n  }\n\n  // Contact is updated, execute callbacks.\n  _refreshContact(what, cont) {\n    if (this.onContactUpdate) {\n      this.onContactUpdate(what, cont);\n    }\n  }\n\n  /**\n   * Publishing to TopicMe is not supported. {@link Topic#publish} is overriden and thows an {Error} if called.\n   * @memberof Tinode.TopicMe#\n   * @throws {Error} Always throws an error.\n   */\n  publish() {\n    return Promise.reject(new Error(\"Publishing to 'me' is not supported\"));\n  }\n\n  /**\n   * Delete validation credential.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} topic - Name of the topic to delete\n   * @param {string} user - User ID to remove.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delCredential(method, value) {\n    if (!this._attached) {\n      return Promise.reject(new Error(\"Cannot delete credential in inactive 'me' topic\"));\n    }\n    // Send {del} message, return promise\n    return this._tinode.delCredential(method, value).then(ctrl => {\n      // Remove deleted credential from the cache.\n      const index = this._credentials.findIndex((el) => {\n        return el.meth == method && el.val == value;\n      });\n      if (index > -1) {\n        this._credentials.splice(index, 1);\n      }\n      // Notify listeners\n      if (this.onCredsUpdated) {\n        this.onCredsUpdated(this._credentials);\n      }\n      return ctrl;\n    });\n  }\n\n  /**\n   * @callback contactFilter\n   * @param {Object} contact to check for inclusion.\n   * @returns {boolean} <code>true</code> if contact should be processed, <code>false</code> to exclude it.\n   */\n  /**\n   * Iterate over cached contacts.\n   *\n   * @function\n   * @memberof Tinode.TopicMe#\n   * @param {TopicMe.ContactCallback} callback - Callback to call for each contact.\n   * @param {contactFilter=} filter - Optionally filter contacts; include all if filter is false-ish, otherwise\n   *      include those for which filter returns true-ish.\n   * @param {Object=} context - Context to use for calling the `callback`, i.e. the value of `this` inside the callback.\n   */\n  contacts(callback, filter, context) {\n    this._tinode.mapTopics((c, idx) => {\n      if (c.isCommType() && (!filter || filter(c))) {\n        callback.call(context, c, idx);\n      }\n    });\n  }\n\n  /**\n   * Get a contact from cache.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} name - Name of the contact to get, either a UID (for p2p topics) or a topic name.\n   * @returns {Tinode.Contact} - Contact or `undefined`.\n   */\n  getContact(name) {\n    return this._tinode.cacheGetTopic(name);\n  }\n\n  /**\n   * Get access mode of a given contact from cache.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} name - Name of the contact to get access mode for, either a UID (for p2p topics)\n   *        or a topic name; if missing, access mode for the 'me' topic itself.\n   * @returns {string} - access mode, such as `RWP`.\n   */\n  getAccessMode(name) {\n    if (name) {\n      const cont = this._tinode.cacheGetTopic(name);\n      return cont ? cont.acs : null;\n    }\n    return this.acs;\n  }\n\n  /**\n   * Check if contact is archived, i.e. contact.private.arch == true.\n   * @memberof Tinode.TopicMe#\n   *\n   * @param {string} name - Name of the contact to check archived status, either a UID (for p2p topics) or a topic name.\n   * @returns {boolean} - true if contact is archived, false otherwise.\n   */\n  isArchived(name) {\n    const cont = this._tinode.cacheGetTopic(name);\n    return cont && cont.private && !!cont.private.arch;\n  }\n\n  /**\n   * @typedef Tinode.Credential\n   * @memberof Tinode\n   * @type Object\n   * @property {string} meth - validation method such as 'email' or 'tel'.\n   * @property {string} val - credential value, i.e. 'jdoe@example.com' or '+17025551234'\n   * @property {boolean} done - true if credential is validated.\n   */\n  /**\n   * Get the user's credentials: email, phone, etc.\n   * @memberof Tinode.TopicMe#\n   *\n   * @returns {Tinode.Credential[]} - array of credentials.\n   */\n  getCredentials() {\n    return this._credentials;\n  }\n}\n\n/**\n * @class TopicFnd - special case of {@link Tinode.Topic} for searching for\n * contacts and group topics.\n * @extends Tinode.Topic\n * @memberof Tinode\n *\n * @param {TopicFnd.Callbacks} callbacks - Callbacks to receive various events.\n */\nexport class TopicFnd extends Topic {\n  // List of users and topics uid or topic_name -> Contact object)\n  _contacts = {};\n\n  constructor(callbacks) {\n    super(Const.TOPIC_FND, callbacks);\n  }\n\n  // Override the original Topic._processMetaSub\n  _processMetaSub(subs) {\n    let updateCount = Object.getOwnPropertyNames(this._contacts).length;\n    // Reset contact list.\n    this._contacts = {};\n    for (let idx in subs) {\n      let sub = subs[idx];\n      const indexBy = sub.topic ? sub.topic : sub.user;\n\n      sub = mergeToCache(this._contacts, indexBy, sub);\n      updateCount++;\n\n      if (this.onMetaSub) {\n        this.onMetaSub(sub);\n      }\n    }\n\n    if (updateCount > 0 && this.onSubsUpdated) {\n      this.onSubsUpdated(Object.keys(this._contacts));\n    }\n  }\n\n  /**\n   * Publishing to TopicFnd is not supported. {@link Topic#publish} is overriden and thows an {Error} if called.\n   * @memberof Tinode.TopicFnd#\n   * @throws {Error} Always throws an error.\n   */\n  publish() {\n    return Promise.reject(new Error(\"Publishing to 'fnd' is not supported\"));\n  }\n\n  /**\n   * setMeta to TopicFnd resets contact list in addition to sending the message.\n   * @memberof Tinode.TopicFnd#\n   * @param {Tinode.SetParams} params parameters to update.\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  setMeta(params) {\n    return Object.getPrototypeOf(TopicFnd.prototype).setMeta.call(this, params).then(_ => {\n      if (Object.keys(this._contacts).length > 0) {\n        this._contacts = {};\n        if (this.onSubsUpdated) {\n          this.onSubsUpdated([]);\n        }\n      }\n    });\n  }\n\n  /**\n   * Iterate over found contacts. If callback is undefined, use {@link this.onMetaSub}.\n   * @function\n   * @memberof Tinode.TopicFnd#\n   * @param {TopicFnd.ContactCallback} callback - Callback to call for each contact.\n   * @param {Object} context - Context to use for calling the `callback`, i.e. the value of `this` inside the callback.\n   */\n  contacts(callback, context) {\n    const cb = (callback || this.onMetaSub);\n    if (cb) {\n      for (let idx in this._contacts) {\n        cb.call(context, this._contacts[idx], idx, this._contacts);\n      }\n    }\n  }\n}\n","/**\n * @module tinode-sdk\n *\n * @copyright 2015-2022 Tinode LLC.\n * @summary Javascript bindings for Tinode.\n * @license Apache 2.0\n * @version 0.20\n *\n * See <a href=\"https://github.com/tinode/webapp\">https://github.com/tinode/webapp</a> for real-life usage.\n *\n * @example\n * <head>\n * <script src=\".../tinode.js\"></script>\n * </head>\n *\n * <body>\n *  ...\n * <script>\n *  // Instantiate tinode.\n *  const tinode = new Tinode(config, _ => {\n *    // Called on init completion.\n *  });\n *  tinode.enableLogging(true);\n *  tinode.onDisconnect = err => {\n *    // Handle disconnect.\n *  };\n *  // Connect to the server.\n *  tinode.connect('https://example.com/').then(_ => {\n *    // Connected. Login now.\n *    return tinode.loginBasic(login, password);\n *  }).then(ctrl => {\n *    // Logged in fine, attach callbacks, subscribe to 'me'.\n *    const me = tinode.getMeTopic();\n *    me.onMetaDesc = function(meta) { ... };\n *    // Subscribe, fetch topic description and the list of contacts.\n *    me.subscribe({get: {desc: {}, sub: {}}});\n *  }).catch(err => {\n *    // Login or subscription failed, do something.\n *    ...\n *  });\n *  ...\n * </script>\n * </body>\n */\n'use strict';\n\n// NOTE TO DEVELOPERS:\n// Localizable strings should be double quoted \"строка на другом языке\",\n// non-localizable strings should be single quoted 'non-localized'.\n\nimport AccessMode from './access-mode.js';\nimport * as Const from './config.js';\nimport CommError from './comm-error.js';\nimport Connection from './connection.js';\nimport DBCache from './db.js';\nimport Drafty from './drafty.js';\nimport LargeFileHelper from './large-file.js';\nimport MetaGetBuilder from './meta-builder.js';\nimport {\n  Topic,\n  TopicMe,\n  TopicFnd\n} from './topic.js';\n\nimport {\n  isUrlRelative,\n  jsonParseHelper,\n  mergeObj,\n  rfc3339DateString,\n  simplify\n} from './utils.js';\n\n// Re-export AccessMode\nexport {\n  AccessMode\n};\n\nlet WebSocketProvider;\nif (typeof WebSocket != 'undefined') {\n  WebSocketProvider = WebSocket;\n}\n\nlet XHRProvider;\nif (typeof XMLHttpRequest != 'undefined') {\n  XHRProvider = XMLHttpRequest;\n}\n\nlet IndexedDBProvider;\nif (typeof indexedDB != 'undefined') {\n  IndexedDBProvider = indexedDB;\n}\n\n// Re-export Drafty.\nexport {\n  Drafty\n}\n\ninitForNonBrowserApp();\n\n// Utility functions\n\n// Polyfill for non-browser context, e.g. NodeJs.\nfunction initForNonBrowserApp() {\n  // Tinode requirement in native mode because react native doesn't provide Base64 method\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  if (typeof btoa == 'undefined') {\n    global.btoa = function(input = '') {\n      let str = input;\n      let output = '';\n\n      for (let block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n\n        charCode = str.charCodeAt(i += 3 / 4);\n\n        if (charCode > 0xFF) {\n          throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n        }\n        block = block << 8 | charCode;\n      }\n\n      return output;\n    };\n  }\n\n  if (typeof atob == 'undefined') {\n    global.atob = function(input = '') {\n      let str = input.replace(/=+$/, '');\n      let output = '';\n\n      if (str.length % 4 == 1) {\n        throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n      }\n      for (let bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++);\n\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n      ) {\n        buffer = chars.indexOf(buffer);\n      }\n\n      return output;\n    };\n  }\n\n  if (typeof window == 'undefined') {\n    global.window = {\n      WebSocket: WebSocketProvider,\n      XMLHttpRequest: XHRProvider,\n      indexedDB: IndexedDBProvider,\n      URL: {\n        createObjectURL: function() {\n          throw new Error(\"Unable to use URL.createObjectURL in a non-browser application\");\n        }\n      }\n    }\n  }\n\n  Connection.setNetworkProviders(WebSocketProvider, XHRProvider);\n  LargeFileHelper.setNetworkProvider(XHRProvider);\n  DBCache.setDatabaseProvider(IndexedDBProvider);\n}\n\n// Detect find most useful network transport.\nfunction detectTransport() {\n  if (typeof window == 'object') {\n    if (window['WebSocket']) {\n      return 'ws';\n    } else if (window['XMLHttpRequest']) {\n      // The browser or node has no websockets, using long polling.\n      return 'lp';\n    }\n  }\n  return null;\n}\n\n// btoa replacement. Stock btoa fails on on non-Latin1 strings.\nfunction b64EncodeUnicode(str) {\n  // The encodeURIComponent percent-encodes UTF-8 string,\n  // then the percent encoding is converted into raw bytes which\n  // can be fed into btoa.\n  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n    function toSolidBytes(match, p1) {\n      return String.fromCharCode('0x' + p1);\n    }));\n}\n\n// JSON stringify helper - pre-processor for JSON.stringify\nfunction jsonBuildHelper(key, val) {\n  if (val instanceof Date) {\n    // Convert javascript Date objects to rfc3339 strings\n    val = rfc3339DateString(val);\n  } else if (val instanceof AccessMode) {\n    val = val.jsonHelper();\n  } else if (val === undefined || val === null || val === false ||\n    (Array.isArray(val) && val.length == 0) ||\n    ((typeof val == 'object') && (Object.keys(val).length == 0))) {\n    // strip out empty elements while serializing objects to JSON\n    return undefined;\n  }\n\n  return val;\n};\n\n// Trims very long strings (encoded images) to make logged packets more readable.\nfunction jsonLoggerHelper(key, val) {\n  if (typeof val == 'string' && val.length > 128) {\n    return '<' + val.length + ', bytes: ' + val.substring(0, 12) + '...' + val.substring(val.length - 12) + '>';\n  }\n  return jsonBuildHelper(key, val);\n};\n\n// Parse browser user agent to extract browser name and version.\nfunction getBrowserInfo(ua, product) {\n  ua = ua || '';\n  let reactnative = '';\n  // Check if this is a ReactNative app.\n  if (/reactnative/i.test(product)) {\n    reactnative = 'ReactNative; ';\n  }\n  let result;\n  // Remove useless string.\n  ua = ua.replace(' (KHTML, like Gecko)', '');\n  // Test for WebKit-based browser.\n  let m = ua.match(/(AppleWebKit\\/[.\\d]+)/i);\n  if (m) {\n    // List of common strings, from more useful to less useful.\n    // All unknown strings get the highest (-1) priority.\n    const priority = ['edg', 'chrome', 'safari', 'mobile', 'version'];\n    let tmp = ua.substr(m.index + m[0].length).split(' ');\n    let tokens = [];\n    let version; // 1.0 in Version/1.0 or undefined;\n    // Split string like 'Name/0.0.0' into ['Name', '0.0.0', 3] where the last element is the priority.\n    for (let i = 0; i < tmp.length; i++) {\n      let m2 = /([\\w.]+)[\\/]([\\.\\d]+)/.exec(tmp[i]);\n      if (m2) {\n        // Unknown values are highest priority (-1).\n        tokens.push([m2[1], m2[2], priority.findIndex((e) => {\n          return m2[1].toLowerCase().startsWith(e);\n        })]);\n        if (m2[1] == 'Version') {\n          version = m2[2];\n        }\n      }\n    }\n    // Sort by priority: more interesting is earlier than less interesting.\n    tokens.sort((a, b) => {\n      return a[2] - b[2];\n    });\n    if (tokens.length > 0) {\n      // Return the least common browser string and version.\n      if (tokens[0][0].toLowerCase().startsWith('edg')) {\n        tokens[0][0] = 'Edge';\n      } else if (tokens[0][0] == 'OPR') {\n        tokens[0][0] = 'Opera';\n      } else if (tokens[0][0] == 'Safari' && version) {\n        tokens[0][1] = version;\n      }\n      result = tokens[0][0] + '/' + tokens[0][1];\n    } else {\n      // Failed to ID the browser. Return the webkit version.\n      result = m[1];\n    }\n  } else if (/firefox/i.test(ua)) {\n    m = /Firefox\\/([.\\d]+)/g.exec(ua);\n    if (m) {\n      result = 'Firefox/' + m[1];\n    } else {\n      result = 'Firefox/?';\n    }\n  } else {\n    // Neither AppleWebKit nor Firefox. Try the last resort.\n    m = /([\\w.]+)\\/([.\\d]+)/.exec(ua);\n    if (m) {\n      result = m[1] + '/' + m[2];\n    } else {\n      m = ua.split(' ');\n      result = m[0];\n    }\n  }\n\n  // Shorten the version to one dot 'a.bb.ccc.d -> a.bb' at most.\n  m = result.split('/');\n  if (m.length > 1) {\n    const v = m[1].split('.');\n    const minor = v[1] ? '.' + v[1].substr(0, 2) : '';\n    result = `${m[0]}/${v[0]}${minor}`;\n  }\n  return reactnative + result;\n}\n\n/**\n * The main class for interacting with Tinode server.\n */\nexport class Tinode {\n  _host;\n  _secure;\n\n  _appName;\n\n  // API Key.\n  _apiKey;\n\n  // Name and version of the browser.\n  _browser = '';\n  _platform;\n  // Hardware\n  _hwos = 'undefined';\n  _humanLanguage = 'xx';\n\n  // Logging to console enabled\n  _loggingEnabled = false;\n  // When logging, trip long strings (base64-encoded images) for readability\n  _trimLongStrings = false;\n  // UID of the currently authenticated user.\n  _myUID = null;\n  // Status of connection: authenticated or not.\n  _authenticated = false;\n  // Login used in the last successful basic authentication\n  _login = null;\n  // Token which can be used for login instead of login/password.\n  _authToken = null;\n  // Counter of received packets\n  _inPacketCount = 0;\n  // Counter for generating unique message IDs\n  _messageId = Math.floor((Math.random() * 0xFFFF) + 0xFFFF);\n  // Information about the server, if connected\n  _serverInfo = null;\n  // Push notification token. Called deviceToken for consistency with the Android SDK.\n  _deviceToken = null;\n\n  // Cache of pending promises by message id.\n  _pendingPromises = {};\n  // The Timeout object returned by the reject expired promises setInterval.\n  _expirePromises = null;\n\n  // Websocket or long polling connection.\n  _connection = null;\n\n  // Use indexDB for caching topics and messages.\n  _persist = false;\n  // IndexedDB wrapper object.\n  _db = null;\n\n  // Tinode's cache of objects\n  _cache = {};\n\n  /**\n   * Create Tinode object.\n   *\n   * @param {Object} config - configuration parameters.\n   * @param {string} config.appName - Name of the calling application to be reported in the User Agent.\n   * @param {string} config.host - Host name and optional port number to connect to.\n   * @param {string} config.apiKey - API key generated by <code>keygen</code>.\n   * @param {string} config.transport - See {@link Tinode.Connection#transport}.\n   * @param {boolean} config.secure - Use Secure WebSocket if <code>true</code>.\n   * @param {string} config.platform - Optional platform identifier, one of <code>\"ios\"</code>, <code>\"web\"</code>, <code>\"android\"</code>.\n   * @param {boolen} config.persist - Use IndexedDB persistent storage.\n   * @param {function} onComplete - callback to call when initialization is completed.\n   */\n  constructor(config, onComplete) {\n    this._host = config.host;\n    this._secure = config.secure;\n\n    // Client-provided application name, format <Name>/<version number>\n    this._appName = config.appName || \"Undefined\";\n\n    // API Key.\n    this._apiKey = config.apiKey;\n\n    // Name and version of the browser.\n    this._platform = config.platform || 'web';\n    // Underlying OS.\n    if (typeof navigator != 'undefined') {\n      this._browser = getBrowserInfo(navigator.userAgent, navigator.product);\n      this._hwos = navigator.platform;\n      // This is the default language. It could be changed by client.\n      this._humanLanguage = navigator.language || 'en-US';\n    }\n\n    Connection.logger = this.logger;\n    Drafty.logger = this.logger;\n\n    // WebSocket or long polling network connection.\n    if (config.transport != 'lp' && config.transport != 'ws') {\n      config.transport = detectTransport();\n    }\n    this._connection = new Connection(config, Const.PROTOCOL_VERSION, /* autoreconnect */ true);\n    this._connection.onMessage = (data) => {\n      // Call the main message dispatcher.\n      this.#dispatchMessage(data);\n    }\n\n    // Ready to start sending.\n    this._connection.onOpen = _ => this.#connectionOpen();\n    this._connection.onDisconnect = (err, code) => this.#disconnected(err, code);\n\n    // Wrapper for the reconnect iterator callback.\n    this._connection.onAutoreconnectIteration = (timeout, promise) => {\n      if (this.onAutoreconnectIteration) {\n        this.onAutoreconnectIteration(timeout, promise);\n      }\n    }\n\n    this._persist = config.persist;\n    // Initialize object regardless. It simplifies the code.\n    this._db = new DBCache(err => {\n      this.logger('DB', err);\n    }, this.logger);\n\n    if (this._persist) {\n      // Create the persistent cache.\n      // Store promises to be resolved when messages load into memory.\n      const prom = [];\n      this._db.initDatabase().then(_ => {\n        // First load topics into memory.\n        return this._db.mapTopics((data) => {\n          let topic = this.#cacheGet('topic', data.name);\n          if (topic) {\n            return;\n          }\n          if (data.name == Const.TOPIC_ME) {\n            topic = new TopicMe();\n          } else if (data.name == Const.TOPIC_FND) {\n            topic = new TopicFnd();\n          } else {\n            topic = new Topic(data.name);\n          }\n          this._db.deserializeTopic(topic, data);\n          this.#attachCacheToTopic(topic);\n          topic._cachePutSelf();\n          // Topic loaded from DB is not new.\n          delete topic._new;\n          // Request to load messages and save the promise.\n          prom.push(topic._loadMessages(this._db));\n        });\n      }).then(_ => {\n        // Then load users.\n        return this._db.mapUsers((data) => {\n          this.#cachePut('user', data.uid, mergeObj({}, data.public));\n        });\n      }).then(_ => {\n        // Now wait for all messages to finish loading.\n        return Promise.all(prom);\n      }).then(_ => {\n        if (onComplete) {\n          onComplete();\n        }\n        this.logger(\"Persistent cache initialized.\");\n      }).catch(err => {\n        if (onComplete) {\n          onComplete(err);\n        }\n        this.logger(\"Failed to initialize persistent cache:\", err);\n      });\n    } else {\n      this._db.deleteDatabase().then(_ => {\n        if (onComplete) {\n          onComplete();\n        }\n      });\n    }\n  }\n\n  // Private methods.\n\n  // Console logger. Babel somehow fails to parse '...rest' parameter.\n  logger(str, ...args) {\n    if (this._loggingEnabled) {\n      const d = new Date();\n      const dateString = ('0' + d.getUTCHours()).slice(-2) + ':' +\n        ('0' + d.getUTCMinutes()).slice(-2) + ':' +\n        ('0' + d.getUTCSeconds()).slice(-2) + '.' +\n        ('00' + d.getUTCMilliseconds()).slice(-3);\n\n      console.log('[' + dateString + ']', str, args.join(' '));\n    }\n  }\n\n  // Generator of default promises for sent packets.\n  #makePromise(id) {\n    let promise = null;\n    if (id) {\n      promise = new Promise((resolve, reject) => {\n        // Stored callbacks will be called when the response packet with this Id arrives\n        this._pendingPromises[id] = {\n          'resolve': resolve,\n          'reject': reject,\n          'ts': new Date()\n        };\n      });\n    }\n    return promise;\n  };\n\n  // Resolve or reject a pending promise.\n  // Unresolved promises are stored in _pendingPromises.\n  #execPromise(id, code, onOK, errorText) {\n    const callbacks = this._pendingPromises[id];\n    if (callbacks) {\n      delete this._pendingPromises[id];\n      if (code >= 200 && code < 400) {\n        if (callbacks.resolve) {\n          callbacks.resolve(onOK);\n        }\n      } else if (callbacks.reject) {\n        callbacks.reject(new CommError(errorText, code));\n      }\n    }\n  }\n\n  // Send a packet. If packet id is provided return a promise.\n  #send(pkt, id) {\n    let promise;\n    if (id) {\n      promise = this.#makePromise(id);\n    }\n    pkt = simplify(pkt);\n    let msg = JSON.stringify(pkt);\n    this.logger(\"out: \" + (this._trimLongStrings ? JSON.stringify(pkt, jsonLoggerHelper) : msg));\n    try {\n      this._connection.sendText(msg);\n    } catch (err) {\n      // If sendText throws, wrap the error in a promise or rethrow.\n      if (id) {\n        this.#execPromise(id, Connection.NETWORK_ERROR, null, err.message);\n      } else {\n        throw err;\n      }\n    }\n    return promise;\n  }\n\n  // The main message dispatcher.\n  #dispatchMessage(data) {\n    // Skip empty response. This happens when LP times out.\n    if (!data)\n      return;\n\n    this._inPacketCount++;\n\n    // Send raw message to listener\n    if (this.onRawMessage) {\n      this.onRawMessage(data);\n    }\n\n    if (data === '0') {\n      // Server response to a network probe.\n      if (this.onNetworkProbe) {\n        this.onNetworkProbe();\n      }\n      // No processing is necessary.\n      return;\n    }\n\n    let pkt = JSON.parse(data, jsonParseHelper);\n    if (!pkt) {\n      this.logger(\"in: \" + data);\n      this.logger(\"ERROR: failed to parse data\");\n    } else {\n      this.logger(\"in: \" + (this._trimLongStrings ? JSON.stringify(pkt, jsonLoggerHelper) : data));\n\n      // Send complete packet to listener\n      if (this.onMessage) {\n        this.onMessage(pkt);\n      }\n\n      if (pkt.ctrl) {\n        // Handling {ctrl} message\n        if (this.onCtrlMessage) {\n          this.onCtrlMessage(pkt.ctrl);\n        }\n\n        // Resolve or reject a pending promise, if any\n        if (pkt.ctrl.id) {\n          this.#execPromise(pkt.ctrl.id, pkt.ctrl.code, pkt.ctrl, pkt.ctrl.text);\n        }\n        setTimeout(_ => {\n          if (pkt.ctrl.code == 205 && pkt.ctrl.text == 'evicted') {\n            // User evicted from topic.\n            const topic = this.#cacheGet('topic', pkt.ctrl.topic);\n            if (topic) {\n              topic._resetSub();\n              if (pkt.ctrl.params && pkt.ctrl.params.unsub) {\n                topic._gone();\n              }\n            }\n          } else if (pkt.ctrl.code < 300 && pkt.ctrl.params) {\n            if (pkt.ctrl.params.what == 'data') {\n              // code=208, all messages received: \"params\":{\"count\":11,\"what\":\"data\"},\n              const topic = this.#cacheGet('topic', pkt.ctrl.topic);\n              if (topic) {\n                topic._allMessagesReceived(pkt.ctrl.params.count);\n              }\n            } else if (pkt.ctrl.params.what == 'sub') {\n              // code=204, the topic has no (refreshed) subscriptions.\n              const topic = this.#cacheGet('topic', pkt.ctrl.topic);\n              if (topic) {\n                // Trigger topic.onSubsUpdated.\n                topic._processMetaSub([]);\n              }\n            }\n          }\n        }, 0);\n      } else {\n        setTimeout(_ => {\n          if (pkt.meta) {\n            // Handling a {meta} message.\n            // Preferred API: Route meta to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.meta.topic);\n            if (topic) {\n              topic._routeMeta(pkt.meta);\n            }\n\n            if (pkt.meta.id) {\n              this.#execPromise(pkt.meta.id, 200, pkt.meta, 'META');\n            }\n\n            // Secondary API: callback\n            if (this.onMetaMessage) {\n              this.onMetaMessage(pkt.meta);\n            }\n          } else if (pkt.data) {\n            // Handling {data} message\n            // Preferred API: Route data to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.data.topic);\n            if (topic) {\n              topic._routeData(pkt.data);\n            }\n\n            // Secondary API: Call callback\n            if (this.onDataMessage) {\n              this.onDataMessage(pkt.data);\n            }\n          } else if (pkt.pres) {\n            // Handling {pres} message\n            // Preferred API: Route presence to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.pres.topic);\n            if (topic) {\n              topic._routePres(pkt.pres);\n            }\n\n            // Secondary API - callback\n            if (this.onPresMessage) {\n              this.onPresMessage(pkt.pres);\n            }\n          } else if (pkt.info) {\n            // {info} message - read/received notifications and key presses\n            // Preferred API: Route {info}} to topic, if one is registered\n            const topic = this.#cacheGet('topic', pkt.info.topic);\n            if (topic) {\n              topic._routeInfo(pkt.info);\n            }\n\n            // Secondary API - callback\n            if (this.onInfoMessage) {\n              this.onInfoMessage(pkt.info);\n            }\n          } else {\n            this.logger(\"ERROR: Unknown packet received.\");\n          }\n        }, 0);\n      }\n    }\n  }\n\n  // Connection open, ready to start sending.\n  #connectionOpen() {\n    if (!this._expirePromises) {\n      // Reject promises which have not been resolved for too long.\n      this._expirePromises = setInterval(_ => {\n        const err = new CommError(\"timeout\", 504);\n        const expires = new Date(new Date().getTime() - Const.EXPIRE_PROMISES_TIMEOUT);\n        for (let id in this._pendingPromises) {\n          let callbacks = this._pendingPromises[id];\n          if (callbacks && callbacks.ts < expires) {\n            this.logger(\"Promise expired\", id);\n            delete this._pendingPromises[id];\n            if (callbacks.reject) {\n              callbacks.reject(err);\n            }\n          }\n        }\n      }, Const.EXPIRE_PROMISES_PERIOD);\n    }\n    this.hello();\n  }\n\n  #disconnected(err, code) {\n    this._inPacketCount = 0;\n    this._serverInfo = null;\n    this._authenticated = false;\n\n    if (this._expirePromises) {\n      clearInterval(this._expirePromises);\n      this._expirePromises = null;\n    }\n\n    // Mark all topics as unsubscribed\n    this.#cacheMap('topic', (topic, key) => {\n      topic._resetSub();\n    });\n\n    // Reject all pending promises\n    for (let key in this._pendingPromises) {\n      const callbacks = this._pendingPromises[key];\n      if (callbacks && callbacks.reject) {\n        callbacks.reject(err);\n      }\n    }\n    this._pendingPromises = {};\n\n    if (this.onDisconnect) {\n      this.onDisconnect(err);\n    }\n  }\n\n  // Get User Agent string\n  #getUserAgent() {\n    return this._appName + ' (' + (this._browser ? this._browser + '; ' : '') + this._hwos + '); ' + Const.LIBRARY;\n  }\n\n  // Generator of packets stubs\n  #initPacket(type, topic) {\n    switch (type) {\n      case 'hi':\n        return {\n          'hi': {\n            'id': this.getNextUniqueId(),\n            'ver': Const.VERSION,\n            'ua': this.#getUserAgent(),\n            'dev': this._deviceToken,\n            'lang': this._humanLanguage,\n            'platf': this._platform\n          }\n        };\n\n      case 'acc':\n        return {\n          'acc': {\n            'id': this.getNextUniqueId(),\n            'user': null,\n            'scheme': null,\n            'secret': null,\n            'tmpscheme': null,\n            'tmpsecret': null,\n            'login': false,\n            'tags': null,\n            'desc': {},\n            'cred': {}\n          }\n        };\n\n      case 'login':\n        return {\n          'login': {\n            'id': this.getNextUniqueId(),\n            'scheme': null,\n            'secret': null\n          }\n        };\n\n      case 'sub':\n        return {\n          'sub': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'set': {},\n            'get': {}\n          }\n        };\n\n      case 'leave':\n        return {\n          'leave': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'unsub': false\n          }\n        };\n\n      case 'pub':\n        return {\n          'pub': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'noecho': false,\n            'head': null,\n            'content': {}\n          }\n        };\n\n      case 'get':\n        return {\n          'get': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'what': null,\n            'desc': {},\n            'sub': {},\n            'data': {}\n          }\n        };\n\n      case 'set':\n        return {\n          'set': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'desc': {},\n            'sub': {},\n            'tags': [],\n            'ephemeral': {}\n          }\n        };\n\n      case 'del':\n        return {\n          'del': {\n            'id': this.getNextUniqueId(),\n            'topic': topic,\n            'what': null,\n            'delseq': null,\n            'user': null,\n            'hard': false\n          }\n        };\n\n      case 'note':\n        return {\n          'note': {\n            // no id by design (except calls).\n            'topic': topic,\n            'what': null, // one of \"recv\", \"read\", \"kp\", \"call\"\n            'seq': undefined // the server-side message id acknowledged as received or read.\n          }\n        };\n\n      default:\n        throw new Error(`Unknown packet type requested: ${type}`);\n    }\n  }\n\n  // Cache management\n  #cachePut(type, name, obj) {\n    this._cache[type + ':' + name] = obj;\n  }\n  #cacheGet(type, name) {\n    return this._cache[type + ':' + name];\n  }\n  #cacheDel(type, name) {\n    delete this._cache[type + ':' + name];\n  }\n\n  // Enumerate all items in cache, call func for each item.\n  // Enumeration stops if func returns true.\n  #cacheMap(type, func, context) {\n    const key = type ? type + ':' : undefined;\n    for (let idx in this._cache) {\n      if (!key || idx.indexOf(key) == 0) {\n        if (func.call(context, this._cache[idx], idx)) {\n          break;\n        }\n      }\n    }\n  }\n\n  // Make limited cache management available to topic.\n  // Caching user.public only. Everything else is per-topic.\n  #attachCacheToTopic(topic) {\n    topic._tinode = this;\n\n    topic._cacheGetUser = (uid) => {\n      const pub = this.#cacheGet('user', uid);\n      if (pub) {\n        return {\n          user: uid,\n          public: mergeObj({}, pub)\n        };\n      }\n      return undefined;\n    };\n    topic._cachePutUser = (uid, user) => {\n      this.#cachePut('user', uid, mergeObj({}, user.public));\n    };\n    topic._cacheDelUser = (uid) => {\n      this.#cacheDel('user', uid);\n    };\n    topic._cachePutSelf = _ => {\n      this.#cachePut('topic', topic.name, topic);\n    };\n    topic._cacheDelSelf = _ => {\n      this.#cacheDel('topic', topic.name);\n    };\n  }\n\n  // On successful login save server-provided data.\n  #loginSuccessful(ctrl) {\n    if (!ctrl.params || !ctrl.params.user) {\n      return ctrl;\n    }\n    // This is a response to a successful login,\n    // extract UID and security token, save it in Tinode module\n    this._myUID = ctrl.params.user;\n    this._authenticated = (ctrl && ctrl.code >= 200 && ctrl.code < 300);\n    if (ctrl.params && ctrl.params.token && ctrl.params.expires) {\n      this._authToken = {\n        token: ctrl.params.token,\n        expires: ctrl.params.expires\n      };\n    } else {\n      this._authToken = null;\n    }\n\n    if (this.onLogin) {\n      this.onLogin(ctrl.code, ctrl.text);\n    }\n\n    return ctrl;\n  }\n\n  // Static methods.\n  /**\n   * Helper method to package account credential.\n   *\n   * @param {string | Credential} meth - validation method or object with validation data.\n   * @param {string=} val - validation value (e.g. email or phone number).\n   * @param {Object=} params - validation parameters.\n   * @param {string=} resp - validation response.\n   *\n   * @returns {Array.<Credential>} array with a single credential or <code>null</code> if no valid credentials were given.\n   */\n  static credential(meth, val, params, resp) {\n    if (typeof meth == 'object') {\n      ({\n        val,\n        params,\n        resp,\n        meth\n      } = meth);\n    }\n    if (meth && (val || resp)) {\n      return [{\n        'meth': meth,\n        'val': val,\n        'resp': resp,\n        'params': params\n      }];\n    }\n    return null;\n  }\n\n  /**\n   * Determine topic type from topic's name: grp, p2p, me, fnd, sys.\n   * @param {string} name - Name of the topic to test.\n   * @returns {string} One of <code>\"me\"</code>, <code>\"fnd\"</code>, <code>\"sys\"</code>, <code>\"grp\"</code>,\n   *    <code>\"p2p\"</code> or <code>undefined</code>.\n   */\n  static topicType(name) {\n    return Topic.topicType(name);\n  }\n\n  /**\n   * Check if the given topic name is a name of a 'me' topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a 'me' topic, <code>false</code> otherwise.\n   */\n  static isMeTopicName(name) {\n    return Topic.isMeTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a group topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a group topic, <code>false</code> otherwise.\n   */\n  static isGroupTopicName(name) {\n    return Topic.isGroupTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a p2p topic.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p topic, <code>false</code> otherwise.\n   */\n  static isP2PTopicName(name) {\n    return Topic.isP2PTopicName(name);\n  }\n  /**\n   * Check if the given topic name is a name of a communication topic, i.e. P2P or group.\n   * @param {string} name - Name of the topic to test.\n   * @returns {boolean} <code>true</code> if the name is a name of a p2p or group topic, <code>false</code> otherwise.\n   */\n  static isCommTopicName(name) {\n    return Topic.isCommTopicName(name);\n  }\n  /**\n   * Check if the topic name is a name of a new topic.\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a new topic, <code>false</code> otherwise.\n   */\n  static isNewGroupTopicName(name) {\n    return Topic.isNewGroupTopicName(name);\n  }\n  /**\n   * Check if the topic name is a name of a channel.\n   * @param {string} name - topic name to check.\n   * @returns {boolean} <code>true</code> if the name is a name of a channel, <code>false</code> otherwise.\n   */\n  static isChannelTopicName(name) {\n    return Topic.isChannelTopicName(name);\n  }\n  /**\n   * Get information about the current version of this Tinode client library.\n   * @returns {string} semantic version of the library, e.g. <code>\"0.15.5-rc1\"</code>.\n   */\n  static getVersion() {\n    return Const.VERSION;\n  }\n  /**\n   * To use Tinode in a non browser context, supply WebSocket and XMLHttpRequest providers.\n   * @static\n   *\n   * @param wsProvider <code>WebSocket</code> provider, e.g. for nodeJS , <code>require('ws')</code>.\n   * @param xhrProvider <code>XMLHttpRequest</code> provider, e.g. for node <code>require('xhr')</code>.\n   */\n  static setNetworkProviders(wsProvider, xhrProvider) {\n    WebSocketProvider = wsProvider;\n    XHRProvider = xhrProvider;\n\n    Connection.setNetworkProviders(WebSocketProvider, XHRProvider);\n    LargeFileHelper.setNetworkProvider(XHRProvider);\n  }\n  /**\n   * To use Tinode in a non browser context, supply <code>indexedDB</code> provider.\n   * @static\n   *\n   * @param idbProvider <code>indexedDB</code> provider, e.g. for nodeJS , <code>require('fake-indexeddb')</code>.\n   */\n  static setDatabaseProvider(idbProvider) {\n    IndexedDBProvider = idbProvider;\n\n    DBCache.setDatabaseProvider(IndexedDBProvider);\n  }\n  /**\n   * Return information about the current name and version of this Tinode library.\n   * @static\n   *\n   * @returns {string} the name of the library and it's version.\n   */\n  static getLibrary() {\n    return Const.LIBRARY;\n  }\n  /**\n   * Check if the given string represents <code>NULL</code> value as defined by Tinode (<code>'\\u2421'</code>).\n   * @param {string} str - string to check for <code>NULL</code> value.\n   * @returns {boolean} <code>true</code> if string represents <code>NULL</code> value, <code>false</code> otherwise.\n   */\n  static isNullValue(str) {\n    return str === Const.DEL_CHAR;\n  }\n\n  // Instance methods.\n\n  // Generates unique message IDs\n  getNextUniqueId() {\n    return (this._messageId != 0) ? '' + this._messageId++ : undefined;\n  };\n\n  /**\n   * Connect to the server.\n   *\n   * @param {string} host_ - name of the host to connect to.\n   * @return {Promise} Promise resolved/rejected when the connection call completes:\n   *    <code>resolve()</code> is called without parameters, <code>reject()</code> receives the\n   *    <code>Error</code> as a single parameter.\n   */\n  connect(host_) {\n    return this._connection.connect(host_);\n  }\n\n  /**\n   * Attempt to reconnect to the server immediately.\n   *\n   * @param {string} force - if <code>true</code>, reconnect even if there is a connection already.\n   */\n  reconnect(force) {\n    this._connection.reconnect(force);\n  }\n\n  /**\n   * Disconnect from the server.\n   */\n  disconnect() {\n    this._connection.disconnect();\n  }\n\n  /**\n   * Clear persistent cache: remove IndexedDB.\n   *\n   * @return {Promise} Promise resolved/rejected when the operation is completed.\n   */\n  clearStorage() {\n    if (this._db.isReady()) {\n      return this._db.deleteDatabase();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Initialize persistent cache: create IndexedDB cache.\n   *\n   * @return {Promise} Promise resolved/rejected when the operation is completed.\n   */\n  initStorage() {\n    if (!this._db.isReady()) {\n      return this._db.initDatabase();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Send a network probe message to make sure the connection is alive.\n   */\n  networkProbe() {\n    this._connection.probe();\n  }\n\n  /**\n   * Check for live connection to server.\n   *\n   * @returns {boolean} <code>true</code> if there is a live connection, <code>false</code> otherwise.\n   */\n  isConnected() {\n    return this._connection.isConnected();\n  }\n\n  /**\n   * Check if connection is authenticated (last login was successful).\n   *\n   * @returns {boolean} <code>true</code> if authenticated, <code>false</code> otherwise.\n   */\n  isAuthenticated() {\n    return this._authenticated;\n  }\n\n  /**\n   * Add API key and auth token to the relative URL making it usable for getting data\n   * from the server in a simple <code>HTTP GET</code> request.\n   *\n   * @param {string} URL - URL to wrap.\n   * @returns {string} URL with appended API key and token, if valid token is present.\n   */\n  authorizeURL(url) {\n    if (typeof url != 'string') {\n      return url;\n    }\n\n    if (isUrlRelative(url)) {\n      // Fake base to make the relative URL parseable.\n      const base = 'scheme://host/';\n      const parsed = new URL(url, base);\n      if (this._apiKey) {\n        parsed.searchParams.append('apikey', this._apiKey);\n      }\n      if (this._authToken && this._authToken.token) {\n        parsed.searchParams.append('auth', 'token');\n        parsed.searchParams.append('secret', this._authToken.token);\n      }\n      // Convert back to string and strip fake base URL except for the root slash.\n      url = parsed.toString().substring(base.length - 1);\n    }\n    return url;\n  }\n\n  /**\n   * @typedef AccountParams\n   * @type {Object}\n   * @property {DefAcs=} defacs - Default access parameters for user's <code>me</code> topic.\n   * @property {Object=} public - Public application-defined data exposed on <code>me</code> topic.\n   * @property {Object=} private - Private application-defined data accessible on <code>me</code> topic.\n   * @property {Object=} trusted - Trusted user data which can be set by a root user only.\n   * @property {Array.<string>} tags - array of string tags for user discovery.\n   * @property {string} scheme - Temporary authentication scheme for password reset.\n   * @property {string} secret - Temporary authentication secret for password reset.\n   * @property {Array.<string>=} attachments - Array of references to out of band attachments used in account description.\n   */\n  /**\n   * @typedef DefAcs\n   * @type {Object}\n   * @property {string=} auth - Access mode for <code>me</code> for authenticated users.\n   * @property {string=} anon - Access mode for <code>me</code> for anonymous users.\n   */\n\n  /**\n   * Create or update an account.\n   *\n   * @param {string} uid - User id to update\n   * @param {string} scheme - Authentication scheme; <code>\"basic\"</code> and <code>\"anonymous\"</code> are the currently supported schemes.\n   * @param {string} secret - Authentication secret, assumed to be already base64 encoded.\n   * @param {boolean=} login - Use new account to authenticate current session\n   * @param {AccountParams=} params - User data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  account(uid, scheme, secret, login, params) {\n    const pkt = this.#initPacket('acc');\n    pkt.acc.user = uid;\n    pkt.acc.scheme = scheme;\n    pkt.acc.secret = secret;\n    // Log in to the new account using selected scheme\n    pkt.acc.login = login;\n\n    if (params) {\n      pkt.acc.desc.defacs = params.defacs;\n      pkt.acc.desc.public = params.public;\n      pkt.acc.desc.private = params.private;\n      pkt.acc.desc.trusted = params.trusted;\n\n      pkt.acc.tags = params.tags;\n      pkt.acc.cred = params.cred;\n\n      pkt.acc.tmpscheme = params.scheme;\n      pkt.acc.tmpsecret = params.secret;\n\n      if (Array.isArray(params.attachments) && params.attachments.length > 0) {\n        pkt.extra = {\n          attachments: params.attachments.filter(ref => isUrlRelative(ref))\n        };\n      }\n    }\n\n    return this.#send(pkt, pkt.acc.id);\n  }\n\n  /**\n   * Create a new user. Wrapper for {@link Tinode#account}.\n   *\n   * @param {string} scheme - Authentication scheme; <code>\"basic\"</code> is the only currently supported scheme.\n   * @param {string} secret - Authentication.\n   * @param {boolean=} login - Use new account to authenticate current session\n   * @param {AccountParams=} params - User data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  createAccount(scheme, secret, login, params) {\n    let promise = this.account(Const.USER_NEW, scheme, secret, login, params);\n    if (login) {\n      promise = promise.then(ctrl => this.#loginSuccessful(ctrl));\n    }\n    return promise;\n  }\n\n  /**\n   * Create user with <code>'basic'</code> authentication scheme and immediately\n   * use it for authentication. Wrapper for {@link Tinode#account}.\n   *\n   * @param {string} username - Login to use for the new account.\n   * @param {string} password - User's password.\n   * @param {AccountParams=} params - User data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  createAccountBasic(username, password, params) {\n    // Make sure we are not using 'null' or 'undefined';\n    username = username || '';\n    password = password || '';\n    return this.createAccount('basic',\n      b64EncodeUnicode(username + ':' + password), true, params);\n  }\n\n  /**\n   * Update user's credentials for <code>'basic'</code> authentication scheme. Wrapper for {@link Tinode#account}.\n   *\n   * @param {string} uid - User ID to update.\n   * @param {string} username - Login to use for the new account.\n   * @param {string} password - User's password.\n   * @param {AccountParams=} params - data to pass to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  updateAccountBasic(uid, username, password, params) {\n    // Make sure we are not using 'null' or 'undefined';\n    username = username || '';\n    password = password || '';\n    return this.account(uid, 'basic',\n      b64EncodeUnicode(username + ':' + password), false, params);\n  }\n\n  /**\n   * Send handshake to the server.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  hello() {\n    const pkt = this.#initPacket('hi');\n\n    return this.#send(pkt, pkt.hi.id)\n      .then(ctrl => {\n        // Reset backoff counter on successful connection.\n        this._connection.backoffReset();\n\n        // Server response contains server protocol version, build, constraints,\n        // session ID for long polling. Save them.\n        if (ctrl.params) {\n          this._serverInfo = ctrl.params;\n        }\n\n        if (this.onConnect) {\n          this.onConnect();\n        }\n\n        return ctrl;\n      }).catch(err => {\n        this._connection.reconnect(true);\n\n        if (this.onDisconnect) {\n          this.onDisconnect(err);\n        }\n      });\n  }\n\n  /**\n   * Set or refresh the push notifications/device token. If the client is connected,\n   * the deviceToken can be sent to the server.\n   *\n   * @param {string} dt - token obtained from the provider or <code>false</code>,\n   *    <code>null</code> or <code>undefined</code> to clear the token.\n   *\n   * @returns <code>true</code> if attempt was made to send the update to the server.\n   */\n  setDeviceToken(dt) {\n    let sent = false;\n    // Convert any falsish value to null.\n    dt = dt || null;\n    if (dt != this._deviceToken) {\n      this._deviceToken = dt;\n      if (this.isConnected() && this.isAuthenticated()) {\n        this.#send({\n          'hi': {\n            'dev': dt || Tinode.DEL_CHAR\n          }\n        });\n        sent = true;\n      }\n    }\n    return sent;\n  }\n\n  /**\n   * @typedef Credential\n   * @type {Object}\n   * @property {string} meth - validation method.\n   * @property {string} val - value to validate (e.g. email or phone number).\n   * @property {string} resp - validation response.\n   * @property {Object} params - validation parameters.\n   */\n  /**\n   * Authenticate current session.\n   *\n   * @param {string} scheme - Authentication scheme; <code>\"basic\"</code> is the only currently supported scheme.\n   * @param {string} secret - Authentication secret, assumed to be already base64 encoded.\n   * @param {Credential=} cred - credential confirmation, if required.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected when server reply is received.\n   */\n  login(scheme, secret, cred) {\n    const pkt = this.#initPacket('login');\n    pkt.login.scheme = scheme;\n    pkt.login.secret = secret;\n    pkt.login.cred = cred;\n\n    return this.#send(pkt, pkt.login.id)\n      .then(ctrl => this.#loginSuccessful(ctrl));\n  }\n\n  /**\n   * Wrapper for {@link Tinode#login} with basic authentication\n   *\n   * @param {string} uname - User name.\n   * @param {string} password  - Password.\n   * @param {Credential=} cred - credential confirmation, if required.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  loginBasic(uname, password, cred) {\n    return this.login('basic', b64EncodeUnicode(uname + ':' + password), cred)\n      .then(ctrl => {\n        this._login = uname;\n        return ctrl;\n      });\n  }\n\n  /**\n   * Wrapper for {@link Tinode#login} with token authentication\n   *\n   * @param {string} token - Token received in response to earlier login.\n   * @param {Credential=} cred - credential confirmation, if required.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  loginToken(token, cred) {\n    return this.login('token', token, cred);\n  }\n\n  /**\n   * Send a request for resetting an authentication secret.\n   *\n   * @param {string} scheme - authentication scheme to reset.\n   * @param {string} method - method to use for resetting the secret, such as \"email\" or \"tel\".\n   * @param {string} value - value of the credential to use, a specific email address or a phone number.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving the server reply.\n   */\n  requestResetAuthSecret(scheme, method, value) {\n    return this.login('reset', b64EncodeUnicode(scheme + ':' + method + ':' + value));\n  }\n\n  /**\n   * @typedef AuthToken\n   * @type {Object}\n   * @property {string} token - Token value.\n   * @property {Date} expires - Token expiration time.\n   */\n  /**\n   * Get stored authentication token.\n   *\n   * @returns {AuthToken} authentication token.\n   */\n  getAuthToken() {\n    if (this._authToken && (this._authToken.expires.getTime() > Date.now())) {\n      return this._authToken;\n    } else {\n      this._authToken = null;\n    }\n    return null;\n  }\n\n  /**\n   * Application may provide a saved authentication token.\n   *\n   * @param {AuthToken} token - authentication token.\n   */\n  setAuthToken(token) {\n    this._authToken = token;\n  }\n\n  /**\n   * @typedef SetParams\n   * @type {Object}\n   * @property {SetDesc=} desc - Topic initialization parameters when creating a new topic or a new subscription.\n   * @property {SetSub=} sub - Subscription initialization parameters.\n   * @property {Array.<string>=} attachments - URLs of out of band attachments used in parameters.\n   */\n  /**\n   * @typedef SetDesc\n   * @type {Object}\n   * @property {DefAcs=} defacs - Default access mode.\n   * @property {Object=} public - Free-form topic description, publically accessible.\n   * @property {Object=} private - Free-form topic description accessible only to the owner.\n   * @property {Object=} trusted - Trusted user data which can be set by a root user only.\n   */\n  /**\n   * @typedef SetSub\n   * @type {Object}\n   * @property {string=} user - UID of the user affected by the request. Default (empty) - current user.\n   * @property {string=} mode - User access mode, either requested or assigned dependent on context.\n   */\n  /**\n   * Send a topic subscription request.\n   *\n   * @param {string} topic - Name of the topic to subscribe to.\n   * @param {GetQuery=} getParams - Optional subscription metadata query\n   * @param {SetParams=} setParams - Optional initialization parameters\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  subscribe(topicName, getParams, setParams) {\n    const pkt = this.#initPacket('sub', topicName)\n    if (!topicName) {\n      topicName = Const.TOPIC_NEW;\n    }\n\n    pkt.sub.get = getParams;\n\n    if (setParams) {\n      if (setParams.sub) {\n        pkt.sub.set.sub = setParams.sub;\n      }\n\n      if (setParams.desc) {\n        const desc = setParams.desc;\n        if (Tinode.isNewGroupTopicName(topicName)) {\n          // Full set.desc params are used for new topics only\n          pkt.sub.set.desc = desc;\n        } else if (Tinode.isP2PTopicName(topicName) && desc.defacs) {\n          // Use optional default permissions only.\n          pkt.sub.set.desc = {\n            defacs: desc.defacs\n          };\n        }\n      }\n\n      // See if external objects were used in topic description.\n      if (Array.isArray(setParams.attachments) && setParams.attachments.length > 0) {\n        pkt.extra = {\n          attachments: setParams.attachments.filter(ref => isUrlRelative(ref))\n        };\n      }\n\n      if (setParams.tags) {\n        pkt.sub.set.tags = setParams.tags;\n      }\n    }\n    return this.#send(pkt, pkt.sub.id);\n  }\n\n  /**\n   * Detach and optionally unsubscribe from the topic\n   *\n   * @param {string} topic - Topic to detach from.\n   * @param {boolean} unsub - If <code>true</code>, detach and unsubscribe, otherwise just detach.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  leave(topic, unsub) {\n    const pkt = this.#initPacket('leave', topic);\n    pkt.leave.unsub = unsub;\n\n    return this.#send(pkt, pkt.leave.id);\n  }\n\n  /**\n   * Create message draft without sending it to the server.\n   *\n   * @param {string} topic - Name of the topic to publish to.\n   * @param {Object} content - Payload to publish.\n   * @param {boolean=} noEcho - If <code>true</code>, tell the server not to echo the message to the original session.\n   *\n   * @returns {Object} new message which can be sent to the server or otherwise used.\n   */\n  createMessage(topic, content, noEcho) {\n    const pkt = this.#initPacket('pub', topic);\n\n    let dft = typeof content == 'string' ? Drafty.parse(content) : content;\n    if (dft && !Drafty.isPlainText(dft)) {\n      pkt.pub.head = {\n        mime: Drafty.getContentType()\n      };\n      content = dft;\n    }\n    pkt.pub.noecho = noEcho;\n    pkt.pub.content = content;\n\n    return pkt.pub;\n  }\n\n  /**\n   * Publish {data} message to topic.\n   *\n   * @param {string} topicName - Name of the topic to publish to.\n   * @param {Object} content - Payload to publish.\n   * @param {boolean=} noEcho - If <code>true</code>, tell the server not to echo the message to the original session.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  publish(topicName, content, noEcho) {\n    return this.publishMessage(\n      this.createMessage(topicName, content, noEcho)\n    );\n  }\n\n  /**\n   * Publish message to topic. The message should be created by {@link Tinode#createMessage}.\n   *\n   * @param {Object} pub - Message to publish.\n   * @param {Array.<string>=} attachments - array of URLs with attachments.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  publishMessage(pub, attachments) {\n    // Make a shallow copy. Needed in order to clear locally-assigned temp values;\n    pub = Object.assign({}, pub);\n    pub.seq = undefined;\n    pub.from = undefined;\n    pub.ts = undefined;\n    const msg = {\n      pub: pub,\n    };\n    if (attachments) {\n      msg.extra = {\n        attachments: attachments.filter(ref => isUrlRelative(ref))\n      };\n    }\n    return this.#send(msg, pub.id);\n  }\n\n  /**\n   * Out of band notification: notify topic that an external (push) notification was recived by the client.\n   *\n   * @param {object} data - notification payload.\n   * @param {string} data.what - notification type, 'msg', 'read', 'sub'.\n   * @param {string} data.topic - name of the updated topic.\n   * @param {number=} data.seq - seq ID of the affected message.\n   * @param {string=} data.xfrom - UID of the sender.\n   * @param {object=} data.given - new subscription 'given', e.g. 'ASWP...'.\n   * @param {object=} data.want - new subscription 'want', e.g. 'RWJ...'.\n   */\n  oobNotification(data) {\n    this.logger('oob: ' + (this._trimLongStrings ? JSON.stringify(data, jsonLoggerHelper) : data));\n\n    switch (data.what) {\n      case 'msg':\n        if (!data.seq || data.seq < 1 || !data.topic) {\n          // Server sent invalid data.\n          break;\n        }\n\n        if (!this.isConnected()) {\n          // Let's ignore the message if there is no connection: no connection means there are no open\n          // tabs with Tinode.\n          break;\n        }\n\n        const topic = this.#cacheGet('topic', data.topic);\n        if (!topic) {\n          // TODO: check if there is a case when a message can arrive from an unknown topic.\n          break;\n        }\n\n        if (topic.isSubscribed()) {\n          // No need to fetch: topic is already subscribed and got data through normal channel.\n          break;\n        }\n\n        if (topic.maxMsgSeq() < data.seq) {\n          if (topic.isChannelType()) {\n            topic._updateReceived(data.seq, 'fake-uid');\n          }\n\n          // New message.\n          if (data.xfrom && !this.#cacheGet('user', data.xfrom)) {\n            // Message from unknown sender, fetch description from the server.\n            // Sending asynchronously without a subscription.\n            this.getMeta(data.xfrom, new MetaGetBuilder().withDesc().build()).catch(err => {\n              this.logger(\"Failed to get the name of a new sender\", err);\n            });\n          }\n\n          topic.subscribe(null).then(_ => {\n            return topic.getMeta(new MetaGetBuilder(topic).withLaterData(24).withLaterDel(24).build());\n          }).then(_ => {\n            // Allow data fetch to complete and get processed successfully.\n            topic.leaveDelayed(false, 1000);\n          }).catch(err => {\n            this.logger(\"On push data fetch failed\", err);\n          }).finally(_ => {\n            this.getMeTopic()._refreshContact('msg', topic);\n          });\n        }\n        break;\n\n      case 'read':\n        this.getMeTopic()._routePres({\n          what: 'read',\n          seq: data.seq\n        });\n        break;\n\n      case 'sub':\n        if (!this.isMe(data.xfrom)) {\n          // TODO: handle updates from other users.\n          break;\n        }\n\n        const mode = {\n          given: data.modeGiven,\n          want: data.modeWant\n        };\n        const acs = new AccessMode(mode);\n        const pres = (!acs.mode || acs.mode == AccessMode._NONE) ?\n          // Subscription deleted.\n          {\n            what: 'gone',\n            src: data.topic\n          } :\n          // New subscription or subscription updated.\n          {\n            what: 'acs',\n            src: data.topic,\n            dacs: mode\n          };\n        this.getMeTopic()._routePres(pres);\n        break;\n\n      default:\n        this.logger(\"Unknown push type ignored\", data.what);\n    }\n  }\n\n  /**\n   * @typedef GetQuery\n   * @type {Object}\n   * @property {GetOptsType=} desc - If provided (even if empty), fetch topic description.\n   * @property {GetOptsType=} sub - If provided (even if empty), fetch topic subscriptions.\n   * @property {GetDataType=} data - If provided (even if empty), get messages.\n   */\n\n  /**\n   * @typedef GetOptsType\n   * @type {Object}\n   * @property {Date=} ims - \"If modified since\", fetch data only it was was modified since stated date.\n   * @property {number=} limit - Maximum number of results to return. Ignored when querying topic description.\n   */\n\n  /**\n   * @typedef GetDataType\n   * @type {Object}\n   * @property {number=} since - Load messages with seq id equal or greater than this value.\n   * @property {number=} before - Load messages with seq id lower than this number.\n   * @property {number=} limit - Maximum number of results to return.\n   */\n\n  /**\n   * Request topic metadata\n   *\n   * @param {string} topic - Name of the topic to query.\n   * @param {GetQuery} params - Parameters of the query. Use {@link Tinode.MetaGetBuilder} to generate.\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  getMeta(topic, params) {\n    const pkt = this.#initPacket('get', topic);\n\n    pkt.get = mergeObj(pkt.get, params);\n\n    return this.#send(pkt, pkt.get.id);\n  }\n\n  /**\n   * Update topic's metadata: description, subscribtions.\n   *\n   * @param {string} topic - Topic to update.\n   * @param {SetParams} params - topic metadata to update.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  setMeta(topic, params) {\n    const pkt = this.#initPacket('set', topic);\n    const what = [];\n\n    if (params) {\n      ['desc', 'sub', 'tags', 'cred', 'ephemeral'].forEach(function(key) {\n        if (params.hasOwnProperty(key)) {\n          what.push(key);\n          pkt.set[key] = params[key];\n        }\n      });\n\n      if (Array.isArray(params.attachments) && params.attachments.length > 0) {\n        pkt.extra = {\n          attachments: params.attachments.filter(ref => isUrlRelative(ref))\n        };\n      }\n    }\n\n    if (what.length == 0) {\n      return Promise.reject(new Error(\"Invalid {set} parameters\"));\n    }\n\n    return this.#send(pkt, pkt.set.id);\n  }\n\n  /**\n   * Range of message IDs to delete.\n   *\n   * @typedef DelRange\n   * @type {Object}\n   * @property {number} low - low end of the range, inclusive (closed).\n   * @property {number=} hi - high end of the range, exclusive (open).\n   */\n  /**\n   * Delete some or all messages in a topic.\n   *\n   * @param {string} topic - Topic name to delete messages from.\n   * @param {DelRange[]} list - Ranges of message IDs to delete.\n   * @param {boolean=} hard - Hard or soft delete\n   *\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delMessages(topic, ranges, hard) {\n    const pkt = this.#initPacket('del', topic);\n\n    pkt.del.what = 'msg';\n    pkt.del.delseq = ranges;\n    pkt.del.hard = hard;\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Delete the topic alltogether. Requires Owner permission.\n   *\n   * @param {string} topicName - Name of the topic to delete\n   * @param {boolean} hard - hard-delete topic.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delTopic(topicName, hard) {\n    const pkt = this.#initPacket('del', topicName);\n    pkt.del.what = 'topic';\n    pkt.del.hard = hard;\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Delete subscription. Requires Share permission.\n   *\n   * @param {string} topicName - Name of the topic to delete\n   * @param {string} user - User ID to remove.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delSubscription(topicName, user) {\n    const pkt = this.#initPacket('del', topicName);\n    pkt.del.what = 'sub';\n    pkt.del.user = user;\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Delete credential. Always sent on <code>'me'</code> topic.\n   *\n   * @param {string} method - validation method such as <code>'email'</code> or <code>'tel'</code>.\n   * @param {string} value - validation value, i.e. <code>'alice@example.com'</code>.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delCredential(method, value) {\n    const pkt = this.#initPacket('del', Const.TOPIC_ME);\n    pkt.del.what = 'cred';\n    pkt.del.cred = {\n      meth: method,\n      val: value\n    };\n\n    return this.#send(pkt, pkt.del.id);\n  }\n\n  /**\n   * Request to delete account of the current user.\n   *\n   * @param {boolean} hard - hard-delete user.\n   * @returns {Promise} Promise which will be resolved/rejected on receiving server reply.\n   */\n  delCurrentUser(hard) {\n    const pkt = this.#initPacket('del', null);\n    pkt.del.what = 'user';\n    pkt.del.hard = hard;\n\n    return this.#send(pkt, pkt.del.id).then(_ => {\n      this._myUID = null;\n    });\n  }\n\n  /**\n   * Notify server that a message or messages were read or received. Does NOT return promise.\n   *\n   * @param {string} topicName - Name of the topic where the mesage is being aknowledged.\n   * @param {string} what - Action being aknowledged, either <code>\"read\"</code> or <code>\"recv\"</code>.\n   * @param {number} seq - Maximum id of the message being acknowledged.\n   */\n  note(topicName, what, seq) {\n    if (seq <= 0 || seq >= Const.LOCAL_SEQID) {\n      throw new Error(`Invalid message id ${seq}`);\n    }\n\n    const pkt = this.#initPacket('note', topicName);\n    pkt.note.what = what;\n    pkt.note.seq = seq;\n    this.#send(pkt);\n  }\n\n  /**\n   * Broadcast a key-press notification to topic subscribers. Used to show\n   * typing notifications \"user X is typing...\".\n   *\n   * @param {string} topicName - Name of the topic to broadcast to.\n   * @param {string=} type - notification to send, default is 'kp'.\n   */\n  noteKeyPress(topicName, type) {\n    const pkt = this.#initPacket('note', topicName);\n    pkt.note.what = type || 'kp';\n    this.#send(pkt);\n  }\n\n  /**\n   * Send a video call notification to topic subscribers (including dialing,\n   * hangup, etc.).\n   *\n   * @param {string} topicName - Name of the topic to broadcast to.\n   * @param {int} seq - ID of the call message the event pertains to.\n   * @param {string} evt - Call event.\n   * @param {string} payload - Payload associated with this event (e.g. SDP string).\n   *\n   * @returns {Promise} Promise (for some call events) which will\n   *                    be resolved/rejected on receiving server reply\n   */\n  videoCall(topicName, seq, evt, payload) {\n    const pkt = this.#initPacket('note', topicName);\n    pkt.note.seq = seq;\n    pkt.note.what = 'call';\n    pkt.note.event = evt;\n    pkt.note.payload = payload;\n    this.#send(pkt, pkt.note.id);\n  }\n\n  /**\n   * Get a named topic, either pull it from cache or create a new instance.\n   * There is a single instance of topic for each name.\n   *\n   * @param {string} topicName - Name of the topic to get.\n   *\n   * @returns {Topic} Requested or newly created topic or <code>undefined</code> if topic name is invalid.\n   */\n  getTopic(topicName) {\n    let topic = this.#cacheGet('topic', topicName);\n    if (!topic && topicName) {\n      if (topicName == Const.TOPIC_ME) {\n        topic = new TopicMe();\n      } else if (topicName == Const.TOPIC_FND) {\n        topic = new TopicFnd();\n      } else {\n        topic = new Topic(topicName);\n      }\n      // Cache management.\n      this.#attachCacheToTopic(topic);\n      topic._cachePutSelf();\n      // Don't save to DB here: a record will be added when the topic is subscribed.\n    }\n    return topic;\n  }\n\n  /**\n   * Get a named topic from cache.\n   *\n   * @param {string} topicName - Name of the topic to get.\n   *\n   * @returns {Topic} Requested topic or <code>undefined</code> if topic is not found in cache.\n   */\n  cacheGetTopic(topicName) {\n    return this.#cacheGet('topic', topicName);\n  }\n\n  /**\n   * Remove named topic from cache.\n   *\n   * @param {string} topicName - Name of the topic to remove from cache.\n   */\n  cacheRemTopic(topicName) {\n    this.#cacheDel('topic', topicName);\n  }\n\n  /**\n   * Iterate over cached topics.\n   *\n   * @param {Function} func - callback to call for each topic.\n   * @param {Object} context - 'this' inside the 'func'.\n   */\n  mapTopics(func, context) {\n    this.#cacheMap('topic', func, context);\n  }\n\n  /**\n   * Check if named topic is already present in cache.\n   *\n   * @param {string} topicName - Name of the topic to check.\n   * @returns {boolean} true if topic is found in cache, false otherwise.\n   */\n  isTopicCached(topicName) {\n    return !!this.#cacheGet('topic', topicName);\n  }\n\n  /**\n   * Generate unique name like <code>'new123456'</code> suitable for creating a new group topic.\n   *\n   * @param {boolean} isChan - if the topic is channel-enabled.\n   * @returns {string} name which can be used for creating a new group topic.\n   */\n  newGroupTopicName(isChan) {\n    return (isChan ? Const.TOPIC_NEW_CHAN : Const.TOPIC_NEW) + this.getNextUniqueId();\n  }\n\n  /**\n   * Instantiate <code>'me'</code> topic or get it from cache.\n   *\n   * @returns {TopicMe} Instance of <code>'me'</code> topic.\n   */\n  getMeTopic() {\n    return this.getTopic(Const.TOPIC_ME);\n  }\n\n  /**\n   * Instantiate <code>'fnd'</code> (find) topic or get it from cache.\n   *\n   * @returns {Topic} Instance of <code>'fnd'</code> topic.\n   */\n  getFndTopic() {\n    return this.getTopic(Const.TOPIC_FND);\n  }\n\n  /**\n   * Create a new {@link LargeFileHelper} instance\n   *\n   * @returns {LargeFileHelper} instance of a {@link Tinode.LargeFileHelper}.\n   */\n  getLargeFileHelper() {\n    return new LargeFileHelper(this, Const.PROTOCOL_VERSION);\n  }\n\n  /**\n   * Get the UID of the the current authenticated user.\n   *\n   * @returns {string} UID of the current user or <code>undefined</code> if the session is not yet\n   * authenticated or if there is no session.\n   */\n  getCurrentUserID() {\n    return this._myUID;\n  }\n\n  /**\n   * Check if the given user ID is equal to the current user's UID.\n   *\n   * @param {string} uid - UID to check.\n   *\n   * @returns {boolean} true if the given UID belongs to the current logged in user.\n   */\n  isMe(uid) {\n    return this._myUID === uid;\n  }\n\n  /**\n   * Get login used for last successful authentication.\n   *\n   * @returns {string} login last used successfully or <code>undefined</code>.\n   */\n  getCurrentLogin() {\n    return this._login;\n  }\n\n  /**\n   * Return information about the server: protocol version and build timestamp.\n   *\n   * @returns {Object} build and version of the server or <code>null</code> if there is no connection or\n   * if the first server response has not been received yet.\n   */\n  getServerInfo() {\n    return this._serverInfo;\n  }\n\n  /**\n   * Report a topic for abuse. Wrapper for {@link Tinode#publish}.\n   *\n   * @param {string} action - the only supported action is 'report'.\n   * @param {string} target - name of the topic being reported.\n   *\n   * @returns {Promise} Promise to be resolved/rejected when the server responds to request.\n   */\n  report(action, target) {\n    return this.publish(Const.TOPIC_SYS, Drafty.attachJSON(null, {\n      'action': action,\n      'target': target\n    }));\n  }\n\n  /**\n   * Return server-provided configuration value.\n   *\n   * @param {string} name of the value to return.\n   * @param {Object} defaultValue to return in case the parameter is not set or not found.\n   *\n   * @returns {Object} named value.\n   */\n  getServerParam(name, defaultValue) {\n    return this._serverInfo && this._serverInfo[name] || defaultValue;\n  }\n\n  /**\n   * Toggle console logging. Logging is off by default.\n   *\n   * @param {boolean} enabled - Set to <code>true</code> to enable logging to console.\n   * @param {boolean} trimLongStrings - Set to <code>true</code> to trim long strings.\n   */\n  enableLogging(enabled, trimLongStrings) {\n    this._loggingEnabled = enabled;\n    this._trimLongStrings = enabled && trimLongStrings;\n  }\n\n  /**\n   * Set UI language to report to the server. Must be called before <code>'hi'</code> is sent, otherwise it will not be used.\n   *\n   * @param {string} hl - human (UI) language, like <code>\"en_US\"</code> or <code>\"zh-Hans\"</code>.\n   */\n  setHumanLanguage(hl) {\n    if (hl) {\n      this._humanLanguage = hl;\n    }\n  }\n\n  /**\n   * Check if given topic is online.\n   *\n   * @param {string} name of the topic to test.\n   * @returns {boolean} true if topic is online, false otherwise.\n   */\n  isTopicOnline(name) {\n    const topic = this.#cacheGet('topic', name);\n    return topic && topic.online;\n  }\n\n  /**\n   * Get access mode for the given contact.\n   *\n   * @param {string} name of the topic to query.\n   * @returns {AccessMode} access mode if topic is found, null otherwise.\n   */\n  getTopicAccessMode(name) {\n    const topic = this.#cacheGet('topic', name);\n    return topic ? topic.acs : null;\n  }\n\n  /**\n   * Include message ID into all subsequest messages to server instructin it to send aknowledgemens.\n   * Required for promises to function. Default is <code>\"on\"</code>.\n   *\n   * @param {boolean} status - Turn aknowledgemens on or off.\n   * @deprecated\n   */\n  wantAkn(status) {\n    if (status) {\n      this._messageId = Math.floor((Math.random() * 0xFFFFFF) + 0xFFFFFF);\n    } else {\n      this._messageId = 0;\n    }\n  }\n\n  // Callbacks:\n  /**\n   * Callback to report when the websocket is opened. The callback has no parameters.\n   *\n   * @type {onWebsocketOpen}\n   */\n  onWebsocketOpen = undefined;\n\n  /**\n   * @typedef ServerParams\n   *\n   * @type {Object}\n   * @property {string} ver - Server version\n   * @property {string} build - Server build\n   * @property {string=} sid - Session ID, long polling connections only.\n   */\n\n  /**\n   * @callback onConnect\n   * @param {number} code - Result code\n   * @param {string} text - Text epxplaining the completion, i.e \"OK\" or an error message.\n   * @param {ServerParams} params - Parameters returned by the server.\n   */\n  /**\n   * Callback to report when connection with Tinode server is established.\n   * @type {onConnect}\n   */\n  onConnect = undefined;\n\n  /**\n   * Callback to report when connection is lost. The callback has no parameters.\n   * @type {onDisconnect}\n   */\n  onDisconnect = undefined;\n\n  /**\n   * @callback onLogin\n   * @param {number} code - NUmeric completion code, same as HTTP status codes.\n   * @param {string} text - Explanation of the completion code.\n   */\n  /**\n   * Callback to report login completion.\n   * @type {onLogin}\n   */\n  onLogin = undefined;\n\n  /**\n   * Callback to receive <code>{ctrl}</code> (control) messages.\n   * @type {onCtrlMessage}\n   */\n  onCtrlMessage = undefined;\n\n  /**\n   * Callback to recieve <code>{data}</code> (content) messages.\n   * @type {onDataMessage}\n   */\n  onDataMessage = undefined;\n\n  /**\n   * Callback to receive <code>{pres}</code> (presence) messages.\n   * @type {onPresMessage}\n   */\n  onPresMessage = undefined;\n\n  /**\n   * Callback to receive all messages as objects.\n   * @type {onMessage}\n   */\n  onMessage = undefined;\n\n  /**\n   * Callback to receive all messages as unparsed text.\n   * @type {onRawMessage}\n   */\n  onRawMessage = undefined;\n\n  /**\n   * Callback to receive server responses to network probes. See {@link Tinode#networkProbe}\n   * @type {onNetworkProbe}\n   */\n  onNetworkProbe = undefined;\n\n  /**\n   * Callback to be notified when exponential backoff is iterating.\n   * @type {onAutoreconnectIteration}\n   */\n  onAutoreconnectIteration = undefined;\n};\n\n// Exported constants\nTinode.MESSAGE_STATUS_NONE = Const.MESSAGE_STATUS_NONE;\nTinode.MESSAGE_STATUS_QUEUED = Const.MESSAGE_STATUS_QUEUED;\nTinode.MESSAGE_STATUS_SENDING = Const.MESSAGE_STATUS_SENDING;\nTinode.MESSAGE_STATUS_FAILED = Const.MESSAGE_STATUS_FAILED;\nTinode.MESSAGE_STATUS_SENT = Const.MESSAGE_STATUS_SENT;\nTinode.MESSAGE_STATUS_RECEIVED = Const.MESSAGE_STATUS_RECEIVED;\nTinode.MESSAGE_STATUS_READ = Const.MESSAGE_STATUS_READ;\nTinode.MESSAGE_STATUS_TO_ME = Const.MESSAGE_STATUS_TO_ME;\n\n// Unicode [del] symbol.\nTinode.DEL_CHAR = Const.DEL_CHAR;\n\n// Names of keys to server-provided configuration limits.\nTinode.MAX_MESSAGE_SIZE = 'maxMessageSize';\nTinode.MAX_SUBSCRIBER_COUNT = 'maxSubscriberCount';\nTinode.MAX_TAG_COUNT = 'maxTagCount';\nTinode.MAX_FILE_UPLOAD_SIZE = 'maxFileUploadSize';\n"],"names":["MAX_PREVIEW_DATA_SIZE","JSON_MIME_TYPE","ALLOWED_ENT_FIELDS","INLINE_STYLES","name","start","end","FMT_WEIGHT","ENTITY_TYPES","dataName","pack","val","test","url","re","slice","FORMAT_TAGS","AU","html_tag","md_tag","undefined","isVoid","BN","BR","CO","DL","EM","EX","FM","HD","HL","HT","IM","LN","MN","RW","QQ","ST","VC","VD","base64toObjectUrl","b64","contentType","logger","bin","atob","length","buf","ArrayBuffer","arr","Uint8Array","i","charCodeAt","URL","createObjectURL","Blob","type","err","message","base64toDataUrl","DECORATORS","open","_","close","data","props","href","target","id","act","ref","mime","Drafty","src","duration","size","tmpPreviewUrl","_tempPreview","previewUrl","downloadUrl","width","height","title","alt","state","preview","premime","preref","this","txt","fmt","ent","chunkify","line","spans","chunks","span","at","push","chunk","tp","chld","children","toSpanTree","tree","last","draftyToTree","doc","Array","isArray","text","len","key","attachments","forEach","includes","sort","a","b","diff","indexOf","spansToTree","treeTopDown","node","child","parent","addNode","n","substring","att","subspans","inner","tag","treeToDrafty","keymap","c","Object","keys","newKey","transformer","context","dst","call","treeBottomUp","formatter","index","stack","values","pop","shortenTree","limit","tail","lightEntity","allow","copyEntData","lTrim","trimStart","shift","attachmentsToEnd","concat","draftify","startAt","plain","ranges","drafty","light","entries","dc","init","plainText","parse","content","lines","split","entityMap","entityIndex","blx","entities","block","original","re_start","re_end","result","exec","start_offset","lastIndexOf","end_offset","spannify","match","extracted","entity","offset","unique","idx","filter","el","extractEntities","map","s","append","first","second","insertImage","imageDesc","ex","refurl","bits","filename","urlPromise","_processing","then","insertVideo","videoDesc","urls","insertAudio","audioDesc","videoCall","audioOnly","aonly","updateVideoCall","params","assign","quote","header","uid","body","appendLineBreak","mention","appendLink","linkData","appendImage","appendAudio","attachFile","attachmentDesc","wrapInto","style","wrapAsForm","insertButton","actionType","actionValue","refUrl","appendButton","attachJSON","UNSAFE_toHTML","join","format","shorten","forwardedContent","replyContent","startsWith","forwarding","toPlainText","isPlainText","toMarkdown","def","isValid","txt_type","hasAttachments","callback","count","hasEntities","styles","sanitizeEntities","getDownloadUrl","entData","isProcessing","getPreviewUrl","getEntitySize","getEntityMimeType","tagName","attrValue","getContentType","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","AccessMode","constructor","acs","given","decode","want","mode","static","str","_BITMASK","_NONE","bitmask","_JOIN","_READ","_WRITE","_PRES","_APPROVE","_SHARE","_DELETE","_OWNER","m0","bit","charAt","toUpperCase","_INVALID","res","upd","action","val0","parts","a1","a2","toString","encode","jsonHelper","setMode","m","updateMode","u","update","getMode","setGiven","updateGiven","getGiven","setWant","w","updateWant","getWant","getMissing","getExcessive","updateAll","isOwner","side","isPresencer","isMuted","isJoiner","isReader","isWriter","isApprover","isAdmin","isSharer","isDeleter","flag","Error","VERSION","LIBRARY","TOPIC_NEW","TOPIC_NEW_CHAN","TOPIC_ME","TOPIC_FND","TOPIC_GRP","LOCAL_SEQID","EXPIRE_PROMISES_TIMEOUT","EXPIRE_PROMISES_PERIOD","DEL_CHAR","CommError","code","super","jsonParseHelper","date","Date","isNaN","isUrlRelative","isValidDate","getTime","mergeObj","ignore","mergeToCache","cache","newval","simplify","getOwnPropertyNames","WebSocketProvider","XHRProvider","NETWORK_ERROR","NETWORK_ERROR_TEXT","NETWORK_USER","NETWORK_USER_TEXT","_BOFF_BASE","_BOFF_MAX_ITER","_BOFF_JITTER","makeBaseUrl","host","protocol","version","apiKey","Connection","config","version_","autoreconnect_","secure","autoreconnect","transport","initialized","wsProvider","xhrProvider","l","connect","host_","force","Promise","reject","reconnect","disconnect","sendText","msg","isConnected","probe","backoffReset","clearTimeout","timeout","Math","pow","random","onAutoreconnectIteration","setTimeout","prom","catch","_lpURL","_poller","_sender","lp_poller","url_","resolve","poller","promiseCompleted","onreadystatechange","evt","readyState","status","pkt","JSON","responseText","ctrl","sid","send","onOpen","onMessage","onDisconnect","abort","sender","lp_sender","OPEN","conn","onerror","onopen","onclose","onmessage","DB_NAME","IDBProvider","DB","onError","initDatabase","req","onsuccess","event","db","disabled","error","onupgradeneeded","createObjectStore","keyPath","deleteDatabase","onblocked","isReady","updTopic","topic","trx","transaction","oncomplete","objectStore","put","commit","markTopicAsDeleted","_deleted","remTopic","delete","IDBKeyRange","only","bound","Number","MAX_SAFE_INTEGER","mapTopics","deserializeTopic","updUser","pub","arguments","public","remUser","mapUsers","getUser","user","updSubscription","topicName","sub","mapSubscriptions","getAll","addMessage","add","updMessageStatus","seq","_status","remMessages","from","to","range","readMessages","query","since","before","openCursor","cursor","value","continue","idbProvider","source","f","tags","_tags","setAccessMode","read","unread","max","getAccessMode","LargeFileHelper","tinode","_tinode","_version","_apiKey","_authToken","getAuthToken","_reqId","getNextUniqueId","xhr","toResolve","toReject","onProgress","onSuccess","onFailure","uploadWithBaseUrl","baseUrl","avatarFor","instance","base","endsWith","setRequestHeader","token","upload","onprogress","lengthComputable","loaded","total","onload","response","statusText","onabort","form","FormData","set","_secure","_host","download","relativeUrl","mimetype","responseType","link","document","createElement","display","setAttribute","appendChild","click","removeChild","revokeObjectURL","reader","FileReader","readAsText","cancel","getId","MetaGetBuilder","what","withData","withLaterData","_maxSeq","withEarlierData","_minSeq","withDesc","ims","withLaterDesc","withSub","userOrTopic","opts","getType","withOneSub","withLaterOneSub","_lastSubsUpdate","withLaterSub","withTags","withCred","withDel","withLaterDel","_maxDel","extract","build","updated","isP2PType","CBuffer","compare_","unique_","getAt","buffer","getLast","insert","delAt","r","splice","delRange","reset","startIdx","beforeIdx","find","elem","nearest","isEmpty","exact","pivot","found","Topic","callbacks","created","touched","private","trusted","_users","_queuedSeqId","Const","_noEarlierMsgs","_recvNotificationTimer","_credentials","_messageVersions","_messages","_attached","_new","_delayedLeaveTimer","onData","onMeta","onPres","onInfo","onMetaDesc","onMetaSub","onSubsUpdated","onTagsUpdated","onCredsUpdated","onDeleteTopic","onAllMessagesReceived","topicType","isP2PTopicName","isGroupTopicName","isSubscribed","subscribe","getParams","setParams","_cacheDelSelf","_cachePutSelf","ts","me","getMeTopic","desc","_noForwarding","_processMetaDesc","createMessage","noEcho","publish","publishMessage","_sending","_failed","swapMessageId","_maybeUpdateMessageVersionsCache","_routeData","publishDraft","_getQueuedSeqId","getCurrentUserID","noecho","_db","_cancelled","leave","unsub","_resetSub","_gone","leaveDelayed","delay","getMeta","getMessagesPage","forward","startMetaQuery","_loadMessages","promise","setMeta","out","t","trim","toLowerCase","item","pos","ary","normalizeArray","_processMetaSub","_processMetaTags","cred","_processMetaCreds","subscriber","am","invite","archive","arch","delMessages","hard","r1","r2","low","hi","tosend","reduce","del","flushMessageRange","flushMessage","delMessagesAll","hardDel","_all","delMessagesList","list","prev","delMessagesEdits","messageVersions","delTopic","delSubscription","note","_updateReadRecv","_refreshContact","noteRecv","noteRead","noteKeyPress","noteRecording","payload","oldVal","doUpdate","recv","userDesc","_cacheGetUser","p2pPeerDesc","subscribers","cb","origSeq","versions","messages","sinceId","beforeId","msgs","unused1","unused2","_isReplacementMsg","latest","latestMsgVersion","_origTs","_origSeq","findMessage","latestMessage","maxMsgSeq","maxClearId","messageCount","queuedMessages","msgReceiptCount","msgReadCount","msgRecvCount","msgHasMoreMessages","newer","isNewMessage","seqId","fromId","untilId","newSeqId","numMessages","cancelSend","msgStatus","getDefaultAccess","defacs","isArchived","isMeType","isMeTopicName","isChannelType","isChannelTopicName","isGroupType","isCommType","isCommTopicName","isMe","head","replace","targetSeq","parseInt","targetMsg","outgoing","webrtc","incoming","_routeMeta","meta","_processDelMessages","clear","delseq","_routePres","pres","online","isTopicCached","dacs","_routeInfo","info","subs","deleted","_updateCachedUser","creds","_allMessagesReceived","cached","_cachePutUser","_updateReceived","TopicMe","onContactUpdate","turnOff","_myUID","cont","seen","when","updateCount","cacheRemTopic","getTopic","cr","findIndex","meth","done","resp","cacheGetTopic","ua","dummy","delCredential","method","contacts","getContact","getCredentials","TopicFnd","_contacts","indexBy","getPrototypeOf","IndexedDBProvider","b64EncodeUnicode","btoa","encodeURIComponent","p1","String","fromCharCode","jsonBuildHelper","pad","sp","repeat","millis","getUTCMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","rfc3339DateString","jsonLoggerHelper","WebSocket","XMLHttpRequest","indexedDB","chars","global","output","charCode","bc","bs","setNetworkProviders","setNetworkProvider","DBCache","initForNonBrowserApp","Tinode","onComplete","floor","_appName","appName","_platform","platform","navigator","_browser","product","reactnative","priority","tmp","substr","tokens","m2","v","minor","getBrowserInfo","userAgent","_hwos","_humanLanguage","language","detectTransport","_connection","_persist","persist","all","_loggingEnabled","dateString","args","console","log","isNewGroupTopicName","_messageId","clearStorage","initStorage","networkProbe","isAuthenticated","_authenticated","authorizeURL","parsed","searchParams","account","scheme","secret","login","acc","tmpscheme","tmpsecret","extra","createAccount","createAccountBasic","username","password","updateAccountBasic","hello","_serverInfo","onConnect","setDeviceToken","dt","sent","_deviceToken","loginBasic","uname","_login","loginToken","requestResetAuthSecret","expires","now","setAuthToken","dft","oobNotification","_trimLongStrings","stringify","xfrom","finally","modeGiven","modeWant","delCurrentUser","func","newGroupTopicName","isChan","getFndTopic","getLargeFileHelper","getCurrentLogin","getServerInfo","report","getServerParam","defaultValue","enableLogging","enabled","trimLongStrings","setHumanLanguage","hl","isTopicOnline","getTopicAccessMode","wantAkn","_pendingPromises","onOK","errorText","_inPacketCount","onRawMessage","onNetworkProbe","onCtrlMessage","onMetaMessage","onDataMessage","onPresMessage","onInfoMessage","_expirePromises","setInterval","clearInterval","_cache","_cacheDelUser","onLogin","MESSAGE_STATUS_NONE","MESSAGE_STATUS_QUEUED","MESSAGE_STATUS_SENDING","MESSAGE_STATUS_FAILED","MESSAGE_STATUS_SENT","MESSAGE_STATUS_RECEIVED","MESSAGE_STATUS_READ","MESSAGE_STATUS_TO_ME","MAX_MESSAGE_SIZE","MAX_SUBSCRIBER_COUNT","MAX_TAG_COUNT","MAX_FILE_UPLOAD_SIZE"],"sourceRoot":""}